@page "/profile"
@using WebUI.Components.Models
@using System.ComponentModel.DataAnnotations
@using Application.DTO.Request
@using Application.Service.Commands
@using Application.Service.Queries
<PageTitle>Profile</PageTitle>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Centered="true">
    <MudTabPanel Text="Profile">
        <MudForm @bind-IsValid="@_isFormValid">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-value="_profileModel.FirstName"
                                  Variant="@_defaultVariant"
                                  T="string"
                                  Label="First Name"
                                  Required="true" RequiredError="First name is required!"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-value="_profileModel.LastName"
                                  Variant="@_defaultVariant"
                                  T="string"
                                  Label="Last Name"
                                  Required="true" RequiredError="Last name is required!"/>
                </MudItem>
            </MudGrid>

            <MudTextField @bind-value="_profileModel.Email"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Email"
                          Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>

            <MudSelect @bind-Value="_profileModel.RolesString"
                       Variant="@_defaultVariant"
                       Label="Role"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       MultiSelection="true"
                       Placeholder=@("User Role")
                       HelperText=@("Please select a role for the user")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a role for the user">
                @foreach (var staffRoles in _allStaffRoles)
                {
                    <MudSelectItem Value="staffRoles">@staffRoles</MudSelectItem>
                }
            </MudSelect>

            <MudButton 
                OnClick="@UpdateUserDetails"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Size="Size.Large"
                Disabled="IsUpdateButtonDisabled()"
                FullWidth="true">
                Register
            </MudButton>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Change password">
        <MudText>Content Two</MudText>
    </MudTabPanel>
</MudTabs>

@code {
    public const string PageUrl = "/profile";
    private const Variant _defaultVariant = Variant.Text;
    private bool _isFormValid { get; set; } = false;

    private WmsStaffUserModel? _profileModel { get; set; }
    private WmsStaffUserModel? _initialProfileModel { get; set; }
    private List<string> _allStaffRoles = new();
    private WmsStaff? _userProfile { get; set; }

    private bool IsUpdateButtonDisabled()
    {
        if (_initialProfileModel == null || _profileModel == null)
        {
            return true;
        }

        return _initialProfileModel.LastName == _profileModel.LastName &&
               _initialProfileModel.FirstName == _profileModel.FirstName &&
               _initialProfileModel.Email == _profileModel.Email &&
               _initialProfileModel.RolesString == _profileModel.RolesString && 
               !_isFormValid;
    }

    protected override async Task OnInitializedAsync()
    {
        var query = new GetAllStaffRolesQuery();
        var allStaffRoles = await Mediator.Send(query);
        _allStaffRoles = allStaffRoles.ToList();

        await base.OnInitializedAsync();

        // fill up the profile
        _profileModel = new WmsStaffUserModel();
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdentity = authenticationState.User.Identity;

        if (userIdentity != null && userIdentity.Name != null)
        {
            _userProfile = await UserManager.FindByEmailAsync(userIdentity.Name);
            if (_userProfile != null)
            {
                var roles = await UserManager.GetRolesAsync(_userProfile);
                _profileModel = new WmsStaffUserModel
                {
                    FirstName = _userProfile.FirstName,
                    LastName = _userProfile.LastName,
                    Email = _userProfile.Email,
                    RolesString = string.Join(", ", roles)
                };
            }
        }

        _initialProfileModel = (WmsStaffUserModel) _profileModel.Clone();

    }

    private async Task UpdateUserDetails()
    {
        var claims = await UserManager.GetClaimsAsync(_userProfile);
        var claimDictionary = claims.ToDictionary(claim => claim.Type, claim => claim.Value);

        var getStaffByIdQuery = new GetStaffByIdQuery(new Guid(_userProfile.Id));
        var response = await Mediator.Send(getStaffByIdQuery);

        var updateStaffRequestDTO = new UpdateStaffRequestDTO()
        {
            CompanyId = response.CompanyId,
            CreatedBy = _userProfile.CreatedBy,
            CustomClaims = claimDictionary,
            Email = _profileModel.Email,
            FirstName = _profileModel.FirstName,
            LastName = _profileModel.LastName,
            Id = new Guid(_userProfile.Id),
            Roles = _profileModel.GetRoleList(),
        };

        var updateStaffCommand = new UpdateStaffCommand(updateStaffRequestDTO);
        var result = await Mediator.Send(updateStaffCommand);

        SnackBar.Add(result.Message);

        if (result.Success)
        {
            _initialProfileModel = (WmsStaffUserModel)_profileModel.Clone();
        }
    }

}
