<MudDialog>
    <TitleContent>
        Create RefundOrderProduct
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@_isFormValid">

            <MudSelect @bind-Value="_refundOrderProductModel.ProductId"
            T="Guid?"
            ToStringFunc="@(id=> _allProductModels.FirstOrDefault(productModel=>productModel.Id == id)?.Name)"
            Variant="@_defaultVariant"
            Label="Status"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Product")
            MultiSelection="false"
            HelperText=@("Please select a product")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="true"
            RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id"></MudSelectItem>
                }
            </MudSelect>

            <MudSelect @bind-Value="_refundOrderProductModel.Status"
            Variant="@_defaultVariant"
            Label="Status"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Status")
            MultiSelection="false"
            HelperText=@("Please select a status")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="true"
            RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState">@orderState</MudSelectItem>
                }
            </MudSelect>

            <MudTextField @bind-value="_refundOrderProductModel.Quantity"
            Variant="@_defaultVariant"
            T="int"
            Label="Quantity"
            Required="true" RequiredError="Quantity is required!"
            Margin="Margin.Dense" />

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;

    private RefundOrderProductModel _refundOrderProductModel { get; set; } = new RefundOrderProductModel();

    private List<ProductModel> _allProductModels { get; set; } = [];
    private List<string> _orderStates { get; set; } = [];

    [Parameter]
    public required CurrentUserModel CurrentStaff { get; set; }

    [Parameter]
    public required Guid RefundOrderId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _refundOrderProductModel.RefundOrderId = RefundOrderId;

        var databaseHelper = new DatabaseHelper(Mediator, CurrentStaff.CompanyId);
        _allProductModels = await databaseHelper.GetAllProducts();
        
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();

    }

    private async Task Submit()
    {
        var createRefundOrderProductDTO = new CreateRefundOrderProductRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Status = _refundOrderProductModel.Status,
                ProductId = _refundOrderProductModel.ProductId,
                Quantity = _refundOrderProductModel.Quantity,
                RefundOrderId = _refundOrderProductModel.RefundOrderId,
            };
        var createRefundOrderProductCommand = new CreateRefundOrderProductCommand(createRefundOrderProductDTO);
        var createdRefundOrderProductResponseDTO = await Mediator.Send(createRefundOrderProductCommand);

        var createdRefundOrderProductModel = new RefundOrderProductModel()
            {
                Id = createdRefundOrderProductResponseDTO.Id,
                Status = _refundOrderProductModel.Status,
                ProductId = _refundOrderProductModel.ProductId,
                Quantity = _refundOrderProductModel.Quantity,
                RefundOrderId = _refundOrderProductModel.RefundOrderId,
            };
        MudDialog.Close(DialogResult.Ok(createdRefundOrderProductModel));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}