@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent

@if (_isReadPolicyExpired)
{
    <ForbiddenError/>
    return;
}

<MudGrid Class="mb-3">
    <MudItem xs="3" Class="d-flex align-center">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.RefundOrderProduct)>
            @if (ShowDeleteButton)
            {
                <MudButton OnClick="@DeleteRefundOrderProducts"
                           Color="Color.Error"
                           Variant="Variant.Filled"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="_disableDelete">
                    Delete Refund Order Details
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
    <MudItem xs="3"/>
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.RefundOrderProduct)>
            @if (ShowCreateButton)
            {
                <MudButton OnClick="@(OpenCreateRefundOrderProductDialogAsync)"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true">
                    Create Refund Order Details
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly" 
          Hover="true" FixedHeader="true"
          Filter="new Func<RefundOrderProductModel, bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@RefundOrderProductModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedRefundOrderProducts"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">RefundOrderProducts</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col/>
        <col/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Product</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RefundOrderProductModel, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RefundOrderProductModel, object>(x => x.Quantity)">Quantity</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Product">@(_allProductModels.FirstOrDefault(productModel => productModel.Id == context.ProductId)?.Name)</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Products">
            <MudSelect @bind-Value="context.ProductId"
                       T="Guid?"
                       ToStringFunc="@(id => _allProductModels.FirstOrDefault(productModel => productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product")
                       MultiSelection="false"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="context.Status"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Status")
                       MultiSelection="false"
                       HelperText=@("Please select a status")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState"/>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Quantity">
            <MudTextField @bind-Value="context.Quantity" Required/>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right"/>
    </PagerContent>
</MudTable>

@code {

    public string Name => "RefundOrderProduct";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> RefundOrderProductIds { get; set; } = new List<Guid>();
    public List<RefundOrderProductModel> RefundOrderProductModels { get; set; } = new List<RefundOrderProductModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    [Parameter]
    public Guid ParentRefundOrderId { get; set; }
    private GetRefundOrderResponseDTO _refundOrder { get; set; } = new();

    private HashSet<RefundOrderProductModel> _selectedRefundOrderProducts = new HashSet<RefundOrderProductModel>();
    private bool _disableDelete => !_selectedRefundOrderProducts.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<RefundOrderProductModel> _tableRef;
    private RefundOrderProductModel _refundOrderProductModelBeforeEdit { get; set; }

    private List<ProductModel> _allProductModels { get; set; } = [];
    private List<string> _orderStates { get; set; }
    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();
    
    private bool _isReadOnly = false;
    private bool _isReadPolicyExpired = false;
    
    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();

        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        var getRefundOrderByIdQuery = new GetRefundOrderByIdQuery(ParentRefundOrderId);
        var getRefundOrderDTO = await Mediator.Send(getRefundOrderByIdQuery);
        _refundOrder = getRefundOrderDTO;

        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        // check if user has read authorization
        var readPolicyString = DataAccessUtilities.GetPolicyString(AccessName.Read, DataTableName.RefundOrderProduct);
        _isReadPolicyExpired = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, readPolicyString);
        if (_isReadPolicyExpired)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(RefundOrderProductModel refundOrderProductModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (refundOrderProductModel.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteRefundOrderProducts()
    {
        var success = true;
        foreach (var refundOrderProductModel in _selectedRefundOrderProducts)
        {
            var deleteRefundOrderProductCommand = new DeleteRefundOrderProductCommand(refundOrderProductModel.Id);
            var result = await Mediator.Send(deleteRefundOrderProductCommand);

            if (result.Success)
            {
                RefundOrderProductIds.Remove(refundOrderProductModel.Id);
                RefundOrderProductModels.Remove(refundOrderProductModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "RefundOrderProducts Deleted" : "Failed to delete refundOrderProducts");
    }

    private void BackupItem(object refundOrderProductModel)
    {

        _refundOrderProductModelBeforeEdit = new RefundOrderProductModel()
            {
                Id = ((RefundOrderProductModel)refundOrderProductModel).Id,
                Status = ((RefundOrderProductModel)refundOrderProductModel).Status,
                Quantity = ((RefundOrderProductModel)refundOrderProductModel).Quantity,
                ProductId = ((RefundOrderProductModel)refundOrderProductModel).ProductId,
                RefundOrderId = ((RefundOrderProductModel)refundOrderProductModel).RefundOrderId,

            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object refundOrderProductModel)
    {
        ((RefundOrderProductModel)refundOrderProductModel).Id = _refundOrderProductModelBeforeEdit.Id;
        ((RefundOrderProductModel)refundOrderProductModel).Status = _refundOrderProductModelBeforeEdit.Status;
        ((RefundOrderProductModel)refundOrderProductModel).Quantity = _refundOrderProductModelBeforeEdit.Quantity;
        ((RefundOrderProductModel)refundOrderProductModel).ProductId = _refundOrderProductModelBeforeEdit.ProductId;
        ((RefundOrderProductModel)refundOrderProductModel).RefundOrderId = _refundOrderProductModelBeforeEdit.RefundOrderId;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object refundOrderProductModel)
    {
        var updateRefundOrderProductDTO = new UpdateRefundOrderProductRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((RefundOrderProductModel)refundOrderProductModel).Id,
                Status = ((RefundOrderProductModel)refundOrderProductModel).Status,
                Quantity = ((RefundOrderProductModel)refundOrderProductModel).Quantity,
                ProductId = ((RefundOrderProductModel)refundOrderProductModel).ProductId,
                RefundOrderId = ((RefundOrderProductModel)refundOrderProductModel).RefundOrderId,
            };
        var updateRefundOrderProductCommand = new UpdateRefundOrderProductCommand(updateRefundOrderProductDTO);
        var response = await Mediator.Send(updateRefundOrderProductCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateRefundOrderProductDialogAsync()
    {
        var parameters = new DialogParameters<CreateRefundOrderProductDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
            { x => x.RefundOrderId, ParentRefundOrderId},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateRefundOrderProductDialog>("Create RefundOrderProduct", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var refundOrderProductModelCreated = (RefundOrderProductModel)dialogResult.Data;
            if (refundOrderProductModelCreated == null)
            {
                throw new Exception("RefundOrderProduct created is not recognized");

            }
            RefundOrderProductIds.Add(refundOrderProductModelCreated.Id);
            RefundOrderProductModels.Add(refundOrderProductModelCreated);
            StateHasChanged();
            SnackBar.Add($"Refund order created");
        }
    }

    public async Task<bool> FetchData()
    {
        var databaseHelper = new DatabaseHelper(Mediator, CurrentStaff.CompanyId);
        RefundOrderProductModels = await databaseHelper.GetRefundOrderProducts(RefundOrderProductIds);
        _allProductModels = await databaseHelper.GetAllProducts();
        return true;
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}