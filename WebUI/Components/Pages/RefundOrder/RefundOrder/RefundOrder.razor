@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="5">
        @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteRefundOrders"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="true"
                       Disabled="_disableDelete">
                Delete Refund Order
            </MudButton>
        }
    </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateRefundOrderDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true">
                Create Refund Order
            </MudButton>
        }
    </MudItem>
</MudGrid>

<MudTable Hover="true" FixedHeader="true"
          Filter="new Func<RefundOrderModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@RefundOrderModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedRefundOrders"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">RefundOrders</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<RefundOrderModel, object>(x=>x.RefundDate)">Refund Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RefundOrderModel, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RefundOrderModel, object>(x=>x.RefundReason)">Reason</MudTableSortLabel></MudTh>
        <MudTh>Details</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Refund Date">@context.RefundDate.Value.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Reason">@context.RefundReason</MudTd>
        <MudTd DataLabel="Details">
            <MudButton OnClick="@(() => OpenRefundOrderProductDialogAsync(@context.RefundOrderProductIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.RefundOrderProductIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Refund Date">
            <MudDatePicker Label="Refund Order Date"
                           Editable="true"
                           @bind-Date="context.RefundDate"
                           Placeholder="Refund Order Date" />
        </MudTd>

        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="context.Status"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Status")
                       MultiSelection="false"
                       HelperText=@("Please select a status")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState">@orderState</MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Reason">
            <MudTextField @bind-Value="context.RefundReason" Required />
        </MudTd>
        <MudTd DataLabel="Details"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "RefundOrder";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> RefundOrderIds { get; set; } = new List<Guid>();
    public List<RefundOrderModel> RefundOrderModels { get; set; } = new List<RefundOrderModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<RefundOrderModel> _selectedRefundOrders = new HashSet<RefundOrderModel>();
    private bool _disableDelete => !_selectedRefundOrders.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<RefundOrderModel> _tableRef;
    private RefundOrderModel _refundOrderModelBeforeEdit { get; set; }
    private List<string> _orderStates { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !RefundOrderIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(RefundOrderModel refundOrderModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (refundOrderModel.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (refundOrderModel.RefundReason.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteRefundOrders()
    {
        var success = true;
        foreach (var refundOrderModel in _selectedRefundOrders)
        {
            var deleteRefundOrderCommand = new DeleteRefundOrderCommand(refundOrderModel.Id);
            var result = await Mediator.Send(deleteRefundOrderCommand);

            if (result.Success)
            {
                RefundOrderIds.Remove(refundOrderModel.Id);
                RefundOrderModels.Remove(refundOrderModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "RefundOrders Deleted" : "Failed to delete refundOrders");
    }

    private void BackupItem(object refundOrderModel)
    {

        _refundOrderModelBeforeEdit = new RefundOrderModel()
            {
                Id = ((RefundOrderModel)refundOrderModel).Id,
                Status = ((RefundOrderModel)refundOrderModel).Status,
                RefundReason = ((RefundOrderModel)refundOrderModel).RefundReason,
                RefundDate = ((RefundOrderModel)refundOrderModel).RefundDate,
                RefundOrderProductIds = ((RefundOrderModel)refundOrderModel).RefundOrderProductIds,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object refundOrderModel)
    {
        ((RefundOrderModel)refundOrderModel).Id = _refundOrderModelBeforeEdit.Id;
        ((RefundOrderModel)refundOrderModel).Status = _refundOrderModelBeforeEdit.Status;
        ((RefundOrderModel)refundOrderModel).RefundReason = _refundOrderModelBeforeEdit.RefundReason;
        ((RefundOrderModel)refundOrderModel).RefundDate = _refundOrderModelBeforeEdit.RefundDate;
        ((RefundOrderModel)refundOrderModel).RefundOrderProductIds = _refundOrderModelBeforeEdit.RefundOrderProductIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object refundOrderModel)
    {
        var updateRefundOrderDTO = new UpdateRefundOrderRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((RefundOrderModel)refundOrderModel).Id,
                Status = ((RefundOrderModel)refundOrderModel).Status,
                RefundReason = ((RefundOrderModel)refundOrderModel).RefundReason,
                RefundDate = ((RefundOrderModel)refundOrderModel).RefundDate.Value,
                RefundOrderProductIds = ((RefundOrderModel)refundOrderModel).RefundOrderProductIds,
            };
        var updateRefundOrderCommand = new UpdateRefundOrderCommand(updateRefundOrderDTO);
        var response = await Mediator.Send(updateRefundOrderCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateRefundOrderDialogAsync()
    {
        var parameters = new DialogParameters<CreateRefundOrderDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateRefundOrderDialog>("Create RefundOrder", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var refundOrderModelCreated = (RefundOrderModel)dialogResult.Data;
            if (refundOrderModelCreated == null)
            {
                throw new Exception("RefundOrder created is not recognized");

            }
            RefundOrderIds.Add(refundOrderModelCreated.Id);
            RefundOrderModels.Add(refundOrderModelCreated);
            StateHasChanged();
            SnackBar.Add($"Refund on {refundOrderModelCreated.RefundDate} created");
        }
    }

    public async Task<bool> FetchData()
    {
        RefundOrderModels.Clear();
        foreach (var refundOrderId in RefundOrderIds)
        {
            var getRefundOrderByIdQuery = new GetRefundOrderByIdQuery(refundOrderId);
            var refundOrderDTO = await Mediator.Send(getRefundOrderByIdQuery);

            var refundOrderModel = new RefundOrderModel()
                {
                    Id = refundOrderDTO.Id,
                    Status = refundOrderDTO.Status,
                    RefundReason = refundOrderDTO.RefundReason,
                    RefundDate = refundOrderDTO.RefundDate,
                    RefundOrderProductIds = refundOrderDTO.RefundOrderProductIds,
                };

            RefundOrderModels.Add(refundOrderModel);
        }
        return true;
    }

    private async Task OpenRefundOrderProductDialogAsync(List<Guid> refundOrderProductIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenRefundOrderProductDialogAsync(refundOrderProductIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}

