<MudDialog>
    <TitleContent>
        Create Refund Order
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@_isFormValid">

            <MudDatePicker Label="Refund Order Date"
                           Editable="true"
                           @bind-Date="_refundOrderModel.RefundDate"
                           Placeholder="Refund Order Date" />

            <MudSelect @bind-Value="_refundOrderModel.Status"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Status")
                       MultiSelection="false"
                       HelperText=@("Please select a status")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState">@orderState</MudSelectItem>
                }
            </MudSelect>

            <MudTextField @bind-value="_refundOrderModel.RefundReason"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Refund Reason"
                          Required="true" RequiredError="Reason is required!"
                          Margin="Margin.Dense" />

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;

    private RefundOrderModel _refundOrderModel { get; set; } = new();
    private List<string> _orderStates { get; set; }

    [Parameter]
    public required CurrentUserModel CurrentStaff { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();
    }

    private async Task Submit()
    {
        var createRefundOrderDTO = new CreateRefundOrderRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Status = _refundOrderModel.Status,
                RefundReason = _refundOrderModel.RefundReason,
                RefundDate = _refundOrderModel.RefundDate.Value,
                RefundOrderProductIds = _refundOrderModel.RefundOrderProductIds,
            };
        var createRefundOrderCommand = new CreateRefundOrderCommand(createRefundOrderDTO);
        var createdRefundOrderResponseDTO = await Mediator.Send(createRefundOrderCommand);

        var createdRefundOrderModel = new RefundOrderModel()
            {
                Id = createdRefundOrderResponseDTO.Id,
                Status = _refundOrderModel.Status,
                RefundReason = _refundOrderModel.RefundReason,
                RefundDate = _refundOrderModel.RefundDate,
                RefundOrderProductIds = _refundOrderModel.RefundOrderProductIds,
            };
        MudDialog.Close(DialogResult.Ok(createdRefundOrderModel));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}