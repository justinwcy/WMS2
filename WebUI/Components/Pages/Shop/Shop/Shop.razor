@inject IDialogService Dialog
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="9">
        @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteShops"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="false"
                       Disabled="_disableDelete">
                Delete Shop
            </MudButton>
        }
    </MudItem>
    <MudItem xs="3">
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateShopDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="false">
                Create Shop
            </MudButton>
        }
    </MudItem>
</MudGrid>

<MudTable Hover="true"  FixedHeader="true"
Filter="new Func<ShopModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@ShopModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedShops"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Shops</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<ShopModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ShopModel, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ShopModel, object>(x=>x.Platform)">Platform</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ShopModel, object>(x=>x.Website)">Website</MudTableSortLabel></MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Website">@context.Website</MudTd>
        <MudTd DataLabel="Platform">@context.Platform</MudTd>
        <MudTd DataLabel="Products">
            <MudButton OnClick="@(() => OpenProductDialogAsync(@context.ProductIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.ProductIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>

        <MudTd DataLabel="Address">
            <MudTextField @bind-Value="context.Address" Required />
        </MudTd>

        <MudTd DataLabel="Website">
            <MudTextField @bind-Value="context.Website" Required />
        </MudTd>

        <MudTd DataLabel="Platform">
            <MudTextField @bind-Value="context.Platform" Required />
        </MudTd>

        <MudTd DataLabel="Products"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Shop";

    [Parameter]
    public bool ShowCreateButton { get; set; }
    
    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }
    
    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> ShopIds { get; set; } = new List<Guid>();
    public List<ShopModel> ShopModels { get; set; } = new List<ShopModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<ShopModel> _selectedShops = new HashSet<ShopModel>();
    private bool _disableDelete => !_selectedShops.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<ShopModel> _tableRef;
    private ShopModel _shopModelBeforeEdit { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !ShopIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(ShopModel shopModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (shopModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (shopModel.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (shopModel.Platform.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (shopModel.Website.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteShops()
    {
        var success = true;
        foreach (var shopModel in _selectedShops)
        {
            var deleteShopCommand = new DeleteShopCommand(shopModel.Id);
            var result = await Mediator.Send(deleteShopCommand);

            if (result.Success)
            {
                ShopIds.Remove(shopModel.Id);
                ShopModels.Remove(shopModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Shops Deleted" : "Failed to delete shops");
    }

    private void BackupItem(object shopModel)
    {

        _shopModelBeforeEdit = new ShopModel()
        {
            Id = ((ShopModel)shopModel).Id,
            Name = ((ShopModel)shopModel).Name,
            Address = ((ShopModel)shopModel).Address,
            Platform = ((ShopModel)shopModel).Platform,
            Website = ((ShopModel)shopModel).Website,
            ProductIds = ((ShopModel)shopModel).ProductIds,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object shopModel)
    {
        ((ShopModel)shopModel).Id = _shopModelBeforeEdit.Id;
        ((ShopModel)shopModel).Name = _shopModelBeforeEdit.Name;
        ((ShopModel)shopModel).Address = _shopModelBeforeEdit.Address;
        ((ShopModel)shopModel).Platform = _shopModelBeforeEdit.Platform;
        ((ShopModel)shopModel).Website = _shopModelBeforeEdit.Website;
        ((ShopModel)shopModel).ProductIds = _shopModelBeforeEdit.ProductIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object shopModel)
    {
        var shopModelConverted = (ShopModel)shopModel;
        var updateShopDTO = new UpdateShopRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = shopModelConverted.Id,
            Name = shopModelConverted.Name,
            Address = shopModelConverted.Address,
            Platform = shopModelConverted.Platform,
            Website = shopModelConverted.Website,
            ProductIds = shopModelConverted.ProductIds,
        };
        var updateShopCommand = new UpdateShopCommand(updateShopDTO);
        var response = await Mediator.Send(updateShopCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateShopDialogAsync()
    {
        var parameters = new DialogParameters<CreateShopDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateShopDialog>("Create Shop", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var shopModelCreated = (ShopModel)dialogResult.Data;
            if (shopModelCreated == null)
            {
                throw new Exception("Shop created is not recognized");
            }
            ShopIds.Add(shopModelCreated.Id);
            ShopModels.Add(shopModelCreated);
            StateHasChanged();
            SnackBar.Add($"{shopModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        ShopModels.Clear();
        foreach (var shopId in ShopIds)
        {
            var getShopByIdQuery = new GetShopByIdQuery(shopId);
            var shopDTO = await Mediator.Send(getShopByIdQuery);

            var shopModel = new ShopModel()
                {
                    ProductIds = shopDTO.ProductIds,
                    Platform = shopDTO.Platform,
                    Address = shopDTO.Address,
                    Id = shopDTO.Id,
                    Name = shopDTO.Name,
                    Website = shopDTO.Website
                };

            ShopModels.Add(shopModel);
        }
        return true;
    }

    private async Task OpenProductDialogAsync(List<Guid> productIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenProductDialogAsync(productIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }
}
