@page "/warehouses"
@inject IDialogService Dialog
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteWarehouses"
                   Color="Color.Error"
                   Variant="Variant.Filled"
                   Size="Size.Large"
                   FullWidth="false"
                   Disabled="_disableDelete">
            Delete Warehouse
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateWarehouseDialogAsync)"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Size="Size.Large"
                   FullWidth="false">
            Create Warehouse
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
          Filter="new Func<WarehouseModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@_warehouses"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedWarehouses"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Warehouses</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 200px" />
        <col style="min-width: 500px" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<WarehouseModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh>Address</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>
        <MudTd DataLabel="Address">
            <MudTextField @bind-Value="context.Address" Required />
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {
    private List<WarehouseModel> _warehouses { get; set; } = new List<WarehouseModel>();
    private HashSet<WarehouseModel> _selectedWarehouses = new HashSet<WarehouseModel>();
    private bool _disableDelete => !_selectedWarehouses.Any();
    private GetStaffResponseDTO _currentStaff { get; set; }

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<WarehouseModel> _tableRef;
    private WarehouseModel _warehouseModelBeforeEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await base.OnInitializedAsync();
        _currentStaff = await UserUtilities.GetCurrentUser(Mediator, AuthenticationStateProvider);
        var getAllWarehouseQuery = new GetAllWarehouseIdsByCompanyIdQuery(_currentStaff.CompanyId);
        var allWarehouseResponseDTO = await Mediator.Send(getAllWarehouseQuery);

        foreach (var warehouseResponseDTO in allWarehouseResponseDTO)
        {
            var warehouseModel = new WarehouseModel()
            {
                Id = warehouseResponseDTO.Id,
                Name = warehouseResponseDTO.Name,
                Address = warehouseResponseDTO.Address,
                CompanyId = _currentStaff.CompanyId,
            };

            _warehouses.Add(warehouseModel);
        }

        _loading = false;
    }

    private bool FilterFunc(WarehouseModel warehouseModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (warehouseModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private async Task DeleteWarehouses()
    {
        var success = true;
        foreach (var warehouseModel in _selectedWarehouses)
        {
            var deleteWarehouseCommand = new DeleteWarehouseCommand(warehouseModel.Id);
            var result = await Mediator.Send(deleteWarehouseCommand);

            if (result.Success)
            {
                _warehouses.Remove(warehouseModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Warehouses Deleted" : "Failed to delete warehouses");
    }

    private void BackupItem(object warehouseModel)
    {

        _warehouseModelBeforeEdit = new WarehouseModel()
        {
            Id = ((WarehouseModel)warehouseModel).Id,
            Name = ((WarehouseModel)warehouseModel).Name,
            Address = ((WarehouseModel)warehouseModel).Address,
            CompanyId = ((WarehouseModel)warehouseModel).CompanyId,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object warehouseModel)
    {
        ((WarehouseModel)warehouseModel).Id = _warehouseModelBeforeEdit.Id;
        ((WarehouseModel)warehouseModel).Name = _warehouseModelBeforeEdit.Name;
        ((WarehouseModel)warehouseModel).Address = _warehouseModelBeforeEdit.Address;
        ((WarehouseModel)warehouseModel).CompanyId = _warehouseModelBeforeEdit.CompanyId;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object warehouseModel)
    {
        var warehouseModelConverted = (WarehouseModel)warehouseModel;
        var updateWarehouseDTO = new UpdateWarehouseRequestDTO()
        {
            CreatedBy = _currentStaff.Id,
            Id = warehouseModelConverted.Id,
            Name = warehouseModelConverted.Name,
            Address = warehouseModelConverted.Address,
            CompanyId = warehouseModelConverted.CompanyId,
        };
        var updateWarehouseCommand = new UpdateWarehouseCommand(updateWarehouseDTO);
        var response = await Mediator.Send(updateWarehouseCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateWarehouseDialogAsync()
    {
        var maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await Dialog.ShowAsync<CreateWarehouseDialog>("Create Warehouse", maxWidth);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled)
        {
            var warehouseModelCreated = (WarehouseModel)dialogResult.Data;
            _warehouses.Add(warehouseModelCreated);
            StateHasChanged();
            SnackBar.Add($"{warehouseModelCreated.Name} created");
        }
    }
}
