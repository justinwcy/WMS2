@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using Application.Service.Queries
@using WebUI.Utilities
<MudDialog>
    <TitleContent>
        Create Warehouse
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_isFormValid">
            <MudTextField @bind-value="_warehouseModel.Name"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Warehouse Name"
                          Required="true" RequiredError="Name is required!"
                          Margin="Margin.Dense"/>
            
            <MudTextField @bind-value="_warehouseModel.Address"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Warehouse Address"
                          Required="true" RequiredError="Address is required!"
                          Margin="Margin.Dense" />
        </MudForm>
        </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;
    private MudForm _form;

    private WarehouseModel _warehouseModel { get; set; } = new WarehouseModel();
    private GetStaffResponseDTO _getStaffResponseDTO { get; set; }

    private async Task Submit()
    {
        var createWarehouseDTO = new CreateWarehouseRequestDTO()
        {
            CreatedBy = _getStaffResponseDTO.CreatedBy,
            Name = _warehouseModel.Name,
            Address = _warehouseModel.Address,
            CompanyId = _warehouseModel.CompanyId,
        };
        var createWarehouseCommand = new CreateWarehouseCommand(createWarehouseDTO);
        var createdWarehouseResponseDTO = await Mediator.Send(createWarehouseCommand);

        var createdWarehouseModel = new WarehouseModel()
        {
            Id = createdWarehouseResponseDTO.Id,
            Name = _warehouseModel.Name,
            Address = _warehouseModel.Address,
            CompanyId = _warehouseModel.CompanyId,
        };
        MudDialog.Close(DialogResult.Ok(createdWarehouseModel));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _getStaffResponseDTO = await UserUtilities.GetCurrentUser(Mediator, AuthenticationStateProvider);
        _warehouseModel.CompanyId = _getStaffResponseDTO.CompanyId;

    }
}