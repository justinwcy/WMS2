@page "/Register"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Application.DTO.Request
@using Application.DTO.Request.Identity
@using Application.Service.Commands
@using Application.Service.Queries
@using WebUI.Components.Models

<PageTitle>WMS - Register</PageTitle>
<h1>Register User</h1>

<MudItem xs="12" Class="mt-4 mb-4">
    @if (errors.Length != 0)
    {
        <MudPaper Class="pa-4">
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    }
</MudItem>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pl-4 pr-4" Elevation="3">
            <EditForm Model="@registerFormModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                
                @* Can use below too to make elements fit into a line *@
                @* <div class="d-flex align-center justify-space-between"></div> *@
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="registerFormModel.FirstName" T="string" Label="First Name" Required="true" RequiredError="First name is required!" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="string" Label="Last Name" Required="false"/>
                    </MudItem>
                </MudGrid>

                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!"/>
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="passwordField"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!"/>
                <MudTextField T="string"
                              Label="Repeat Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>

                <div class="d-flex">
                    <MudSelect @bind-Value="_roleSelected"
                               Variant="Variant.Text"
                               Label="Role"
                               Margin="Margin.Normal"
                               Dense="false"
                               Disabled=false
                               ReadOnly=false
                               Placeholder=@("User Role")
                               HelperText=@("Please select a role for the user")
                               HelperTextOnFocus=true
                               Clearable=false
                               Required="true"
                               RequiredError="Please select a role for the user">
                        @foreach (var staffRoles in _allStaffRoles)
                        {
                            <MudSelectItem Value="staffRoles">@staffRoles</MudSelectItem>
                        }
                    </MudSelect>
                </div>
                
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto mb-4">Register</MudButton>
                </MudCardActions>

            </EditForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    
</MudGrid>
@code {
    private bool success;
    private string[] errors = { };
    private MudTextField<string> passwordField;
    private MudForm form;
    private RegisterFormModel registerFormModel = new RegisterFormModel();


    private string _roleSelected = "";
    private List<string> _allStaffRoles = new();

    protected override async Task OnInitializedAsync()
    {
        var query = new GetAllStaffRolesQuery();
        var allStaffRoles = await mediator.Send(query);
        _allStaffRoles = allStaffRoles.ToList();
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (passwordField.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task OnValidSubmit()
    {
        var createStaffRequestDTO = new CreateStaffRequestDTO()
        {
            FirstName = registerFormModel.FirstName
        };
        var command = new CreateStaffCommand(createStaffRequestDTO);

        //var response = await mediator.Send(command);
    }

}
