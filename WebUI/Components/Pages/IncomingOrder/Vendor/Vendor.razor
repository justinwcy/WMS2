@inject IDialogService Dialog
@implements IPageComponent
@using System.ComponentModel.DataAnnotations
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteVendors"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="false"
                       Disabled="_disableDelete">
                Delete Vendor
            </MudButton>
        }
    </MudItem>
    <MudItem xs="3">
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateVendorDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="false">
                Create Vendor
            </MudButton>
        }
    </MudItem>
</MudGrid>

<MudTable Hover="true" FixedHeader="true"
Filter="new Func<VendorModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@VendorModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedVendors"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Vendors</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 150px" />
        <col style="min-width: 150px" />
        <col style="min-width: 200px" />
        <col style="min-width: 150px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<VendorModel, object>(x=>x.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VendorModel, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VendorModel, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VendorModel, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<VendorModel, object>(x=>x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
        <MudTh>Incoming Orders</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="Incoming Orders">
            <MudButton OnClick="@(() => OpenIncomingOrderDialogAsync(@context.IncomingOrderIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.IncomingOrderIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="First Name">
            <MudTextField @bind-Value="context.FirstName" Required />
        </MudTd>
        
        <MudTd DataLabel="Last Name">
            <MudTextField @bind-Value="context.LastName" Required />
        </MudTd>

        <MudTd DataLabel="Address">
            <MudTextField @bind-Value="context.Address" Required />
        </MudTd>

        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="context.Email" Required />
        </MudTd>

        <MudTd DataLabel="PhoneNumber">
            <MudTextField @bind-Value="context.PhoneNumber" 
                          Required 
                          Validation="@(new PhoneAttribute() { ErrorMessage = "The phone number is invalid" })" />
        </MudTd>

        <MudTd DataLabel="Incoming Orders"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Vendor";

    [Parameter]
    public bool ShowCreateButton { get; set; }
    
    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }
    
    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> VendorIds { get; set; } = new List<Guid>();
    public List<VendorModel> VendorModels { get; set; } = new List<VendorModel>();

    [Parameter]
    public GetStaffResponseDTO? CurrentStaff { get; set; }

    private HashSet<VendorModel> _selectedVendors = new HashSet<VendorModel>();
    private bool _disableDelete => !_selectedVendors.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<VendorModel> _tableRef;
    private VendorModel _vendorModelBeforeEdit { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !VendorIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(VendorModel vendorModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (vendorModel.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (vendorModel.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (vendorModel.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (vendorModel.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (vendorModel.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task DeleteVendors()
    {
        var success = true;
        foreach (var vendorModel in _selectedVendors)
        {
            var deleteVendorCommand = new DeleteVendorCommand(vendorModel.Id);
            var result = await Mediator.Send(deleteVendorCommand);

            if (result.Success)
            { 
                VendorIds.Remove(vendorModel.Id); 
                VendorModels.Remove(vendorModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Vendors Deleted" : "Failed to delete vendors");
    }

    private void BackupItem(object vendorModel)
    {

        _vendorModelBeforeEdit = new VendorModel()
        {
            Id = ((VendorModel)vendorModel).Id,
            Address = ((VendorModel)vendorModel).Address,
            FirstName = ((VendorModel)vendorModel).FirstName,
            LastName = ((VendorModel)vendorModel).LastName,
            Email = ((VendorModel)vendorModel).Email,
            IncomingOrderIds = ((VendorModel)vendorModel).IncomingOrderIds,
            PhoneNumber = ((VendorModel)vendorModel).PhoneNumber,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object vendorModel)
    {
        ((VendorModel)vendorModel).Id = _vendorModelBeforeEdit.Id;
        ((VendorModel)vendorModel).FirstName = _vendorModelBeforeEdit.FirstName;
        ((VendorModel)vendorModel).LastName = _vendorModelBeforeEdit.LastName;
        ((VendorModel)vendorModel).Address = _vendorModelBeforeEdit.Address;
        ((VendorModel)vendorModel).Email = _vendorModelBeforeEdit.Email;
        ((VendorModel)vendorModel).IncomingOrderIds = _vendorModelBeforeEdit.IncomingOrderIds;
        ((VendorModel)vendorModel).PhoneNumber = _vendorModelBeforeEdit.PhoneNumber;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object vendorModel)
    {
        var updateVendorDTO = new UpdateVendorRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = ((VendorModel)vendorModel).Id,
            Address = ((VendorModel)vendorModel).Address,
            FirstName = ((VendorModel)vendorModel).FirstName,
            LastName = ((VendorModel)vendorModel).LastName,
            Email = ((VendorModel)vendorModel).Email,
            IncomingOrderIds = ((VendorModel)vendorModel).IncomingOrderIds,
            PhoneNumber = ((VendorModel)vendorModel).PhoneNumber,
        };
        var updateVendorCommand = new UpdateVendorCommand(updateVendorDTO);
        var response = await Mediator.Send(updateVendorCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateVendorDialogAsync()
    {
        var parameters = new DialogParameters<CreateVendorDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateVendorDialog>("Create Vendor", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var vendorModelCreated = (VendorModel)dialogResult.Data;
            if (vendorModelCreated == null)
            {
                throw new Exception("Vendor created is not recognized");

            }
            VendorIds.Add(vendorModelCreated.Id);
            VendorModels.Add(vendorModelCreated);
            StateHasChanged();
            SnackBar.Add($"{vendorModelCreated.FirstName} {vendorModelCreated.LastName} created");
        }
    }

    public async Task<bool> FetchData()
    {
        VendorModels.Clear();
        foreach (var vendorId in VendorIds)
        {
            var getVendorByIdQuery = new GetVendorByIdQuery(vendorId);
            var vendorDTO = await Mediator.Send(getVendorByIdQuery);

            var vendorModel = new VendorModel()
                {
                    Id = vendorDTO.Id,
                    Address = vendorDTO.Address,
                    FirstName = vendorDTO.FirstName,
                    LastName = vendorDTO.LastName,
                    Email = vendorDTO.Email,
                    IncomingOrderIds = vendorDTO.IncomingOrderIds,
                    PhoneNumber = vendorDTO.PhoneNumber,
                };

            VendorModels.Add(vendorModel);
        }
        return true;
    }

    private async Task OpenIncomingOrderDialogAsync(List<Guid> incomingOrderIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenIncomingOrderDialogAsync(incomingOrderIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }
}

    