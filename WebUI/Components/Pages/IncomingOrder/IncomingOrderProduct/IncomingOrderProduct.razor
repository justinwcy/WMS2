@inject IDialogService Dialog
@using System.Reflection
@using Application.Constants
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteIncomingOrderProducts"
        Color="Color.Error"
        Variant="Variant.Filled"
        Size="Size.Large"
        FullWidth="false"
                   Disabled="_disableDelete">
            <IncomingOrderProduct />
            Delete IncomingOrderProduct
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateIncomingOrderProductDialogAsync)"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        FullWidth="false">
            Create Incoming Order Product
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
Filter="new Func<IncomingOrderProductModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@IncomingOrderProductModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedIncomingOrderProducts"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Incoming Order Products @_incomingOrder.PONumber</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 150px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Product</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderProductModel, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderProductModel, object>(x => x.Quantity)">Quantity</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Product">@(_allProductModels.FirstOrDefault(productModel => productModel.Id == context.ProductId)?.Name)</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Products">
            <MudSelect @bind-Value="context.ProductId"
                       T="Guid"
                       ToStringFunc="@(id=> _allProductModels.FirstOrDefault(productModel=>productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product")
                       MultiSelection="false"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem Value="@productModel"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="context.Status"
            Variant="@_defaultVariant"
            Label="Status"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Status")
            MultiSelection="false"
            HelperText=@("Please select a status")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="true"
            RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState"/>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Quantity">
            <MudTextField @bind-Value="context.Quantity" Required />
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {
    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    [Parameter]
    public List<Guid> IncomingOrderProductIds { get; set; } = new List<Guid>();
    public List<IncomingOrderProductModel> IncomingOrderProductModels { get; set; } = new List<IncomingOrderProductModel>();

    [Parameter]
    public GetStaffResponseDTO? CurrentStaff { get; set; }

    private Guid _incomingOrderId { get; set; }
    private GetIncomingOrderResponseDTO _incomingOrder { get; set; }

    private HashSet<IncomingOrderProductModel> _selectedIncomingOrderProducts = new HashSet<IncomingOrderProductModel>();
    private bool _disableDelete => !_selectedIncomingOrderProducts.Any();
    private List<ProductModel> _allProductModels { get; set; } = [];
    private List<string> _orderStates { get; set; }

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<IncomingOrderProductModel> _tableRef;
    private IncomingOrderProductModel _incomingOrderProductModelBeforeEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !IncomingOrderProductIds.Any())
        {
            return;
        }


        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !IncomingOrderProductIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();

        var getAllProductIdsByCompanyIdQuery = new GetAllProductIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var productIds = await Mediator.Send(getAllProductIdsByCompanyIdQuery);

        foreach (var productId in productIds)
        {
            var getProductByIdQuery = new GetProductByIdQuery(productId);
            var productDTO = await Mediator.Send(getProductByIdQuery);

            var productModel = new ProductModel()
            {
                Id = productDTO.Id,
                Name = productDTO.Name,
                Description = productDTO.Description,
                Height = productDTO.Height,
                Length = productDTO.Length,
                Price = productDTO.Price,
                ProductGroupIds = productDTO.ProductGroupIds,
                ShopIds = productDTO.ShopIds,
                Sku = productDTO.Sku,
                Tag = productDTO.Tag,
                Weight = productDTO.Weight,
                Width = productDTO.Width,
            };
            _allProductModels.Add(productModel);
        }

        foreach (var incomingOrderProductId in IncomingOrderProductIds)
        {
            var getIncomingOrderProductByIdQuery = new GetIncomingOrderProductByIdQuery(incomingOrderProductId);
            var incomingOrderProductDTO = await Mediator.Send(getIncomingOrderProductByIdQuery);

            var incomingOrderProductModel = new IncomingOrderProductModel()
            {
                Id = incomingOrderProductDTO.Id,
                ProductId = incomingOrderProductDTO.ProductId,
                IncomingOrderId = incomingOrderProductDTO.IncomingOrderId,
                Quantity = incomingOrderProductDTO.Quantity,
                Status = incomingOrderProductDTO.Status,
            };

            IncomingOrderProductModels.Add(incomingOrderProductModel);
        }

        var uniqueIncomingOrders = IncomingOrderProductModels
            .GroupBy(incomingOrderProductModel => incomingOrderProductModel.IncomingOrderId)
            .Select(x => x.Key)
            .ToList();

        if (uniqueIncomingOrders.Count != 1)
        {
            throw new Exception("Incoming orders passed is not unique");
        }
        else
        {
            _incomingOrderId = uniqueIncomingOrders.First();
            var getIncomingOrderByIdQuery = new GetIncomingOrderByIdQuery(_incomingOrderId);
            var incomingOrderDTO = await Mediator.Send(getIncomingOrderByIdQuery);

            _incomingOrder = incomingOrderDTO;
        }
        _loading = false;
    }

    private bool FilterFunc(IncomingOrderProductModel incomingOrderProductModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (incomingOrderProductModel.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteIncomingOrderProducts()
    {
        var success = true;
        foreach (var incomingOrderProductModel in _selectedIncomingOrderProducts)
        {
            var deleteIncomingOrderProductCommand = new DeleteIncomingOrderProductCommand(incomingOrderProductModel.Id);
            var result = await Mediator.Send(deleteIncomingOrderProductCommand);

            if (result.Success)
            {
                IncomingOrderProductModels.Remove(incomingOrderProductModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Incoming Order Products Deleted" : "Failed to delete Incoming Order Products");
    }

    private void BackupItem(object incomingOrderProductModel)
    {

        _incomingOrderProductModelBeforeEdit = new IncomingOrderProductModel()
        {
            Id = ((IncomingOrderProductModel)incomingOrderProductModel).Id,
            ProductId = ((IncomingOrderProductModel)incomingOrderProductModel).ProductId,
            IncomingOrderId = ((IncomingOrderProductModel)incomingOrderProductModel).IncomingOrderId,
            Quantity = ((IncomingOrderProductModel)incomingOrderProductModel).Quantity,
            Status = ((IncomingOrderProductModel)incomingOrderProductModel).Status,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object incomingOrderProductModel)
    {
        ((IncomingOrderProductModel)incomingOrderProductModel).Id = _incomingOrderProductModelBeforeEdit.Id;
        ((IncomingOrderProductModel)incomingOrderProductModel).ProductId = _incomingOrderProductModelBeforeEdit.ProductId;
        ((IncomingOrderProductModel)incomingOrderProductModel).IncomingOrderId = _incomingOrderProductModelBeforeEdit.IncomingOrderId;
        ((IncomingOrderProductModel)incomingOrderProductModel).Quantity = _incomingOrderProductModelBeforeEdit.Quantity;
        ((IncomingOrderProductModel)incomingOrderProductModel).Status = _incomingOrderProductModelBeforeEdit.Status;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object incomingOrderProductModel)
    {
        var incomingOrderProductModelConverted = (IncomingOrderProductModel)incomingOrderProductModel;
        var updateIncomingOrderProductDTO = new UpdateIncomingOrderProductRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = incomingOrderProductModelConverted.Id,
            ProductId = incomingOrderProductModelConverted.ProductId,
            IncomingOrderId = incomingOrderProductModelConverted.IncomingOrderId,
            Quantity = incomingOrderProductModelConverted.Quantity,
            Status = incomingOrderProductModelConverted.Status,
        };
        var updateIncomingOrderProductCommand = new UpdateIncomingOrderProductCommand(updateIncomingOrderProductDTO);
        var response = await Mediator.Send(updateIncomingOrderProductCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateIncomingOrderProductDialogAsync()
    {
        var parameters = new DialogParameters<CreateIncomingOrderProductDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
            { x => x.IncomingOrderId, _incomingOrderId},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateIncomingOrderProductDialog>("Create Incoming Order Product", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var incomingOrderProductModelCreated = (IncomingOrderProductModel)dialogResult.Data;
            if (incomingOrderProductModelCreated == null)
            {
                throw new Exception("Incoming Order Product created is not recognized");

            }
            IncomingOrderProductIds.Add(incomingOrderProductModelCreated.Id);
            IncomingOrderProductModels.Add(incomingOrderProductModelCreated);
            StateHasChanged();
            SnackBar.Add("Product created in order");
        }
    }
}

    