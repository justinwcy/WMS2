@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent

@if (_isReadPolicyExpired)
{
    <ForbiddenError/>
    return;
}

<MudGrid Class="mb-3">
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.IncomingOrderProduct)>
            @if (ShowDeleteButton)
            {
                <MudButton OnClick="@DeleteIncomingOrderProducts"
                           Color="Color.Error"
                           Variant="Variant.Filled"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="_disableDelete">
                    Delete Incoming Order Details
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.IncomingOrderProduct)>
            @if (ShowCreateButton)
            {
                <MudButton OnClick="@(OpenCreateIncomingOrderProductDialogAsync)"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true">
                    Create Incoming Order Details
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly"
          Hover="true" FixedHeader="true"
          Filter="new Func<IncomingOrderProductModel, bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@IncomingOrderProductModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedIncomingOrderProducts"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Incoming Order Details @_incomingOrder.PONumber</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col/>
        <col/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Product</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderProductModel, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderProductModel, object>(x => x.Quantity)">Quantity</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Product">@(_allProductModels.FirstOrDefault(productModel => productModel.Id == context.ProductId)?.Name)</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Products">
            <MudSelect @bind-Value="context.ProductId"
                       T="Guid?"
                       ToStringFunc="@(id => _allProductModels.FirstOrDefault(productModel => productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product")
                       MultiSelection="false"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="context.Status"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Status")
                       MultiSelection="false"
                       HelperText=@("Please select a status")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState"/>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Quantity">
            <MudTextField @bind-Value="context.Quantity" Required/>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right"/>
    </PagerContent>
</MudTable>

@code {

    public string Name => "IncomingOrderProduct";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    [Parameter]
    public List<Guid> IncomingOrderProductIds { get; set; } = new List<Guid>();
    public List<IncomingOrderProductModel> IncomingOrderProductModels { get; set; } = new List<IncomingOrderProductModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    [Parameter]
    public Guid ParentIncomingOrderId { get; set; }
    private GetIncomingOrderResponseDTO _incomingOrder { get; set; } = new();

    private HashSet<IncomingOrderProductModel> _selectedIncomingOrderProducts = new HashSet<IncomingOrderProductModel>();
    private bool _disableDelete => !_selectedIncomingOrderProducts.Any();
    private List<ProductModel> _allProductModels { get; set; } = [];
    private List<string> _orderStates { get; set; }

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<IncomingOrderProductModel> _tableRef;
    private IncomingOrderProductModel _incomingOrderProductModelBeforeEdit { get; set; }
    
    private bool _isReadOnly = false;
    private bool _isReadPolicyExpired = false;
    
    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();

        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        var getIncomingOrderByIdQuery = new GetIncomingOrderByIdQuery(ParentIncomingOrderId);
        var incomingOrderDTO = await Mediator.Send(getIncomingOrderByIdQuery);
        _incomingOrder = incomingOrderDTO;

        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        // check if user has read authorization
        var readPolicyString = DataAccessUtilities.GetPolicyString(AccessName.Read, DataTableName.IncomingOrderProduct);
        _isReadPolicyExpired = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, readPolicyString);
        if (_isReadPolicyExpired)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(IncomingOrderProductModel incomingOrderProductModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (incomingOrderProductModel.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteIncomingOrderProducts()
    {
        var success = true;
        foreach (var incomingOrderProductModel in _selectedIncomingOrderProducts)
        {
            var deleteIncomingOrderProductCommand = new DeleteIncomingOrderProductCommand(incomingOrderProductModel.Id);
            var result = await Mediator.Send(deleteIncomingOrderProductCommand);

            if (result.Success)
            {
                IncomingOrderProductIds.Remove(incomingOrderProductModel.Id);
                IncomingOrderProductModels.Remove(incomingOrderProductModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Incoming Order Products Deleted" : "Failed to delete Incoming Order Products");
    }

    private void BackupItem(object incomingOrderProductModel)
    {

        _incomingOrderProductModelBeforeEdit = new IncomingOrderProductModel()
            {
                Id = ((IncomingOrderProductModel)incomingOrderProductModel).Id,
                ProductId = ((IncomingOrderProductModel)incomingOrderProductModel).ProductId,
                IncomingOrderId = ((IncomingOrderProductModel)incomingOrderProductModel).IncomingOrderId,
                Quantity = ((IncomingOrderProductModel)incomingOrderProductModel).Quantity,
                Status = ((IncomingOrderProductModel)incomingOrderProductModel).Status,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object incomingOrderProductModel)
    {
        ((IncomingOrderProductModel)incomingOrderProductModel).Id = _incomingOrderProductModelBeforeEdit.Id;
        ((IncomingOrderProductModel)incomingOrderProductModel).ProductId = _incomingOrderProductModelBeforeEdit.ProductId;
        ((IncomingOrderProductModel)incomingOrderProductModel).IncomingOrderId = _incomingOrderProductModelBeforeEdit.IncomingOrderId;
        ((IncomingOrderProductModel)incomingOrderProductModel).Quantity = _incomingOrderProductModelBeforeEdit.Quantity;
        ((IncomingOrderProductModel)incomingOrderProductModel).Status = _incomingOrderProductModelBeforeEdit.Status;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object incomingOrderProductModel)
    {
        var incomingOrderProductModelConverted = (IncomingOrderProductModel)incomingOrderProductModel;
        var updateIncomingOrderProductDTO = new UpdateIncomingOrderProductRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = incomingOrderProductModelConverted.Id,
                ProductId = incomingOrderProductModelConverted.ProductId,
                IncomingOrderId = incomingOrderProductModelConverted.IncomingOrderId,
                Quantity = incomingOrderProductModelConverted.Quantity,
                Status = incomingOrderProductModelConverted.Status,
            };
        var updateIncomingOrderProductCommand = new UpdateIncomingOrderProductCommand(updateIncomingOrderProductDTO);
        var response = await Mediator.Send(updateIncomingOrderProductCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateIncomingOrderProductDialogAsync()
    {
        var parameters = new DialogParameters<CreateIncomingOrderProductDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
            { x => x.IncomingOrderId, ParentIncomingOrderId},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateIncomingOrderProductDialog>("Create Incoming Order Product", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var incomingOrderProductModelCreated = (IncomingOrderProductModel)dialogResult.Data;
            if (incomingOrderProductModelCreated == null)
            {
                throw new Exception("Incoming Order Product created is not recognized");

            }
            IncomingOrderProductIds.Add(incomingOrderProductModelCreated.Id);
            IncomingOrderProductModels.Add(incomingOrderProductModelCreated);
            StateHasChanged();
            SnackBar.Add("Product created inside incoming order");
        }
    }

    public async Task<bool> FetchData()
    {
        var databaseHelper = new DatabaseHelper(Mediator, CurrentStaff.CompanyId);
        _allProductModels = await databaseHelper.GetAllProducts();
        IncomingOrderProductModels = await databaseHelper.GetIncomingOrderProducts(IncomingOrderProductIds);

        return true;
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}