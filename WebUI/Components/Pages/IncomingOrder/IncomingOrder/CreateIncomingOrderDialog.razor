<MudDialog>
    <TitleContent>
        Create IncomingOrder
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@_isFormValid">
            <MudTextField @bind-value="_incomingOrderModel.PONumber"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="PO Number"
                          Required="true" RequiredError="PO Number is required!"
                          Margin="Margin.Dense" />

            <MudDatePicker Label="Incoming Order Date"
                           Editable="true"
                           @bind-Date="_incomingOrderModel.IncomingDate"
                           Placeholder="Incoming Order Date" />

            <MudDatePicker Label="Receiving Date"
                           Editable="true"
                           @bind-Date="_incomingOrderModel.ReceivingDate"
                           Placeholder="Receiving Date" />

            <MudSelect @bind-Value="_incomingOrderModel.Status"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Status")
                       MultiSelection="false"
                       HelperText=@("Please select a status")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState">@orderState</MudSelectItem>
                }
            </MudSelect>

            <MudSelect @bind-Value="_incomingOrderModel.VendorId"
                       T="Guid?"
                       ToStringFunc="@(id=> $"{_allVendorModels.FirstOrDefault(companyModel=>companyModel.Id == id)?.FirstName} {_allVendorModels.FirstOrDefault(companyModel=>companyModel.Id == id)?.LastName}")"
                       Variant="@_defaultVariant"
                       Label="Vendor"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Vendor")
                       MultiSelection="false"
                       HelperText=@("Please select a vendor")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a vendor">
                @foreach (var vendorModel in _allVendorModels)
                {
                    <MudSelectItem T="Guid?" Value="vendorModel.Id"></MudSelectItem>
                }
            </MudSelect>

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;

    private IncomingOrderModel _incomingOrderModel { get; set; } = new();

    private List<string> _orderStates { get; set; }

    private List<VendorModel> _allVendorModels { get; set; } = [];

    [Parameter]
    public required CurrentUserModel CurrentStaff { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        var getAllVendorIdsByCompanyIdQuery = new GetAllVendorIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var vendorIds = await Mediator.Send(getAllVendorIdsByCompanyIdQuery);

        foreach (var vendorId in vendorIds)
        {
            var getVendorByIdQuery = new GetVendorByIdQuery(vendorId);
            var vendorDTO = await Mediator.Send(getVendorByIdQuery);

            var vendorModel = new VendorModel()
                {
                    Id = vendorDTO.Id,
                    Address = vendorDTO.Address,
                    Email = vendorDTO.Email,
                    FirstName = vendorDTO.FirstName,
                    LastName = vendorDTO.LastName,
                    PhoneNumber = vendorDTO.PhoneNumber,
                    IncomingOrderIds = vendorDTO.IncomingOrderIds,
                };
            _allVendorModels.Add(vendorModel);
        }
    }

    private async Task Submit()
    {
        var createIncomingOrderDTO = new CreateIncomingOrderRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                VendorId = _incomingOrderModel.VendorId,
                IncomingDate = _incomingOrderModel.IncomingDate.Value,
                PONumber = _incomingOrderModel.PONumber,
                ReceivingDate = _incomingOrderModel.ReceivingDate.Value,
                IncomingOrderProductIds = _incomingOrderModel.IncomingOrderProductIds,
                Status = _incomingOrderModel.Status
            };
        var createIncomingOrderCommand = new CreateIncomingOrderCommand(createIncomingOrderDTO);
        var createdIncomingOrderResponseDTO = await Mediator.Send(createIncomingOrderCommand);

        var createdIncomingOrderModel = new IncomingOrderModel()
            {
                Id = createdIncomingOrderResponseDTO.Id,
                VendorId = _incomingOrderModel.VendorId,
                IncomingDate = _incomingOrderModel.IncomingDate.Value,
                PONumber = _incomingOrderModel.PONumber,
                ReceivingDate = _incomingOrderModel.ReceivingDate.Value,
                IncomingOrderProductIds = _incomingOrderModel.IncomingOrderProductIds,
                Status = _incomingOrderModel.Status
            };
        MudDialog.Close(DialogResult.Ok(createdIncomingOrderModel));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
