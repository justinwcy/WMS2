@inject IDialogService Dialog
@using System.Reflection
@using Application.Constants
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteIncomingOrders"
        Color="Color.Error"
        Variant="Variant.Filled"
        Size="Size.Large"
        FullWidth="false"
        Disabled="_disableDelete">
            Delete IncomingOrder
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateIncomingOrderDialogAsync)"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        FullWidth="false">
            Create Incoming Order
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
Filter="new Func<IncomingOrderModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@IncomingOrderModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedIncomingOrders"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">IncomingOrders</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
        <col style="min-width: 80px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderModel, object>(x=>x.PONumber)">PO Number</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderModel, object>(x=>x.IncomingDate)">Incoming Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderModel, object>(x=>x.ReceivingDate)">Receiving Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<IncomingOrderModel, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh>Vendor</MudTh>
        <MudTh>Details</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="PO Number">@context.PONumber</MudTd>
        <MudTd DataLabel="Incoming Date">@context.IncomingDate</MudTd>
        <MudTd DataLabel="Receiving Date">@context.ReceivingDate</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Vendor">
            @context.VendorId
        </MudTd>

        <MudTd DataLabel="Details">
            <MudButton OnClick="@(() => ViewDialogUtilities.OpenIncomingOrderProductDialogAsync(@context.IncomingOrderProductIds, CurrentStaff, Dialog))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.IncomingOrderProductIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="PO Number">
            <MudTextField @bind-Value="context.PONumber" Required />
        </MudTd>

        <MudTd DataLabel="Incoming Date">
            <MudDatePicker Label="Incoming Order Date"
            Editable="true"
            @bind-Date="context.IncomingDate"
            Placeholder="Incoming Order Date" />
        </MudTd>

        <MudTd DataLabel="Receiving Date">
            <MudDatePicker Label="Receiving Date"
            Editable="true"
            @bind-Date="context.ReceivingDate"
            Placeholder="Receiving Date" />
        </MudTd>

        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="context.Status"
            Variant="@_defaultVariant"
            Label="Status"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Status")
            MultiSelection="false"
            HelperText=@("Please select a status")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="true"
            RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState">@orderState</MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Vendor">
            <MudSelect @bind-Value="context.VendorId"
            T="Guid"
            ToStringFunc="@(id=> $"{_allVendorModels.FirstOrDefault(companyModel=>companyModel.Id == id)?.FirstName} {_allVendorModels.FirstOrDefault(companyModel=>companyModel.Id == id)?.LastName}")"
            Variant="@_defaultVariant"
            Label="Vendor"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Vendor")
            MultiSelection="false"
            HelperText=@("Please select a vendor")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="true"
            RequiredError="Please select a vendor">
                @foreach (var vendorModel in _allVendorModels)
                {
                    <MudSelectItem Value="vendorModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Details"></MudTd>

    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public List<Guid> IncomingOrderIds { get; set; } = new List<Guid>();
    public List<IncomingOrderModel> IncomingOrderModels { get; set; } = new List<IncomingOrderModel>();

    [Parameter]
    public GetStaffResponseDTO? CurrentStaff { get; set; }

    private Variant _defaultVariant = Theme.DefaultInputVariant();
    private List<string> _orderStates { get; set; }
    private List<VendorModel> _allVendorModels { get; set; } = [];

    private HashSet<IncomingOrderModel> _selectedIncomingOrders = new HashSet<IncomingOrderModel>();
    private bool _disableDelete => !_selectedIncomingOrders.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<IncomingOrderModel> _tableRef;
    private IncomingOrderModel _incomingOrderModelBeforeEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        await base.OnParametersSetAsync();

        foreach (var incomingOrderId in IncomingOrderIds)
        {
            var getIncomingOrderByIdQuery = new GetIncomingOrderByIdQuery(incomingOrderId);
            var incomingOrderDTO = await Mediator.Send(getIncomingOrderByIdQuery);

            var incomingOrderModel = new IncomingOrderModel()
            {
                Id = incomingOrderDTO.Id,
                IncomingOrderProductIds = incomingOrderDTO.IncomingOrderProductIds,
                IncomingDate = incomingOrderDTO.IncomingDate,
                PONumber = incomingOrderDTO.PONumber,
                ReceivingDate = incomingOrderDTO.ReceivingDate,
                Status = incomingOrderDTO.Status,
                VendorId = incomingOrderDTO.VendorId,
            };

            IncomingOrderModels.Add(incomingOrderModel);
        }

        var getAllVendorIdsByCompanyIdQuery = new GetAllVendorIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var vendorIds = await Mediator.Send(getAllVendorIdsByCompanyIdQuery);

        foreach (var vendorId in vendorIds)
        {
            var getVendorByIdQuery = new GetVendorByIdQuery(vendorId);
            var vendorDTO = await Mediator.Send(getVendorByIdQuery);

            var vendorModel = new VendorModel()
                {
                    Id = vendorDTO.Id,
                    Address = vendorDTO.Address,
                    Email = vendorDTO.Email,
                    FirstName = vendorDTO.FirstName,
                    LastName = vendorDTO.LastName,
                    PhoneNumber = vendorDTO.PhoneNumber,
                    IncomingOrderIds = vendorDTO.IncomingOrderIds,
                };
            _allVendorModels.Add(vendorModel);
        }
        _loading = false;
    }

    private bool FilterFunc(IncomingOrderModel incomingOrderModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (incomingOrderModel.PONumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (incomingOrderModel.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteIncomingOrders()
    {
        var success = true;
        foreach (var incomingOrderModel in _selectedIncomingOrders)
        {
            var deleteIncomingOrderCommand = new DeleteIncomingOrderCommand(incomingOrderModel.Id);
            var result = await Mediator.Send(deleteIncomingOrderCommand);

            if (result.Success)
            {
                IncomingOrderModels.Remove(incomingOrderModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "IncomingOrders Deleted" : "Failed to delete incomingOrders");
    }

    private void BackupItem(object incomingOrderModel)
    {

        _incomingOrderModelBeforeEdit = new IncomingOrderModel()
        {
            Id = ((IncomingOrderModel)incomingOrderModel).Id, 
            IncomingOrderProductIds = ((IncomingOrderModel)incomingOrderModel).IncomingOrderProductIds, 
            IncomingDate = ((IncomingOrderModel)incomingOrderModel).IncomingDate,
            PONumber = ((IncomingOrderModel)incomingOrderModel).PONumber,
            ReceivingDate = ((IncomingOrderModel)incomingOrderModel).ReceivingDate,
            Status = ((IncomingOrderModel)incomingOrderModel).Status,
            VendorId = ((IncomingOrderModel)incomingOrderModel).VendorId,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object incomingOrderModel)
    {
        ((IncomingOrderModel)incomingOrderModel).Id = _incomingOrderModelBeforeEdit.Id;
        ((IncomingOrderModel)incomingOrderModel).IncomingOrderProductIds = _incomingOrderModelBeforeEdit.IncomingOrderProductIds;
        ((IncomingOrderModel)incomingOrderModel).IncomingDate = _incomingOrderModelBeforeEdit.IncomingDate;
        ((IncomingOrderModel)incomingOrderModel).PONumber = _incomingOrderModelBeforeEdit.PONumber;
        ((IncomingOrderModel)incomingOrderModel).ReceivingDate = _incomingOrderModelBeforeEdit.ReceivingDate;
        ((IncomingOrderModel)incomingOrderModel).Status = _incomingOrderModelBeforeEdit.Status;
        ((IncomingOrderModel)incomingOrderModel).VendorId = _incomingOrderModelBeforeEdit.VendorId;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object incomingOrderModel)
    {
        var incomingOrderModelConverted = (IncomingOrderModel)incomingOrderModel;
        var updateIncomingOrderDTO = new UpdateIncomingOrderRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = incomingOrderModelConverted.Id,
            IncomingOrderProductIds = incomingOrderModelConverted.IncomingOrderProductIds,
            IncomingDate = incomingOrderModelConverted.IncomingDate.Value,
            PONumber = incomingOrderModelConverted.PONumber,
            ReceivingDate = incomingOrderModelConverted.ReceivingDate.Value,
            Status = incomingOrderModelConverted.Status,
            VendorId = incomingOrderModelConverted.VendorId,
        };
        var updateIncomingOrderCommand = new UpdateIncomingOrderCommand(updateIncomingOrderDTO);
        var response = await Mediator.Send(updateIncomingOrderCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateIncomingOrderDialogAsync()
    {
        var parameters = new DialogParameters<CreateIncomingOrderDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateIncomingOrderDialog>("Create IncomingOrder", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var incomingOrderModelCreated = (IncomingOrderModel)dialogResult.Data;
            if (incomingOrderModelCreated == null)
            {
                throw new Exception("IncomingOrder created is not recognized");

            }
            IncomingOrderModels.Add(incomingOrderModelCreated);
            StateHasChanged();
            SnackBar.Add($"{incomingOrderModelCreated.PONumber} created");
        }
    }
}

    