@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent

@if (_isReadPolicyExpired)
{
    <ForbiddenError/>
    return;
}

<MudGrid Class="mb-3">
    <MudItem xs="3" Class="d-flex align-center">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.Product)>
            @if (ShowDeleteButton)
            {
                <MudButton OnClick="@DeleteProducts"
                Color="Color.Error"
                Variant="Variant.Filled"
                Size="Size.Large"
                FullWidth="true"
                Disabled="_disableDelete">
                    Delete Product
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
    <MudItem xs="3"/>
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.Product)>
            @if (ShowCreateButton)
            {
                <MudButton OnClick="@(OpenCreateProductDialogAsync)"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Size="Size.Large"
                FullWidth="true">
                    Create Product
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly"
Hover="true" FixedHeader="true"
Filter="new Func<ProductModel, bool>(FilterFunc)"
Items="@ProductModels"
Dense="true"
Bordered="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedProducts"
SelectOnRowClick="false"
CanCancelEdit="true"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd"
EditTrigger="TableEditTrigger.RowClick">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString"
        Placeholder="Search"
        Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="Size.Medium" Class="mt-0"/>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        @for (var i = 0; i < 9; i++)
        {
            <col style="min-width:200px;"/>
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x => x.Sku)">SKU</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x => x.Price)">Price (RM)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x => x.Tag)">Tag</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x => x.Weight)">Weight (g)</MudTableSortLabel></MudTh>
        <MudTh>Dimensions</MudTh>
        <MudTh>Shop</MudTh>
        <MudTh>Product Group</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="SKU">@context.Sku</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Price (RM)">@context.Price</MudTd>
        <MudTd DataLabel="Tag">@context.Tag</MudTd>
        <MudTd DataLabel="Weight (g)">@context.Weight</MudTd>
        <MudTd DataLabel="Dimensions">@context.Length x @context.Width x @context.Height</MudTd>
        <MudTd DataLabel="Shop">
            <MudButton OnClick="@(() => OpenShopDialogAsync(context.ShopIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Large"
            FullWidth="false">
                View (@context.ShopIds.Count)
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Product Group">
            <MudButton OnClick="@(() => OpenProductGroupDialogAsync(context.ProductGroupIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Large"
            FullWidth="false">
                View (@context.ProductGroupIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="SKU">
            <MudTextField @bind-Value="context.Sku" Required/>
        </MudTd>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required/>
        </MudTd>
        <MudTd DataLabel="Description">
            <MudTextField @bind-Value="context.Description" Required/>
        </MudTd>
        <MudTd DataLabel="Price (RM)">
            <MudTextField @bind-Value="context.Price" Required/>
        </MudTd>
        <MudTd DataLabel="Tag">
            <MudTextField @bind-Value="context.Tag" Required/>
        </MudTd>
        <MudTd DataLabel="Weight (g)">
            <MudTextField @bind-Value="context.Weight" Required/>
        </MudTd>
        <MudTd DataLabel="Dimensions">
            <MudTextField Label="Length" @bind-Value="context.Length" Required/>
            <MudTextField Label="Width" @bind-Value="context.Width" Required/>
            <MudTextField Label="Height" @bind-Value="context.Height" Required/>
        </MudTd>
        <MudTd DataLabel="Shop">
            <MudSelect T="Guid?"
            ToStringFunc="@(id => _allShopModels.FirstOrDefault(shopModel => shopModel.Id == id)?.Name)"
            Variant="@_defaultVariant"
            Label="Shop"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Shop")
            MultiSelection="true"
            HelperText=@("Please select a Shop")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="false"
            RequiredError="Please select a Shop"
            SelectedValues="@(context.ShopIds.Select(x => (Guid?)x))"
            SelectedValuesChanged="@(x => context.ShopIds = x.Select(y => y.Value).ToList())">
                @foreach (var shopModel in _allShopModels)
                {
                    <MudSelectItem T="Guid?" Value="@shopModel.Id"/>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Product Group">
            <MudSelect T="Guid?"
            ToStringFunc="@(id => _allProductGroupModels.FirstOrDefault(productGroupModel => productGroupModel.Id == id)?.Name)"
            Variant="@_defaultVariant"
            Label="Product Group"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Product Group")
            MultiSelection="true"
            HelperText=@("Please select a Product Group")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="false"
            RequiredError="Please select a Product Group"
            SelectedValues="@(context.ProductGroupIds.Select(x => (Guid?)x))"
            SelectedValuesChanged="@(x => context.ProductGroupIds = x.Select(y => y.Value).ToList())">
                @foreach (var productGroupModel in _allProductGroupModels)
                {
                    <MudSelectItem T="Guid?" Value="@productGroupModel.Id"/>
                }
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right"/>
    </PagerContent>
</MudTable>

@code {

    public string Name => "Product";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> ProductIds { get; set; }

    public List<ProductModel> ProductModels { get; set; } = new List<ProductModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<ProductModel> _selectedProducts = new HashSet<ProductModel>();
    private bool _disableDelete => !_selectedProducts.Any();

    private ProductModel _productModelBeforeEdit = new ProductModel();

    private bool _loading { get; set; }
    private string searchString = "";
    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();
    private List<ProductGroupModel> _allProductGroupModels { get; set; } = [];
    private List<ShopModel> _allShopModels { get; set; } = [];

    private bool _isReadOnly = false;
    private bool _isReadPolicyExpired = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        // check if user has read authorization
        var readPolicyString = DataAccessUtilities.GetPolicyString(AccessName.Read, DataTableName.Product);
        _isReadPolicyExpired = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, readPolicyString);
        if (_isReadPolicyExpired)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(ProductModel productModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (productModel.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (productModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (productModel.Sku.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (productModel.Tag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task DeleteProducts()
    {
        var success = true;
        foreach (var productModel in _selectedProducts)
        {
            var deleteProductCommand = new DeleteProductCommand(productModel.Id);
            var result = await Mediator.Send(deleteProductCommand);

            if (result.Success)
            {
                ProductIds.Remove(productModel.Id);
                ProductModels.Remove(productModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Products Deleted" : "Failed to delete products");
    }

    private void BackupItem(object productModel)
    {

        _productModelBeforeEdit = new ProductModel()
        {
            Id = ((ProductModel)productModel).Id,
            ProductGroupIds = ((ProductModel)productModel).ProductGroupIds,
            Description = ((ProductModel)productModel).Description,
            Name = ((ProductModel)productModel).Name,
            Height = ((ProductModel)productModel).Height,
            Length = ((ProductModel)productModel).Length,
            Width = ((ProductModel)productModel).Width,
            Price = ((ProductModel)productModel).Price,
            Sku = ((ProductModel)productModel).Sku,
            Tag = ((ProductModel)productModel).Tag,
            Weight = ((ProductModel)productModel).Weight,
            RackIds = ((ProductModel)productModel).RackIds,
            IncomingOrderIds = ((ProductModel)productModel).IncomingOrderIds,
            CustomerOrderDetailIds = ((ProductModel)productModel).CustomerOrderDetailIds,
            RefundOrderIds = ((ProductModel)productModel).RefundOrderIds,
            ShopIds = ((ProductModel)productModel).ShopIds,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object productModel)
    {
        ((ProductModel)productModel).Id = _productModelBeforeEdit.Id;
        ((ProductModel)productModel).ProductGroupIds = _productModelBeforeEdit.ProductGroupIds;
        ((ProductModel)productModel).Description = _productModelBeforeEdit.Description;
        ((ProductModel)productModel).Name = _productModelBeforeEdit.Name;
        ((ProductModel)productModel).Height = _productModelBeforeEdit.Height;
        ((ProductModel)productModel).Length = _productModelBeforeEdit.Length;
        ((ProductModel)productModel).Width = _productModelBeforeEdit.Width;
        ((ProductModel)productModel).Price = _productModelBeforeEdit.Price;
        ((ProductModel)productModel).Sku = _productModelBeforeEdit.Sku;
        ((ProductModel)productModel).Tag = _productModelBeforeEdit.Tag;
        ((ProductModel)productModel).Weight = _productModelBeforeEdit.Weight;
        ((ProductModel)productModel).RackIds = _productModelBeforeEdit.RackIds;
        ((ProductModel)productModel).IncomingOrderIds = _productModelBeforeEdit.IncomingOrderIds;
        ((ProductModel)productModel).CustomerOrderDetailIds = _productModelBeforeEdit.CustomerOrderDetailIds;
        ((ProductModel)productModel).RefundOrderIds = _productModelBeforeEdit.RefundOrderIds;
        ((ProductModel)productModel).ShopIds = _productModelBeforeEdit.ShopIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object productModel)
    {
        var productModelConverted = (ProductModel)productModel;
        var updateProductDTO = new UpdateProductRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Description = productModelConverted.Description,
                Id = productModelConverted.Id,
                Name = productModelConverted.Name,
                Height = productModelConverted.Height,
                Length = productModelConverted.Length,
                Width = productModelConverted.Width,
                Price = productModelConverted.Price,
                Sku = productModelConverted.Sku,
                Tag = productModelConverted.Tag,
                Weight = productModelConverted.Weight,
                RackIds = productModelConverted.RackIds,
                IncomingOrderIds = productModelConverted.IncomingOrderIds,
                CustomerOrderDetailIds = productModelConverted.CustomerOrderDetailIds,
                ProductGroupIds = productModelConverted.ProductGroupIds,
                RefundOrderIds = productModelConverted.RefundOrderIds,
                ShopIds = productModelConverted.ShopIds,
            };
        var updateProductCommand = new UpdateProductCommand(updateProductDTO);
        var response = await Mediator.Send(updateProductCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateProductDialogAsync()
    {
        var parameters = new DialogParameters<CreateProductDialog>()
        {
            { x => x.StaffResponseDTO, CurrentStaff },
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateProductDialog>("Create Product", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled)
        {
            var productModelCreated = (ProductModel)dialogResult.Data;
            if (productModelCreated == null)
            {
                throw new Exception("Product created is not recognized");
            }

            ProductIds.Add(productModelCreated.Id);
            ProductModels.Add(productModelCreated);
            StateHasChanged();
            SnackBar.Add($"{productModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        var databaseHelper = new DatabaseHelper(Mediator, CurrentStaff.CompanyId);
        ProductModels = await databaseHelper.GetProducts(ProductIds);
        _allShopModels = await databaseHelper.GetAllShops();
        _allProductGroupModels = await databaseHelper.GetAllProductGroups();

        return true;
    }

    private async Task OpenShopDialogAsync(List<Guid> shopIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenShopDialogAsync(shopIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    private async Task OpenProductGroupDialogAsync(List<Guid> productGroupIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenProductGroupDialogAsync(productGroupIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    private async Task UploadProductCsv(IBrowserFile file)
    {
        var createProductFromCsvRequestDTO = new CreateProductFromCsvRequestDTO()
        {
            CsvFileStream = file.OpenReadStream(),
            CreatedBy = CurrentStaff.CompanyId,
        };
        var createProductFromCsvCommand = new CreateProductFromCsvCommand(createProductFromCsvRequestDTO);
        var productsCreated = await Mediator.Send(createProductFromCsvCommand);
    
        foreach (var productCreated in productsCreated)
        {
            var productModel = new ProductModel()
            {
                Id = productCreated.Id,
                Name = productCreated.Name,
                RackIds = productCreated.RackIds,
                IncomingOrderIds = productCreated.IncomingOrderIds,
                Price = productCreated.Price,
                Height = productCreated.Height,
                CustomerOrderDetailIds = productCreated.CustomerOrderDetailIds,
                Width = productCreated.Width,
                Description = productCreated.Description,
                Length = productCreated.Length,
                ProductGroupIds = productCreated.ProductGroupIds,
                RefundOrderIds = productCreated.RefundOrderIds,
                Sku = productCreated.Sku,
                ShopIds = productCreated.ShopIds,
                Tag = productCreated.Tag,
                Weight = productCreated.Weight,
                PhotoIds = new List<Guid>(),

            };
    
            ProductIds.Add(productCreated.Id);
            ProductModels.Add(productModel);
        }
        StateHasChanged();
        SnackBar.Add($"{productsCreated.Count} products created");
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}
