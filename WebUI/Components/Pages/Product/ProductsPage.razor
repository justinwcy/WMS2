@page "/products"
@using WebUI.Utilities
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.DTO.Response

<Product/>

@code {

    private List<ProductModel> _products { get; set; } = new List<ProductModel>();
    private bool _loading { get; set; }
    private GetStaffResponseDTO _currentStaff { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await base.OnInitializedAsync();
        _currentStaff = await UserUtilities.GetCurrentUser(Mediator, AuthenticationStateProvider);
        var getAllProductGroupByCompanyId = new GetAllProductGroupByCompanyIdQuery(_currentStaff.CompanyId);
        var allProductGroupsDTO = await Mediator.Send(getAllProductGroupByCompanyId);

        foreach (var productGroupDTO in allProductGroupsDTO)
        {
            var productGroupId = productGroupDTO.Id;
            var productGroupName = productGroupDTO.Name;
            var productGroupDescription = productGroupDTO.Description;
            var productIds = productGroupDTO.ProductIds;
            var productGroupModel = new ProductGroupModel()
                {
                    Id = productGroupId,
                    Name = productGroupName,
                    Description = productGroupDescription,
                    ProductIds = productIds,
                };

            _productGroups.Add(productGroupModel);
            foreach (var productId in productIds)
            {
                var getProductByIdQuery = new GetProductByIdQuery(productId);
                var productDTO = await Mediator.Send(getProductByIdQuery);

                var productModel = new ProductModel()
                    {
                        Id = productDTO.Id,
                        ProductGroupId = productGroupModel.Id,
                        Description = productDTO.Description,
                        Name = productDTO.Name,
                        Height = productDTO.Height,
                        Length = productDTO.Length,
                        Width = productDTO.Width,
                        Price = decimal.Round(productDTO.Price, 2, MidpointRounding.AwayFromZero),
                        Sku = productDTO.Sku,
                        Tag = productDTO.Tag,
                        Weight = productDTO.Weight,
                    };

                _products.Add(productModel);
            }

        }

        _loading = false;
    }
}
