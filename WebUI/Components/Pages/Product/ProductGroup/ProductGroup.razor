@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="5">
        @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteProductGroups"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="true"
                       Disabled="_disableDelete">
                Delete Product Group
            </MudButton>
        }
    </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateProductGroupDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true">
                Create Product Group
            </MudButton>
        }
    </MudItem>
</MudGrid>

<MudTable Hover="true" FixedHeader="true"
          Filter="new Func<ProductGroupModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@ProductGroupModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedProductGroups"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Product Groups</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        @for (var i = 0; i < 3; i++)
        {
            <col style="min-width:200px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductGroupModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductGroupModel, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Products">
            <MudButton OnClick="@(() => OpenProductDialogAsync(@context.ProductIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.ProductIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>

        <MudTd DataLabel="Description">
            <MudTextField @bind-Value="context.Description" Required />
        </MudTd>

        <MudTd DataLabel="Products">
            <MudSelect T="Guid?"
                       ToStringFunc="@(id=> _allProductModels.FirstOrDefault(productModel=>productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Product"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product")
                       MultiSelection="true"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="false"
                       RequiredError="Please select a product"
                       SelectedValues="@(context.ProductIds.Select(x=>(Guid?)x))"
                       SelectedValuesChanged="@(x=> context.ProductIds = x.Select(x=>x.Value).ToList())">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id" />
                }
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "ProductGroup";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> ProductGroupIds { get; set; } = new List<Guid>();
    public List<ProductGroupModel> ProductGroupModels { get; set; } = new List<ProductGroupModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<ProductGroupModel> _selectedProductGroups = new HashSet<ProductGroupModel>();
    private bool _disableDelete => !_selectedProductGroups.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<ProductGroupModel> _tableRef;
    private ProductGroupModel _productGroupModelBeforeEdit { get; set; }
    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();
    private List<ProductModel> _allProductModels { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(ProductGroupModel productGroupModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (productGroupModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (productGroupModel.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteProductGroups()
    {
        var success = true;
        foreach (var productGroupModel in _selectedProductGroups)
        {
            var deleteProductGroupCommand = new DeleteProductGroupCommand(productGroupModel.Id);
            var result = await Mediator.Send(deleteProductGroupCommand);

            if (result.Success)
            {
                ProductGroupIds.Remove(productGroupModel.Id);
                ProductGroupModels.Remove(productGroupModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "ProductGroups Deleted" : "Failed to delete productGroups");
    }

    private void BackupItem(object productGroupModel)
    {

        _productGroupModelBeforeEdit = new ProductGroupModel()
            {
                Id = ((ProductGroupModel)productGroupModel).Id,
                Name = ((ProductGroupModel)productGroupModel).Name,
                Description = ((ProductGroupModel)productGroupModel).Description,
                ProductIds = ((ProductGroupModel)productGroupModel).ProductIds,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object productGroupModel)
    {
        ((ProductGroupModel)productGroupModel).Id = _productGroupModelBeforeEdit.Id;
        ((ProductGroupModel)productGroupModel).Name = _productGroupModelBeforeEdit.Name;
        ((ProductGroupModel)productGroupModel).Description = _productGroupModelBeforeEdit.Description;
        ((ProductGroupModel)productGroupModel).ProductIds = _productGroupModelBeforeEdit.ProductIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object productGroupModel)
    {
        var updateProductGroupDTO = new UpdateProductGroupRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((ProductGroupModel)productGroupModel).Id,
                Name = ((ProductGroupModel)productGroupModel).Name,
                Description = ((ProductGroupModel)productGroupModel).Description,
                ProductIds = ((ProductGroupModel)productGroupModel).ProductIds,
            };
        var updateProductGroupCommand = new UpdateProductGroupCommand(updateProductGroupDTO);
        var response = await Mediator.Send(updateProductGroupCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateProductGroupDialogAsync()
    {
        var parameters = new DialogParameters<CreateProductGroupDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateProductGroupDialog>("Create ProductGroup", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var productGroupModelCreated = (ProductGroupModel)dialogResult.Data;
            if (productGroupModelCreated == null)
            {
                throw new Exception("ProductGroup created is not recognized");
            }
            ProductGroupIds.Add(productGroupModelCreated.Id);
            ProductGroupModels.Add(productGroupModelCreated);
            StateHasChanged();
            SnackBar.Add($"{productGroupModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        ProductGroupModels.Clear();
        foreach (var productGroupId in ProductGroupIds)
        {
            var getProductGroupByIdQuery = new GetProductGroupByIdQuery(productGroupId);
            var productGroupDTO = await Mediator.Send(getProductGroupByIdQuery);

            var productGroupModel = new ProductGroupModel()
                {
                    Description = productGroupDTO.Description,
                    Id = productGroupDTO.Id,
                    Name = productGroupDTO.Name,
                    ProductIds = productGroupDTO.ProductIds,
                };
            ProductGroupModels.Add(productGroupModel);
        }
        
        var getAllProductIdsByCompanyIdQuery = new GetAllProductIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var productIds = await Mediator.Send(getAllProductIdsByCompanyIdQuery);
        foreach (var productId in productIds)
        {
            var getProductByIdQuery = new GetProductByIdQuery(productId);
            var productDTO = await Mediator.Send(getProductByIdQuery);

            var productModel = new ProductModel()
            {
                Id = productDTO.Id,
                Name = productDTO.Name,
                Description = productDTO.Description,
                Height = productDTO.Height,
                Length = productDTO.Length,
                Price = productDTO.Price,
                ProductGroupIds = productDTO.ProductGroupIds,
                ShopIds = productDTO.ShopIds,
                Sku = productDTO.Sku,
                Tag = productDTO.Tag,
                Weight = productDTO.Weight,
                Width = productDTO.Width,
            };
            _allProductModels.Add(productModel);
        }
        return true;
    }

    private async Task OpenProductDialogAsync(List<Guid> productIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenProductDialogAsync(productIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}