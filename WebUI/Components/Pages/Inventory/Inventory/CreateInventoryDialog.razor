<MudDialog>
    <TitleContent>
        Create Inventory
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@_isFormValid">
            <MudSelect @bind-Value="_inventoryModel.ProductId"
                       T="Guid?"
                       ToStringFunc="@(id=> _allProductModels.FirstOrDefault(productModel=>productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product")
                       MultiSelection="false"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id"></MudSelectItem>
                }
            </MudSelect>

            <MudTextField @bind-value="_inventoryModel.Quantity"
                          Variant="@_defaultVariant"
                          T="int"
                          Label="Quantity"
                          Required="true" RequiredError="Quantity is required!"
                          Margin="Margin.Dense" />

            <MudTextField @bind-value="_inventoryModel.DaysLeadTime"
                          Variant="@_defaultVariant"
                          T="int"
                          Label="Lead Time (Days)"
                          Required="true" RequiredError="Lead time is required!"
                          Margin="Margin.Dense" />

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;

    private InventoryModel _inventoryModel { get; set; } = new InventoryModel();

    [Parameter]
    public required CurrentUserModel CurrentStaff { get; set; }

    private List<ProductModel> _allProductModels { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        var getAllProductIdsByCompanyIdQuery = new GetAllProductIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var productIds = await Mediator.Send(getAllProductIdsByCompanyIdQuery);

        foreach (var productId in productIds)
        {
            var getProductByIdQuery = new GetProductByIdQuery(productId);
            var productDTO = await Mediator.Send(getProductByIdQuery);

            var productModel = new ProductModel()
                {
                    Id = productDTO.Id,
                    Name = productDTO.Name,
                    Description = productDTO.Description,
                    Height = productDTO.Height,
                    Length = productDTO.Length,
                    Price = productDTO.Price,
                    ProductGroupIds = productDTO.ProductGroupIds,
                    ShopIds = productDTO.ShopIds,
                    Sku = productDTO.Sku,
                    Tag = productDTO.Tag,
                    Weight = productDTO.Weight,
                    Width = productDTO.Width,
                };
            _allProductModels.Add(productModel);
        }
    }

    private async Task Submit()
    {
        var createInventoryDTO = new CreateInventoryRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Quantity = _inventoryModel.Quantity,
                ProductId = _inventoryModel.ProductId,
                DaysLeadTime = _inventoryModel.DaysLeadTime,


            };
        var createInventoryCommand = new CreateInventoryCommand(createInventoryDTO);
        var createdInventoryResponseDTO = await Mediator.Send(createInventoryCommand);

        var createdInventoryModel = new InventoryModel()
            {
                Id = createdInventoryResponseDTO.Id,
                Quantity = _inventoryModel.Quantity,
                ProductId = _inventoryModel.ProductId,
                DaysLeadTime = _inventoryModel.DaysLeadTime,
            };
        MudDialog.Close(DialogResult.Ok(createdInventoryModel));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
