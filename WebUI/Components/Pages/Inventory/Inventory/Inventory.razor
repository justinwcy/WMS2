@inject IDialogService Dialog
@implements IPageComponent
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteInventory"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="false"
                       Disabled="_disableDelete">
                Delete Inventory
            </MudButton>
        }
    </MudItem>
    <MudItem xs="3">
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateInventoryDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="false">
                Create Inventory
            </MudButton>
        }
    </MudItem>
</MudGrid>

<MudTable Hover="true"  FixedHeader="true"
Filter="new Func<InventoryModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@InventoryModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedInventory"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Inventory</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 200px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
    </ColGroup>
    <HeaderContent>
        <MudTh>Product</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<InventoryModel, object>(x=>x.Quantity)">Quantity</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<InventoryModel, object>(x=>x.DaysLeadTime)">Lead Time (Days)</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Product">@(_allProductModels.FirstOrDefault(productModel => productModel.Id == context.ProductId)?.Name)</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd DataLabel="Lead Time (Days)">@context.DaysLeadTime</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Products">
            <MudSelect @bind-Value="context.ProductId"
                       T="Guid"
                       ToStringFunc="@(id=> _allProductModels.FirstOrDefault(productModel=>productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product")
                       MultiSelection="false"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem Value="@productModel"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Quantity">
            <MudTextField @bind-Value="context.Quantity" T="int" Required />
        </MudTd>

        <MudTd DataLabel="Lead Time (Days)">
            <MudTextField @bind-Value="context.Quantity" T="int" Required />
        </MudTd>

    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Inventory";

    [Parameter]
    public bool ShowCreateButton { get; set; }
    
    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }
    
    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> InventoryIds { get; set; } = new List<Guid>();
    public List<InventoryModel> InventoryModels { get; set; } = new List<InventoryModel>();

    [Parameter]
    public GetStaffResponseDTO? CurrentStaff { get; set; }

    private HashSet<InventoryModel> _selectedInventory = new HashSet<InventoryModel>();
    private bool _disableDelete => !_selectedInventory.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<InventoryModel> _tableRef;
    private InventoryModel _inventoryModelBeforeEdit { get; set; }

    private List<ProductModel> _allProductModels { get; set; } = [];
    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();
    
    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !InventoryIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(InventoryModel inventoryModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var productName = _allProductModels.FirstOrDefault(productModel => productModel.Id == inventoryModel.ProductId)?.Name;
        if (productName != null && productName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteInventory()
    {
        var success = true;
        foreach (var inventoryModel in _selectedInventory)
        {
            var deleteInventoryCommand = new DeleteInventoryCommand(inventoryModel.Id);
            var result = await Mediator.Send(deleteInventoryCommand);

            if (result.Success)
            {
                InventoryIds.Remove(inventoryModel.Id);
                InventoryModels.Remove(inventoryModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Inventory Deleted" : "Failed to delete inventory");
    }

    private void BackupItem(object inventoryModel)
    {

        _inventoryModelBeforeEdit = new InventoryModel()
        {
            Id = ((InventoryModel)inventoryModel).Id,
            DaysLeadTime = ((InventoryModel)inventoryModel).DaysLeadTime,
            ProductId = ((InventoryModel)inventoryModel).ProductId,
            Quantity = ((InventoryModel)inventoryModel).Quantity,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object inventoryModel)
    {
        ((InventoryModel)inventoryModel).Id = _inventoryModelBeforeEdit.Id;
        ((InventoryModel)inventoryModel).DaysLeadTime = _inventoryModelBeforeEdit.DaysLeadTime;
        ((InventoryModel)inventoryModel).ProductId = _inventoryModelBeforeEdit.ProductId;
        ((InventoryModel)inventoryModel).Quantity = _inventoryModelBeforeEdit.Quantity;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object inventoryModel)
    {
        var updateInventoryDTO = new UpdateInventoryRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = ((InventoryModel)inventoryModel).Id,
            DaysLeadTime = ((InventoryModel)inventoryModel).DaysLeadTime,
            ProductId = ((InventoryModel)inventoryModel).ProductId,
            Quantity = ((InventoryModel)inventoryModel).Quantity,
        };
        var updateInventoryCommand = new UpdateInventoryCommand(updateInventoryDTO);
        var response = await Mediator.Send(updateInventoryCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateInventoryDialogAsync()
    {
        var parameters = new DialogParameters<CreateInventoryDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateInventoryDialog>("Create Inventory", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var inventoryModelCreated = (InventoryModel)dialogResult.Data;
            if (inventoryModelCreated == null)
            {
                throw new Exception("Inventory created is not recognized");

            }
            InventoryIds.Add(inventoryModelCreated.Id);
            InventoryModels.Add(inventoryModelCreated);
            StateHasChanged();
            SnackBar.Add($"Inventory item created");
        }
    }

    public async Task<bool> FetchData()
    {
        InventoryModels.Clear();
        foreach (var inventoryId in InventoryIds)
        {
            var getInventoryByIdQuery = new GetInventoryByIdQuery(inventoryId);
            var inventoryDTO = await Mediator.Send(getInventoryByIdQuery);

            var inventoryModel = new InventoryModel()
            {
                Id = inventoryDTO.Id,
                Quantity = inventoryDTO.Quantity,
                DaysLeadTime = inventoryDTO.DaysLeadTime,
                ProductId = inventoryDTO.ProductId,
            };

            InventoryModels.Add(inventoryModel);
        }

        // to get all products
        var getAllProductIdsByCompanyIdQuery = new GetAllProductIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var productIds = await Mediator.Send(getAllProductIdsByCompanyIdQuery);
        foreach (var productId in productIds)
        {
            var getProductByIdQuery = new GetProductByIdQuery(productId);
            var productDTO = await Mediator.Send(getProductByIdQuery);

            var productModel = new ProductModel()
            {
                Id = productDTO.Id,
                Name = productDTO.Name,
                Description = productDTO.Description,
                Height = productDTO.Height,
                Length = productDTO.Length,
                Price = productDTO.Price,
                ProductGroupIds = productDTO.ProductGroupIds,
                ShopIds = productDTO.ShopIds,
                Sku = productDTO.Sku,
                Tag = productDTO.Tag,
                Weight = productDTO.Weight,
                Width = productDTO.Width,
            };
            _allProductModels.Add(productModel);
        }
        return true;
    }
}

    