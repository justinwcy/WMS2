@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="5">
            <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.Inventory)>
            @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteInventory"
            Color="Color.Error"
            Variant="Variant.Filled"
            Size="Size.Large"
            FullWidth="true"
            Disabled="_disableDelete">
                Delete Inventory
            </MudButton>
        }
             </AuthorizeView>
            </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
            <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.Inventory)>
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateInventoryDialogAsync)"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Large"
            FullWidth="true">
                Create Inventory
            </MudButton>
        }
             </AuthorizeView>
        </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly"
          Hover="true" FixedHeader="true"
          Filter="new Func<InventoryModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@InventoryModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedInventory"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Inventory</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col style="min-width:500px;" />
        @for (var i = 0; i < 5; i++)
        {
            <col style="min-width:200px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh>Photos</MudTh>
        <MudTh>Product Name</MudTh>
        <MudTh>Product SKU</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<InventoryModel, object>(x => x.Quantity)">Quantity</MudTableSortLabel></MudTh>
        <MudTh>Product Location</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Photos">
            <MudCarousel @ref="_allPhotoCarousels[context.Id]"
                         ItemsSource="@_allProductModels.First(productModel=>productModel.Id == context.ProductId).PhotoIds"
                         Style="height:200px;"
                         ShowArrows="true"
                         ShowBullets="true"
                         EnableSwipeGesture="true"
                         AutoCycle="false">
                <ItemTemplate Context="photoId">
                    <div class="d-flex flex-column flex-column justify-center">
                        <MudImage ObjectFit="ObjectFit.ScaleDown"
                                  Elevation="25"
                                  Height="150"
                                  Class="rounded-lg"
                                  Src=@($"data:image/jpeg;base64,{_allPhotoBase64String[photoId]}") />
                    </div>
                </ItemTemplate>
            </MudCarousel>
        </MudTd>
        <MudTd DataLabel="Product Name">@(_allProductModels.FirstOrDefault(productModel => productModel.Id == context.ProductId)?.Name)</MudTd>
        <MudTd DataLabel="Product SKU">@(_allProductModels.FirstOrDefault(productModel => productModel.Id == context.ProductId)?.Sku)</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd DataLabel="Product Location">
            @_allRackModels.FirstOrDefault(rackModel => rackModel.Id == context.RackId)?.Name
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        
        <MudTd DataLabel="Photos">
            <MudGrid Spacing="5" Justify="Justify.Center">
                <MudItem xs="8">
                    <MudCarousel @ref="_allPhotoCarousels[context.Id]"
                                 ItemsSource="@_allProductModels.First(productModel=>productModel.Id == context.ProductId).PhotoIds"
                                 Style="height:200px;"
                                 ShowArrows="true"
                                 ShowBullets="true"
                                 EnableSwipeGesture="true"
                                 AutoCycle="false">
                        <ItemTemplate Context="photoId">
                            <div class="d-flex flex-column flex-column justify-center">
                                <MudImage ObjectFit="ObjectFit.ScaleDown"
                                          Elevation="25"
                                          Height="150"
                                          Class="rounded-lg"
                                          Src=@($"data:image/jpeg;base64,{_allPhotoBase64String[photoId]}") />
                            </div>
                        </ItemTemplate>
                    </MudCarousel>
                </MudItem>
            </MudGrid>
        </MudTd>

        <MudTd DataLabel="Product Name">
            <MudSelect @bind-Value="context.ProductId"
                       T="Guid?"
                       ToStringFunc="@(id => _allProductModels.FirstOrDefault(productModel => productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Product Name"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product Name")
                       MultiSelection="false"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Product SKU">
            <MudSelect @bind-Value="context.ProductId"
                       T="Guid?"
                       ToStringFunc="@(id => _allProductModels.FirstOrDefault(productModel => productModel.Id == id)?.Sku)"
                       Variant="@_defaultVariant"
                       Label="Product Sku"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product SKU")
                       MultiSelection="false"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Quantity">
            <MudTextField @bind-Value="context.Quantity" T="int" Required/>
        </MudTd>

        <MudTd DataLabel="Product Location">
            <MudSelect @bind-Value="context.RackId"
                       T="Guid?"
                       ToStringFunc="@(id => _allRackModels.FirstOrDefault(rackModel => rackModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Rack"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Rack")
                       MultiSelection="false"
                       HelperText=@("Please select a rack")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a rack">
                @foreach (var rackModel in _allRackModels)
                {
                    <MudSelectItem T="Guid?" Value="@rackModel.Id"/>
                }
            </MudSelect>
        </MudTd>

    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Inventory";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> InventoryIds { get; set; } = new List<Guid>();
    public List<InventoryModel> InventoryModels { get; set; } = new List<InventoryModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<InventoryModel> _selectedInventory = new HashSet<InventoryModel>();
    private bool _disableDelete => !_selectedInventory.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<InventoryModel> _tableRef;
    private InventoryModel _inventoryModelBeforeEdit { get; set; }

    private List<ProductModel> _allProductModels { get; set; } = [];
    private List<RackModel> _allRackModels { get; set; } = [];
    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private List<ProductGroupModel> _allProductGroupModels = [];
    private readonly Dictionary<Guid, MudCarousel<Guid>> _allPhotoCarousels = new();

    // can contain a mix of photo ids that are in and not in the server when its in editing mode, otherwise all ids are in server
    private readonly Dictionary<Guid, string> _allPhotoBase64String = new();

    // this is to store the photo ids that are added but not uploaded yet to the server
    private List<Guid> _addedPhotoIds = new();

    private bool _isReadOnly = false;
    
    protected override async Task OnInitializedAsync()
    {
        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.GetExpiryDateClaim(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(InventoryModel inventoryModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var productName = _allProductModels.FirstOrDefault(productModel => productModel.Id == inventoryModel.ProductId)?.Name;
        if (productName != null && productName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteInventory()
    {
        var success = true;
        foreach (var inventoryModel in _selectedInventory)
        {
            var deleteInventoryCommand = new DeleteInventoryCommand(inventoryModel.Id);
            var result = await Mediator.Send(deleteInventoryCommand);

            if (result.Success)
            {
                InventoryIds.Remove(inventoryModel.Id);
                InventoryModels.Remove(inventoryModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Inventory Deleted" : "Failed to delete inventory");
    }

    private void BackupItem(object inventoryModel)
    {

        _inventoryModelBeforeEdit = new InventoryModel()
            {
                Id = ((InventoryModel)inventoryModel).Id,
                ProductId = ((InventoryModel)inventoryModel).ProductId,
                RackId = ((InventoryModel)inventoryModel).RackId,
                Quantity = ((InventoryModel)inventoryModel).Quantity,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object inventoryModel)
    {
        ((InventoryModel)inventoryModel).Id = _inventoryModelBeforeEdit.Id;
        ((InventoryModel)inventoryModel).ProductId = _inventoryModelBeforeEdit.ProductId;
        ((InventoryModel)inventoryModel).RackId = _inventoryModelBeforeEdit.RackId;
        ((InventoryModel)inventoryModel).Quantity = _inventoryModelBeforeEdit.Quantity;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object inventoryModel)
    {
        var updateInventoryDTO = new UpdateInventoryRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((InventoryModel)inventoryModel).Id,
                RackId = ((InventoryModel)inventoryModel).RackId,
                ProductId = ((InventoryModel)inventoryModel).ProductId,
                Quantity = ((InventoryModel)inventoryModel).Quantity,
            };
        var updateInventoryCommand = new UpdateInventoryCommand(updateInventoryDTO);
        var response = await Mediator.Send(updateInventoryCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateInventoryDialogAsync()
    {
        var parameters = new DialogParameters<CreateInventoryDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateInventoryDialog>("Create Inventory", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var inventoryModelCreated = (InventoryModel)dialogResult.Data;
            if (inventoryModelCreated == null)
            {
                throw new Exception("Inventory created is not recognized");

            }
            InventoryIds.Add(inventoryModelCreated.Id);
            InventoryModels.Add(inventoryModelCreated);
            StateHasChanged();
            SnackBar.Add($"Inventory item created");
        }
    }

    public async Task<bool> FetchData()
    {
        InventoryModels.Clear();
        foreach (var inventoryId in InventoryIds)
        {
            var getInventoryByIdQuery = new GetInventoryByIdQuery(inventoryId);
            var inventoryDTO = await Mediator.Send(getInventoryByIdQuery);

            var inventoryModel = new InventoryModel()
            {
                Id = inventoryDTO.Id,
                Quantity = inventoryDTO.Quantity,
                ProductId = inventoryDTO.ProductId,
                RackId = inventoryDTO.RackId,
            };
            _allPhotoCarousels[inventoryModel.Id] = new MudCarousel<Guid>();
            InventoryModels.Add(inventoryModel);
        }

        _allProductGroupModels.Clear();
        _allPhotoBase64String.Clear();
        var getAllProductGroupIdsByCompanyIdQuery = new GetAllProductGroupIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var productGroupIds = await Mediator.Send(getAllProductGroupIdsByCompanyIdQuery);
        foreach (var productGroupId in productGroupIds)
        {
            var getProductGroupByIdQuery = new GetProductGroupByIdQuery(productGroupId);
            var productGroupDTO = await Mediator.Send(getProductGroupByIdQuery);

            var productGroupModel = new ProductGroupModel()
            {
                Description = productGroupDTO.Description,
                Id = productGroupDTO.Id,
                Name = productGroupDTO.Name,
                ProductIds = productGroupDTO.ProductIds,
                PhotoIds = productGroupDTO.PhotoIds,
            };

            foreach (var photoId in productGroupDTO.PhotoIds)
            {
                var photoBase64String = await PhotoUtilities.GetPhotoBase64String(Mediator, photoId);
                _allPhotoBase64String.Add(photoId, photoBase64String);
            }

            _allProductGroupModels.Add(productGroupModel);
        }

        // to get all products
        _allProductModels.Clear();
        var getAllProductIdsByCompanyIdQuery = new GetAllProductIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var productIds = await Mediator.Send(getAllProductIdsByCompanyIdQuery);
        foreach (var productId in productIds)
        {
            var getProductByIdQuery = new GetProductByIdQuery(productId);
            var productDTO = await Mediator.Send(getProductByIdQuery);

            var productModel = new ProductModel()
                {
                    Id = productDTO.Id,
                    Name = productDTO.Name,
                    Description = productDTO.Description,
                    Height = productDTO.Height,
                    Length = productDTO.Length,
                    Price = productDTO.Price,
                    ProductGroupIds = productDTO.ProductGroupIds,
                    ShopIds = productDTO.ShopIds,
                    Sku = productDTO.Sku,
                    Tag = productDTO.Tag,
                    Weight = productDTO.Weight,
                    Width = productDTO.Width,
                    PhotoIds = new List<Guid>(),
                };

            foreach (var productGroupId in productModel.ProductGroupIds)
            {
                var productGroupModel = _allProductGroupModels.First(model => model.Id == productGroupId);
                productModel.PhotoIds = productModel.PhotoIds.Concat(productGroupModel.PhotoIds).ToList();
            }
            _allProductModels.Add(productModel);
        }

        _allRackModels.Clear();
        var getAllRackIdsByCompanyIdQuery = new GetAllRackIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var rackIds = await Mediator.Send(getAllRackIdsByCompanyIdQuery);
        foreach (var rackId in rackIds)
        {
            var getRackByIdQuery = new GetRackByIdQuery(rackId);
            var rackDTO = await Mediator.Send(getRackByIdQuery);

            var rackModel = new RackModel()
                {
                    Id = rackDTO.Id,
                    Name = rackDTO.Name,
                    Depth = rackDTO.Depth,
                    Height = rackDTO.Height,
                    Width = rackDTO.Width,
                    MaxWeight = rackDTO.MaxWeight,
                    ProductIds = rackDTO.ProductIds,
                    ZoneId = rackDTO.ZoneId,
                };
            _allRackModels.Add(rackModel);
        }
        return true;
    }

    private async Task OpenRackDialogAsync(List<Guid> rackIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenRackDialogAsync(rackIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}