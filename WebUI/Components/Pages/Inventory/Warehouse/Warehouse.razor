@inject IDialogService Dialog
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="9">
        @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteWarehouses"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="false"
                       Disabled="_disableDelete">
                Delete Warehouse
            </MudButton>
        }
    </MudItem>
    <MudItem xs="3">
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateWarehouseDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="false">
                Create Warehouse
            </MudButton>
        }
    </MudItem>
</MudGrid>

<MudTable Hover="true"  FixedHeader="true"
          Filter="new Func<WarehouseModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@WarehouseModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedWarehouses"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Warehouses</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<WarehouseModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<WarehouseModel, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
        <MudTh>Company</MudTh>
        <MudTh>Zone</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Company">
            @_allCompanyModels.FirstOrDefault(companyModel => companyModel.Id == @context.CompanyId)?.Name
        </MudTd>
        <MudTd DataLabel="Zone">
            <MudButton OnClick="@(() => OpenZoneDialogAsync(@context.ZoneIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.ZoneIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>
        
        <MudTd DataLabel="Address">
            <MudTextField @bind-Value="context.Address" Required />
        </MudTd>
        
        <MudTd DataLabel="Company">
            <MudSelect @bind-Value="context.CompanyId"
                       T="Guid?"
                       ToStringFunc="@(id=> _allCompanyModels.FirstOrDefault(companyModel=>companyModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Company"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Company")
                       MultiSelection="false"
                       HelperText=@("Please select a company")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a company">
                @foreach (var companyModel in _allCompanyModels)
                {
                    <MudSelectItem T="Guid?" Value="companyModel.Id"></MudSelectItem>
                }
            </MudSelect>
            
            <MudTd DataLabel="Zone"></MudTd>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Warehouse";

    [Parameter]
    public bool ShowCreateButton { get; set; }
    
    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }
    
    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> WarehouseIds { get; set; } = new List<Guid>();
    public List<WarehouseModel> WarehouseModels { get; set; } = new List<WarehouseModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<WarehouseModel> _selectedWarehouses = new HashSet<WarehouseModel>();
    private bool _disableDelete => !_selectedWarehouses.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<WarehouseModel> _tableRef;
    private WarehouseModel _warehouseModelBeforeEdit { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private List<CompanyModel> _allCompanyModels { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !WarehouseIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(WarehouseModel warehouseModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (warehouseModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (warehouseModel.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteWarehouses()
    {
        var success = true;
        foreach (var warehouseModel in _selectedWarehouses)
        {
            var deleteWarehouseCommand = new DeleteWarehouseCommand(warehouseModel.Id);
            var result = await Mediator.Send(deleteWarehouseCommand);

            if (result.Success)
            {
                WarehouseIds.Remove(warehouseModel.Id);
                WarehouseModels.Remove(warehouseModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Warehouses Deleted" : "Failed to delete warehouses");
    }

    private void BackupItem(object warehouseModel)
    {

        _warehouseModelBeforeEdit = new WarehouseModel()
        {
            Id = ((WarehouseModel)warehouseModel).Id,
            Name = ((WarehouseModel)warehouseModel).Name,
            Address = ((WarehouseModel)warehouseModel).Address,
            CompanyId = ((WarehouseModel)warehouseModel).CompanyId,
            ZoneIds = ((WarehouseModel)warehouseModel).ZoneIds,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object warehouseModel)
    {
        ((WarehouseModel)warehouseModel).Id = _warehouseModelBeforeEdit.Id;
        ((WarehouseModel)warehouseModel).Name = _warehouseModelBeforeEdit.Name;
        ((WarehouseModel)warehouseModel).Address = _warehouseModelBeforeEdit.Address;
        ((WarehouseModel)warehouseModel).CompanyId = _warehouseModelBeforeEdit.CompanyId;
        ((WarehouseModel)warehouseModel).ZoneIds = _warehouseModelBeforeEdit.ZoneIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object warehouseModel)
    {
        var warehouseModelConverted = (WarehouseModel)warehouseModel;
        var updateWarehouseDTO = new UpdateWarehouseRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = warehouseModelConverted.Id,
            Name = warehouseModelConverted.Name,
            Address = warehouseModelConverted.Address,
            CompanyId = warehouseModelConverted.CompanyId,
            ZoneIds = warehouseModelConverted.ZoneIds,
        };
        var updateWarehouseCommand = new UpdateWarehouseCommand(updateWarehouseDTO);
        var response = await Mediator.Send(updateWarehouseCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateWarehouseDialogAsync()
    {
        var parameters = new DialogParameters<CreateWarehouseDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };
        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateWarehouseDialog>("Create Warehouse", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var warehouseModelCreated = (WarehouseModel)dialogResult.Data;
            if (warehouseModelCreated == null)
            {
                throw new Exception("Warehouse created is not recognized");

            }
            WarehouseIds.Add(warehouseModelCreated.Id);
            WarehouseModels.Add(warehouseModelCreated);
            StateHasChanged();
            SnackBar.Add($"{warehouseModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        WarehouseModels.Clear();
        foreach (var warehouseId in WarehouseIds)
        {
            var getWarehouseByIdQuery = new GetWarehouseByIdQuery(warehouseId);
            var warehouseDTO = await Mediator.Send(getWarehouseByIdQuery);

            var warehouseModel = new WarehouseModel()
                {
                    Id = warehouseDTO.Id,
                    Name = warehouseDTO.Name,
                    Address = warehouseDTO.Address,
                    CompanyId = warehouseDTO.CompanyId,
                    ZoneIds = warehouseDTO.ZoneIds,
                };

            WarehouseModels.Add(warehouseModel);
        }

        var getAllCompanyIdsQuery = new GetAllCompanyIdsQuery();
        var allCompanyIds = await Mediator.Send(getAllCompanyIdsQuery);
        foreach (var companyId in allCompanyIds)
        {
            var getCompanyByIdQuery = new GetCompanyByIdQuery(companyId);
            var getCompanyResponseDTO = await Mediator.Send(getCompanyByIdQuery);
            var companyModel = new CompanyModel()
                {
                    Id = companyId,
                    StaffIds = getCompanyResponseDTO.StaffIds,
                    WarehouseIds = getCompanyResponseDTO.WarehouseIds,
                    Name = getCompanyResponseDTO.Name,
                };

            _allCompanyModels.Add(companyModel);
        }
        return true;
    }

    private async Task OpenCompanyDialogAsync(List<Guid> companyIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenCompanyDialogAsync(companyIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    private async Task OpenZoneDialogAsync(List<Guid> zoneIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenZoneDialogAsync(zoneIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }
}
