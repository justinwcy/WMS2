
@inject IDialogService Dialog
@implements IPageComponent
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteRacks"
        Color="Color.Error"
        Variant="Variant.Filled"
        Size="Size.Large"
        FullWidth="false"
        Disabled="_disableDelete">
            Delete Rack
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateRackDialogAsync)"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        FullWidth="false">
            Create Rack
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
Filter="new Func<RackModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@RackModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedRacks"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Racks</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
        <col style="min-width: 150px" />
        <col style="min-width: 150px" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.MaxWeight)">Max Weight (g)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Height)">Height</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Width)">Width</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Depth)">Depth</MudTableSortLabel></MudTh>
        <MudTh>Zones</MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Max Weight (g)">@context.MaxWeight</MudTd>
        <MudTd DataLabel="Height">@context.Height</MudTd>
        <MudTd DataLabel="Width">@context.Width</MudTd>
        <MudTd DataLabel="Depth">@context.Depth</MudTd>
        
        <MudTd DataLabel="Zones">
            <MudButton OnClick="@(() => OpenZoneDialogAsync(new List<Guid> { @context.ZoneId }))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (1)
            </MudButton>
        </MudTd>

        <MudTd DataLabel="Products">
            <MudButton OnClick="@(() => OpenProductDialogAsync(@context.ProductIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.ProductIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>
        
        <MudTd DataLabel="Max Weight (g)">
            <MudTextField @bind-Value="context.MaxWeight" T="double" Required />
        </MudTd>
        
        <MudTd DataLabel="Height">
            <MudTextField @bind-Value="context.Height" T="double" Required />
        </MudTd>
        
        <MudTd DataLabel="Width">
            <MudTextField @bind-Value="context.Width" T="double" Required />
        </MudTd>
        
        <MudTd DataLabel="Depth">
            <MudTextField @bind-Value="context.Depth" T="double" Required />
        </MudTd>

        <MudTd DataLabel="Zones"></MudTd>
        <MudTd DataLabel="Products"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Rack";

    [Parameter]
    public IMainPage MainPage { get; set; }
    
    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> RackIds { get; set; } = new List<Guid>();
    public List<RackModel> RackModels { get; set; } = new List<RackModel>();

    [Parameter]
    public GetStaffResponseDTO? CurrentStaff { get; set; }

    private HashSet<RackModel> _selectedRacks = new HashSet<RackModel>();
    private bool _disableDelete => !_selectedRacks.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<RackModel> _tableRef;
    private RackModel _rackModelBeforeEdit { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !RackIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(RackModel rackModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (rackModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteRacks()
    {
        var success = true;
        foreach (var rackModel in _selectedRacks)
        {
            var deleteRackCommand = new DeleteRackCommand(rackModel.Id);
            var result = await Mediator.Send(deleteRackCommand);

            if (result.Success)
            {
                RackIds.Remove(rackModel.Id);
                RackModels.Remove(rackModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Racks Deleted" : "Failed to delete racks");
    }

    private void BackupItem(object rackModel)
    {

        _rackModelBeforeEdit = new RackModel()
        {
            Id = ((RackModel)rackModel).Id,
            ProductIds = ((RackModel)rackModel).ProductIds, 
            Name = ((RackModel)rackModel).Name, 
            MaxWeight = ((RackModel)rackModel).MaxWeight,
            Width = ((RackModel)rackModel).Width,
            Depth = ((RackModel)rackModel).Depth,
            Height = ((RackModel)rackModel).Height,
            ZoneId = ((RackModel)rackModel).ZoneId,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object rackModel)
    {
        ((RackModel)rackModel).Id = _rackModelBeforeEdit.Id;
        ((RackModel)rackModel).Name = _rackModelBeforeEdit.Name;
        ((RackModel)rackModel).ProductIds = _rackModelBeforeEdit.ProductIds;
        ((RackModel)rackModel).MaxWeight = _rackModelBeforeEdit.MaxWeight;
        ((RackModel)rackModel).Width = _rackModelBeforeEdit.Width;
        ((RackModel)rackModel).Depth = _rackModelBeforeEdit.Depth;
        ((RackModel)rackModel).Height = _rackModelBeforeEdit.Height;
        ((RackModel)rackModel).ZoneId = _rackModelBeforeEdit.ZoneId;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object rackModel)
    {
        var updateRackDTO = new UpdateRackRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = ((RackModel)rackModel).Id,
            ProductIds = ((RackModel)rackModel).ProductIds,
            Name = ((RackModel)rackModel).Name,
            MaxWeight = ((RackModel)rackModel).MaxWeight,
            Width = ((RackModel)rackModel).Width,
            Depth = ((RackModel)rackModel).Depth,
            Height = ((RackModel)rackModel).Height,
            ZoneId = ((RackModel)rackModel).ZoneId,
        };
        var updateRackCommand = new UpdateRackCommand(updateRackDTO);
        var response = await Mediator.Send(updateRackCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateRackDialogAsync()
    {
        var parameters = new DialogParameters<CreateRackDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateRackDialog>("Create Rack", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var rackModelCreated = (RackModel)dialogResult.Data;
            if (rackModelCreated == null)
            {
                throw new Exception("Rack created is not recognized");

            }
            RackIds.Add(rackModelCreated.Id);
            RackModels.Add(rackModelCreated);
            StateHasChanged();
            SnackBar.Add($"{rackModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        RackModels.Clear();
        foreach (var rackId in RackIds)
        {
            var getRackByIdQuery = new GetRackByIdQuery(rackId);
            var rackDTO = await Mediator.Send(getRackByIdQuery);

            var rackModel = new RackModel()
                {
                    Id = rackDTO.Id,
                    ProductIds = rackDTO.ProductIds,
                    Name = rackDTO.Name,
                    MaxWeight = rackDTO.MaxWeight,
                    Width = rackDTO.Width,
                    Depth = rackDTO.Depth,
                    Height = rackDTO.Height,
                    ZoneId = rackDTO.ZoneId,
                };

            RackModels.Add(rackModel);
        }
        return true;
    }

    private async Task OpenZoneDialogAsync(List<Guid> zoneIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenZoneDialogAsync(zoneIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    private async Task OpenProductDialogAsync(List<Guid> productIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenProductDialogAsync(productIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }
}

    