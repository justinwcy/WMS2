@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent

@if (_isReadPolicyExpired)
{
    <ForbiddenError/>
    return;
}

<MudGrid Class="mb-3">
    <MudItem xs="3" Class="d-flex align-center">
            <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.Rack)>
            @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteRacks"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="true"
                       Disabled="_disableDelete">
                Delete Rack
            </MudButton>
        }
             </AuthorizeView>
            </MudItem>
    <MudItem xs="3"/>
    <MudItem xs="5">
            <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.Rack)>
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateRackDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true">
                Create Rack
            </MudButton>
        }
             </AuthorizeView>
        </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly" 
          Hover="true" FixedHeader="true"
          Filter="new Func<RackModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@RackModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedRacks"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Racks</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        @for (var i = 0; i < 7; i++)
        {
            <col style="min-width:200px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.MaxWeight)">Max Weight (g)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Height)">Height</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Width)">Width</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<RackModel, object>(x=>x.Depth)">Depth</MudTableSortLabel></MudTh>
        <MudTh>Zones</MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Max Weight (g)">@context.MaxWeight</MudTd>
        <MudTd DataLabel="Height">@context.Height</MudTd>
        <MudTd DataLabel="Width">@context.Width</MudTd>
        <MudTd DataLabel="Depth">@context.Depth</MudTd>

        <MudTd DataLabel="Zones">
            @_allZoneModels.FirstOrDefault(zoneModel => zoneModel.Id == context.ZoneId)?.Name
        </MudTd>

        <MudTd DataLabel="Products">
            <MudButton OnClick="@(() => OpenProductDialogAsync(@context.ProductIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.ProductIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>

        <MudTd DataLabel="Max Weight (g)">
            <MudTextField @bind-Value="context.MaxWeight" T="double" Required />
        </MudTd>

        <MudTd DataLabel="Height">
            <MudTextField @bind-Value="context.Height" T="double" Required />
        </MudTd>

        <MudTd DataLabel="Width">
            <MudTextField @bind-Value="context.Width" T="double" Required />
        </MudTd>

        <MudTd DataLabel="Depth">
            <MudTextField @bind-Value="context.Depth" T="double" Required />
        </MudTd>

        <MudTd DataLabel="Zones">
            <MudSelect @bind-Value="context.ZoneId"
                       T="Guid?"
                       ToStringFunc="@(id=> _allZoneModels.FirstOrDefault(zoneModel=>zoneModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Zone"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Zone")
                       MultiSelection="false"
                       HelperText=@("Please select a zone")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a zone">
                @foreach (var zoneModel in _allZoneModels)
                {
                    <MudSelectItem T="Guid?" Value="zoneModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Products">
            <MudSelect T="Guid?"
                       ToStringFunc="@(id=> _allProductModels.FirstOrDefault(productModel=>productModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Product"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Product")
                       MultiSelection="true"
                       HelperText=@("Please select a product")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="false"
                       RequiredError="Please select a product"
                       SelectedValues="@(context.ProductIds.Select(x=>(Guid?)x))"
                       SelectedValuesChanged="@(x=> context.ProductIds = x.Select(x=>x.Value).ToList())">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem T="Guid?" Value="@productModel.Id" />
                }
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Rack";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> RackIds { get; set; } = new List<Guid>();
    public List<RackModel> RackModels { get; set; } = new List<RackModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<RackModel> _selectedRacks = new HashSet<RackModel>();
    private bool _disableDelete => !_selectedRacks.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<RackModel> _tableRef;
    private RackModel _rackModelBeforeEdit { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private List<ZoneModel> _allZoneModels { get; set; } = [];
    private List<ProductModel> _allProductModels { get; set; } = [];

    private bool _isReadOnly = false;
    private bool _isReadPolicyExpired = false;
    
    protected override async Task OnInitializedAsync()
    {
        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        // check if user has read authorization
        var readPolicyString = DataAccessUtilities.GetPolicyString(AccessName.Read, DataTableName.Rack);
        _isReadPolicyExpired = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, readPolicyString);
        if (_isReadPolicyExpired)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(RackModel rackModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (rackModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteRacks()
    {
        var success = true;
        foreach (var rackModel in _selectedRacks)
        {
            var deleteRackCommand = new DeleteRackCommand(rackModel.Id);
            var result = await Mediator.Send(deleteRackCommand);

            if (result.Success)
            {
                RackIds.Remove(rackModel.Id);
                RackModels.Remove(rackModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Racks Deleted" : "Failed to delete racks");
    }

    private void BackupItem(object rackModel)
    {

        _rackModelBeforeEdit = new RackModel()
            {
                Id = ((RackModel)rackModel).Id,
                ProductIds = ((RackModel)rackModel).ProductIds,
                Name = ((RackModel)rackModel).Name,
                MaxWeight = ((RackModel)rackModel).MaxWeight,
                Width = ((RackModel)rackModel).Width,
                Depth = ((RackModel)rackModel).Depth,
                Height = ((RackModel)rackModel).Height,
                ZoneId = ((RackModel)rackModel).ZoneId,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object rackModel)
    {
        ((RackModel)rackModel).Id = _rackModelBeforeEdit.Id;
        ((RackModel)rackModel).Name = _rackModelBeforeEdit.Name;
        ((RackModel)rackModel).ProductIds = _rackModelBeforeEdit.ProductIds;
        ((RackModel)rackModel).MaxWeight = _rackModelBeforeEdit.MaxWeight;
        ((RackModel)rackModel).Width = _rackModelBeforeEdit.Width;
        ((RackModel)rackModel).Depth = _rackModelBeforeEdit.Depth;
        ((RackModel)rackModel).Height = _rackModelBeforeEdit.Height;
        ((RackModel)rackModel).ZoneId = _rackModelBeforeEdit.ZoneId;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object rackModel)
    {
        var updateRackDTO = new UpdateRackRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((RackModel)rackModel).Id,
                ProductIds = ((RackModel)rackModel).ProductIds,
                Name = ((RackModel)rackModel).Name,
                MaxWeight = ((RackModel)rackModel).MaxWeight,
                Width = ((RackModel)rackModel).Width,
                Depth = ((RackModel)rackModel).Depth,
                Height = ((RackModel)rackModel).Height,
                ZoneId = ((RackModel)rackModel).ZoneId,
            };
        var updateRackCommand = new UpdateRackCommand(updateRackDTO);
        var response = await Mediator.Send(updateRackCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateRackDialogAsync()
    {
        var parameters = new DialogParameters<CreateRackDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateRackDialog>("Create Rack", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var rackModelCreated = (RackModel)dialogResult.Data;
            if (rackModelCreated == null)
            {
                throw new Exception("Rack created is not recognized");

            }
            RackIds.Add(rackModelCreated.Id);
            RackModels.Add(rackModelCreated);
            StateHasChanged();
            SnackBar.Add($"{rackModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        var databaseHelper = new DatabaseHelper(Mediator, CurrentStaff.CompanyId);
        RackModels = await databaseHelper.GetRacks(RackIds);
        _allZoneModels = await databaseHelper.GetAllZones();
        _allProductModels = await databaseHelper.GetAllProducts();
        return true;
    }

    private async Task OpenZoneDialogAsync(List<Guid> zoneIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenZoneDialogAsync(zoneIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    private async Task OpenProductDialogAsync(List<Guid> productIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenProductDialogAsync(productIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}