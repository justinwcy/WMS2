<MudDialog>
    <TitleContent>
        Create Zone
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@_isFormValid">

            <MudSelect @bind-Value="_zoneModel.WarehouseId"
                       T="Guid?"
                       ToStringFunc="@(id=> _allWarehouseModels.FirstOrDefault(warehouseModel=>warehouseModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Warehouse"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Warehouse")
                       MultiSelection="false"
                       HelperText=@("Please select a warehouse")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a warehouse">
                @foreach (var warehouseModel in _allWarehouseModels)
                {
                    <MudSelectItem T="Guid?" Value="@warehouseModel.Id" />
                }
            </MudSelect>

            <MudTextField @bind-value="_zoneModel.Name"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Zone Name"
                          Required="true" RequiredError="Zone is required!"
                          Margin="Margin.Dense" />

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;

    private ZoneModel _zoneModel { get; set; } = new ZoneModel();

    [Parameter]
    public required CurrentUserModel CurrentStaff { get; set; }

    private List<WarehouseModel> _allWarehouseModels { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        var databaseHelper = new DatabaseHelper(Mediator, CurrentStaff.CompanyId);
        _allWarehouseModels = await databaseHelper.GetAllWarehouses();
    }

    private async Task Submit()
    {
        var createZoneDTO = new CreateZoneRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Name = _zoneModel.Name,
                WarehouseId = _zoneModel.WarehouseId,
                StaffIds = _zoneModel.StaffIds,
                RackIds = _zoneModel.RackIds,
            };
        var createZoneCommand = new CreateZoneCommand(createZoneDTO);
        var createdZoneResponseDTO = await Mediator.Send(createZoneCommand);

        var createdZoneModel = new ZoneModel()
            {
                Id = createdZoneResponseDTO.Id,
                Name = _zoneModel.Name,
                StaffIds = _zoneModel.StaffIds,
                WarehouseId = _zoneModel.WarehouseId,
                RackIds = _zoneModel.RackIds,
            };
        MudDialog.Close(DialogResult.Ok(createdZoneModel));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
