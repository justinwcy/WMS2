@inject IDialogService Dialog
@implements IPageComponent
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteZones"
        Color="Color.Error"
        Variant="Variant.Filled"
        Size="Size.Large"
        FullWidth="false"
        Disabled="_disableDelete">
            Delete Zone
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateZoneDialogAsync)"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        FullWidth="false">
            Create Zone
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
Filter="new Func<ZoneModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@ZoneModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedZones"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Zones</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 150px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
        <col style="min-width: 100px" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<ZoneModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<ZoneModel, object>(x => _allWarehouseModels.FirstOrDefault(warehouseModel => warehouseModel.Id == x.WarehouseId)?.Name)">
                Warehouse
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Staff</MudTh>
        <MudTh>Rack</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>

        <MudTd DataLabel="Warehouse">@_allWarehouseModels.FirstOrDefault(warehouseModel => warehouseModel.Id == @context.WarehouseId)?.Name</MudTd>

        <MudTd DataLabel="Staff">
            <MudButton OnClick="@(() => ViewDialogUtilities.OpenStaffDialogAsync(@context.StaffIds, CurrentStaff, Dialog))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.StaffIds.Count)
            </MudButton>
        </MudTd>

        <MudTd DataLabel="Rack">
            <MudButton OnClick="@(() => ViewDialogUtilities.OpenRackDialogAsync(@context.RackIds, CurrentStaff, Dialog))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.RackIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>

        <MudSelect @bind-Value="context.WarehouseId"
        T="Guid"
        ToStringFunc="@(id=> _allWarehouseModels.FirstOrDefault(warehouseModel=>warehouseModel.Id == id)?.Name)"
        Variant="@_defaultVariant"
        Label="Status"
        Margin="Margin.Normal"
        Dense="false"
        Disabled="false"
        ReadOnly="false"
        Placeholder=@("Warehouse")
        MultiSelection="false"
        HelperText=@("Please select a warehouse")
        HelperTextOnFocus="true"
        Clearable="false"
        Required="true"
        RequiredError="Please select a product">
            @foreach (var warehouseModel in _allWarehouseModels)
            {
                <MudSelectItem Value="@warehouseModel"/>
            }
        </MudSelect>

        <MudTd DataLabel="Staff"></MudTd>
        <MudTd DataLabel="Rack"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    [CascadingParameter(Name = "MainPage")]
    public IMainPage MainPage { get; set; }
    
    [CascadingParameter(Name = "PageComponents")]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> ZoneIds { get; set; } = new List<Guid>();
    public List<ZoneModel> ZoneModels { get; set; } = new List<ZoneModel>();

    [Parameter] public GetStaffResponseDTO? CurrentStaff { get; set; }

    private HashSet<ZoneModel> _selectedZones = new HashSet<ZoneModel>();
    private bool _disableDelete => !_selectedZones.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<ZoneModel> _tableRef;
    private ZoneModel _zoneModelBeforeEdit { get; set; }

    private List<WarehouseModel> _allWarehouseModels { get; set; } = [];
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !ZoneIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(ZoneModel zoneModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (zoneModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        var warehouseModel = _allWarehouseModels.FirstOrDefault(warehouseModel => warehouseModel.Id == zoneModel.WarehouseId);
        if (warehouseModel != null && warehouseModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteZones()
    {
        var success = true;
        foreach (var zoneModel in _selectedZones)
        {
            var deleteZoneCommand = new DeleteZoneCommand(zoneModel.Id);
            var result = await Mediator.Send(deleteZoneCommand);

            if (result.Success)
            {
                ZoneIds.Remove(zoneModel.Id);
                ZoneModels.Remove(zoneModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Zones Deleted" : "Failed to delete zones");
    }

    private void BackupItem(object zoneModel)
    {

        _zoneModelBeforeEdit = new ZoneModel()
        {
            Id = ((ZoneModel)zoneModel).Id,
            Name = ((ZoneModel)zoneModel).Name,
            StaffIds = ((ZoneModel)zoneModel).StaffIds,
            RackIds = ((ZoneModel)zoneModel).RackIds,
            WarehouseId = ((ZoneModel)zoneModel).WarehouseId,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object zoneModel)
    {
        ((ZoneModel)zoneModel).Id = _zoneModelBeforeEdit.Id;
        ((ZoneModel)zoneModel).Name = _zoneModelBeforeEdit.Name;
        ((ZoneModel)zoneModel).StaffIds = _zoneModelBeforeEdit.StaffIds;
        ((ZoneModel)zoneModel).RackIds = _zoneModelBeforeEdit.RackIds;
        ((ZoneModel)zoneModel).WarehouseId = _zoneModelBeforeEdit.WarehouseId;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object zoneModel)
    {
        var updateZoneDTO = new UpdateZoneRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = ((ZoneModel)zoneModel).Id,
            Name = ((ZoneModel)zoneModel).Name,
            StaffIds = ((ZoneModel)zoneModel).StaffIds,
            RackIds = ((ZoneModel)zoneModel).RackIds,
            WarehouseId = ((ZoneModel)zoneModel).WarehouseId,
        };
        var updateZoneCommand = new UpdateZoneCommand(updateZoneDTO);
        var response = await Mediator.Send(updateZoneCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateZoneDialogAsync()
    {
        var parameters = new DialogParameters<CreateZoneDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateZoneDialog>("Create Zone", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var zoneModelCreated = (ZoneModel)dialogResult.Data;
            if (zoneModelCreated == null)
            {
                throw new Exception("Zone created is not recognized");

            }

            ZoneIds.Add(zoneModelCreated.Id);
            ZoneModels.Add(zoneModelCreated);
            StateHasChanged();
            SnackBar.Add($"{zoneModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {

        foreach (var zoneId in ZoneIds)
        {
            var getZoneByIdQuery = new GetZoneByIdQuery(zoneId);
            var zoneDTO = await Mediator.Send(getZoneByIdQuery);

            var zoneModel = new ZoneModel()
                {
                    Id = zoneDTO.Id,
                    Name = zoneDTO.Name,
                    StaffIds = zoneDTO.StaffIds,
                    RackIds = zoneDTO.RackIds,
                    WarehouseId = zoneDTO.WarehouseId,
                };

            ZoneModels.Add(zoneModel);
        }

        // set warehouse ids
        var getAllWarehouseIdsByCompanyIdQuery = new GetAllWarehouseIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var warehouseIds = await Mediator.Send(getAllWarehouseIdsByCompanyIdQuery);
        foreach (var warehouseId in warehouseIds)
        {
            var getWarehouseByIdQuery = new GetWarehouseByIdQuery(warehouseId);
            var warehouseDTO = await Mediator.Send(getWarehouseByIdQuery);

            var warehouseModel = new WarehouseModel()
                {
                    Id = warehouseDTO.Id,
                    Name = warehouseDTO.Name,
                    Address = warehouseDTO.Address,
                    ZoneIds = warehouseDTO.ZoneIds,
                    CompanyId = warehouseDTO.CompanyId,
                };
            _allWarehouseModels.Add(warehouseModel);
        }
        return true;
    }
}

    