@page "/pages/authentication/register"
@using System.ComponentModel.DataAnnotations
@using Application.Constants
@using Infrastructure.Extensions.Identity
@using Microsoft.AspNetCore.Identity

@inject UserManager<WmsStaff> UserManager
@inject ILogger<Register> Logger
@inject IUserStore<WmsStaff> UserStore
@inject SignInManager<WmsStaff> SignInManager
@inject IdentityRedirectManager RedirectManager
<PageTitle>@Title</PageTitle>

<div class="d-flex flex-column gap-y-3">
    <div class="d-flex flex-column">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>
            <MudText>
                Have an account? <MudLink Href="@Login.PageUrl">Sign In</MudLink>
            </MudText>
            <StatusMessage Error="true" Message="@message"></StatusMessage>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText @bind-Value="Input.UserName" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" autocomplete="username" aria-required="true" placeholder="Username" />
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="userName">UserName</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => Input.UserName" class="mud-input-error" />
                    </div>
                </div>
            </div>


            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText @bind-Value="Input.Email" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" autocomplete="username" aria-required="true" placeholder="XXX@gmail.com" />
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="userName">E-mail</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => Input.Email" class="mud-input-error" />
                    </div>
                </div>
            </div>

            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText type="password" @bind-Value="Input.Password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="current-password" aria-required="true" placeholder="Password" />
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="password">Password</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => Input.Password" class="mud-input-error" />
                    </div>
                </div>
            </div>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="current-password" aria-required="true" placeholder="Confirm Password" />
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="password">Confirm Password</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => Input.ConfirmPassword" class="mud-input-error" />
                    </div>
                </div>
            </div>
            
            <div Class="d-flex justify-space-between align-center mb-1">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.AgreeToTerms" class="form-check-input" />
                    I agree to the terms and privacy
                </label>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => Input.AgreeToTerms" class="mud-input-error" />
                    </div>
                </div>
            </div>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       ButtonType="ButtonType.Submit"
                       FullWidth="true">
                <MudText>Register</MudText>
            </MudButton>
        </EditForm>
    </div>
</div>

@code {

    public const string PageUrl = "/pages/authentication/register";
    private string Title = "Sign Up";

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    private string? message;


    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        Title = "Sign Up";
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            message = string.Join(", ", result.Errors.Select(error => error.Description));
            return;
        }

        var newUserRole = StaffRole.Admin;
        result = await UserManager.AddToRoleAsync(user, newUserRole);
        if (!result.Succeeded)
        {
            message = string.Join(", ", result.Errors.Select(error => error.Description));
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation($"New user account created. Username: {Input.UserName}, User ID: {userId}, Assigned Role: {newUserRole}.");

        await SignInManager.SignInAsync(user, false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private WmsStaff CreateUser()
    {
        try
        {
            return Activator.CreateInstance<WmsStaff>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(WmsStaff)}'. " +
                                                $"Ensure that '{nameof(WmsStaff)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<WmsStaff> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<WmsStaff>)UserStore;
    }

    public sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
        public string UserName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        [RegularExpression("^.*(?=.{6,100})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!*@#$%^&+=]).*$",
            ErrorMessage = "Password must contain at least one lowercase letter, " +
                           "one uppercase letter, one digit, one special character, " +
                           "contain at least 6 to 100 characters")]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; } = "";

        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms.")]
        public bool AgreeToTerms { get; set; } = true;
    }

}