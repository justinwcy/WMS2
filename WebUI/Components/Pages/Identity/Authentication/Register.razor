@page "/pages/authentication/register"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Application.Constants
@using Application.DTO.Request
@using Application.Service.Commands
@using Application.Service.Queries
@using WebUI.Components.Models

<PageTitle>@_title</PageTitle>

<MudForm @ref="_form" @bind-IsValid="@_isFormValid">
    <MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>
    <MudText Class="mb-3">
        Have an account? <MudLink Href="@Login.PageUrl">Sign In</MudLink>
    </MudText>
    <MudGrid>
        <MudItem xs="6">
            <MudTextField @bind-value="_inputModel.FirstName" 
                          Variant="@_defaultVariant"
                          T="string"
                          Label="First Name"
                          Required="true" RequiredError="First name is required!"/>
        </MudItem>
        <MudItem xs="6">
            <MudTextField @bind-value="_inputModel.LastName"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Last Name"
                          Required="true" RequiredError="Last name is required!"/>
        </MudItem>
    </MudGrid>

    <MudTextField @bind-value="_inputModel.Email"
        Variant="@_defaultVariant"
        T="string"
        Label="Email"
        Required="true" RequiredError="Email is required!"
        Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>

    <MudTextField @bind-value="_inputModel.Password" 
                  Variant="@_defaultVariant"
                  T="string" Label="Password" @ref="passwordField"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Password is required!"/>

    <MudTextField @bind-value="_inputModel.ConfirmPassword" 
                  Variant="@_defaultVariant"
                  T="string"
                  Label="Confirm Password" InputType="InputType.Password"
                  Validation="@(new Func<string, string>(PasswordMatch))"/>

    <MudSelect @bind-Value="_inputModel.RolesString"
               Variant="@_defaultVariant"
               Label="Role"
               Margin="Margin.Normal"
               Dense="false"
               Disabled="false"
               ReadOnly="false"
               Placeholder=@("User Role")
               MultiSelection="true"
               HelperText=@("Please select a role for the user")
               HelperTextOnFocus="true"
               Clearable="false"
               Required="true"
               RequiredError="Please select a role for the user">
        @foreach (var staffRoles in _allStaffRoles)
        {
            <MudSelectItem Value="staffRoles">@staffRoles</MudSelectItem>
        }
    </MudSelect>

    <MudButton 
        OnClick="@RegisterUser"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        Disabled="@(!_isFormValid)"
        FullWidth="true">
        Register
    </MudButton>
</MudForm>
@code {
    public const string PageUrl = "/pages/authentication/register";
    private const string _title = "Sign Up";

    private bool _isFormValid { get; set; } = false;
    private MudForm _form;
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();
    private List<string> _allStaffRoles = new();

    private StaffModel _inputModel { get; set; } = new();

    private MudTextField<string> passwordField;

    protected override async Task OnInitializedAsync()
    {
        var query = new GetAllStaffRolesQuery();
        var allStaffRoles = await Mediator.Send(query);
        _allStaffRoles = allStaffRoles.ToList();
    }

    private IEnumerable<string> PasswordStrength(string passwordString)
    {
        if (string.IsNullOrWhiteSpace(passwordString))
        {
            yield return "Password is required!";
            yield break;
        }

        if (passwordString.Length < 6)
            yield return "Password must be at least of length 6";
        if (!Regex.IsMatch(passwordString, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(passwordString, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(passwordString, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string passwordString)
    {
        if (passwordField.Value != passwordString)
            return "Passwords don't match";
        return null;
    }

    public async Task RegisterUser()
    {
        var createStaffRequestDTO = new CreateStaffRequestDTO()
        {
            CompanyId = DebugConstants.CompanyId,
            CreatedBy = DebugConstants.AdminId,
            FirstName = _inputModel.FirstName,
            LastName = _inputModel.LastName,
            Email = _inputModel.Email,
            Roles = _inputModel.GetRoleList(),
            Password = _inputModel.Password,
            ConfirmPassword = _inputModel.ConfirmPassword,
        };
        var command = new CreateStaffCommand(createStaffRequestDTO);

        try
        {
            await Mediator.Send(command);
        }
        catch (Exception exception)
        {
            SnackBar.Add($"{exception.Message}");
            return;
        }
        
        SnackBar.Add($"{_inputModel.Email} successfully created");
        NavigationManager.NavigateTo(Login.PageUrl);
    }
}