@page "/pages/authentication/login"
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@using Infrastructure.Extensions.Identity
@using Microsoft.AspNetCore.Identity

@inject ILogger<Login> Logger
@inject UserManager<WmsStaff> UserManager
@inject SignInManager<WmsStaff> SignInManager

<PageTitle>@_title</PageTitle>

<div class="d-flex flex-column gap-y-3">
    <div class="d-flex flex-column">
        <EditForm Model="Input" method="post" OnValidSubmit="OnSubmit" FormName="login" Enhance>
            <DataAnnotationsValidator/>
            <MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>
            <MudText>
                Don't have an account? <MudLink Href="@Register.PageUrl" Target="_self">Sign Up</MudLink>
            </MudText>
            <StatusMessage Message="@_errorMessage" Error="true"/>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText @bind-Value="Input.UserName" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" autocomplete="username" aria-required="true" placeholder="Username"/>
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="userName">Username</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => Input.UserName" class="mud-input-error"/>
                    </div>
                </div>
            </div>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText type="password" @bind-Value="Input.Password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="current-password" aria-required="true" placeholder="Password"/>
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="password">Password</label>
                </div>
                <div class="mud-input-helper-text mud-input-error">
                    <div class="d-flex">
                        <ValidationMessage For="() => Input.Password" class="mud-input-error"/>
                    </div>
                </div>
            </div>
            <div Class="d-flex justify-space-between align-center mb-1">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input"/>
                    Remember me
                </label>
            </div>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       ButtonType="ButtonType.Submit"
                       FullWidth="true">
                <MudText>Sign In</MudText>
            </MudButton>
        </EditForm>

    </div>
</div>

@code {
    public const string PageUrl = "/pages/authentication/login";
    private string? _errorMessage;
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    private string _title = "Sign In";

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new()
    {
        UserName = "justinwcy",
        Password = "123asd!@#ASD",
        RememberMe = true
    };

    protected override async Task OnInitializedAsync()
    {
        _title = "Sign In";
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private void RedirectTo(string redirectionUrl)
    {
        ArgumentNullException.ThrowIfNull(HttpContext);
        HttpContext.Response.Headers.Append("blazor-enhanced-nav-redirect-location", redirectionUrl);
        HttpContext.Response.StatusCode = 200;
    }

    public async Task OnSubmit()
    {
        // Check if the user exists
        var user = await UserManager.FindByNameAsync(Input.UserName);
        if (user == null)
        {
            _errorMessage = "Error: User does not exist.";
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            // Set the language cookie if user.LanguageCode is not null or empty
            Logger.LogInformation($"{Input.UserName} has logged in.");
            RedirectTo(ReturnUrl);
        }
        else
        {
            _errorMessage = "Error: Invalid login attempt.";
        }
    }

    public sealed class InputModel
    {
        [Required(ErrorMessage = "Username cannot be empty")]
        [StringLength(100, ErrorMessage = "Name length can't be more than 100.")]
        public string UserName { get; set; } = "";

        [Required(ErrorMessage = "Password cannot be empty")]
        [StringLength(100, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = true;
    }

}