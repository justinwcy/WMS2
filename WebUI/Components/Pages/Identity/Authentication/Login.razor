@page "/pages/authentication/login"
@using System.ComponentModel.DataAnnotations
@using Application.DTO.Request.Identity
@using Application.Service.Commands
@using Infrastructure.Extensions.Identity
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WebUI.Services

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject UserManager<WmsStaff> UserManager
@inject SignInManager<WmsStaff> SignInManager

<PageTitle>@_title</PageTitle>

<MudForm @bind-IsValid="@_isFormValid">
    <MudTextField @bind-value="_loginModel.Email"
                  Variant="@_defaultVariant"
                  T="string"
                  Label="Email"
                  Required="true" RequiredError="Email is required!"
                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>

    <MudTextField @bind-value="_loginModel.Password"
                  Variant="@_defaultVariant"
                  T="string" Label="Password"
                  InputType="InputType.Password"
                  Required="true"
                  RequiredError="Password is required!"/>
    
    <MudSwitch @bind-Value="_loginModel.RememberMe" Label="Remember Me" Color="Color.Primary"/>
    
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Size="Size.Large"
               Disabled="@(!_isFormValid)"
               OnClick="@LoginUser"
               FullWidth="true">
        <MudText>Sign In</MudText>
    </MudButton>
</MudForm>

@code {
    public const string PageUrl = "/pages/authentication/login";

    private bool _isFormValid { get; set; } = true;
    private const Variant _defaultVariant = Variant.Text;
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    private const string _title = "Sign In";

    private LoginModel _loginModel { get; set; } = new()
    {
        Email = "master@control.com",
        Password = "123asd!@#ASD",
        RememberMe = true
    };

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var checkLoginStaffRequestDTO = new CheckLoginStaffRequestDTO()
        {
            Email = _loginModel.Email,
            Password = _loginModel.Password,
            RememberMe = _loginModel.RememberMe,
        };
        var checkLoginStaffCommand = new CheckLoginStaffCommand(checkLoginStaffRequestDTO);
        var result = await Mediator.Send(checkLoginStaffCommand);

        if (result.Success)
        {
            var key = Guid.NewGuid();
            var loginStaffRequestDTO = new LoginStaffRequestDTO()
            {
                Email = _loginModel.Email,
                Password = _loginModel.Password,
                RememberMe = _loginModel.RememberMe,
            };
            BlazorCookieLoginMiddleware.LoginDetails[key] = loginStaffRequestDTO;
            NavigationManager.NavigateTo($"/login?key={key}", true);
        }
        else
        {
            Snackbar.Add(result.Message);
        }
    }

    public sealed class LoginModel
    {
        public string Email { get; set; } = "";

        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = true;
    }

}