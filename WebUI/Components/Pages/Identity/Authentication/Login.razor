@page "/Account/login"
@using Application.DTO.Request.Identity
@using Microsoft.AspNetCore.Authentication

<PageTitle>@_title</PageTitle>

<StatusMessage Message="@errorMessage" />
<EditForm Model="_loginModel" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

    <MudStack Row="false">
        <MudStaticTextField For="@(() => _loginModel.Email)"
                            @bind-Value="_loginModel.Email"
                            Variant="@_defaultVariant"
                            Label="Email"
                            Placeholder="name@email.com"
                            UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } })"/>

        <MudStaticTextField For="@(() => _loginModel.Password)"
                            @bind-Value="_loginModel.Password"
                            Label="Password"
                            InputType="InputType.Password"
                            Placeholder="Password"
                            UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })"/>

        <MudStaticSwitch For="@(() => _loginModel.RememberMe)"
                         @bind-Value="_loginModel.RememberMe"
                         Label="Remember me"
                         Color="Color.Primary"/>

        <MudStaticButton Variant="Variant.Filled"
                         Color="Color.Primary"
                         FullWidth="true"
                         FormAction="FormAction.Submit">Log in</MudStaticButton>
    </MudStack>
</EditForm>

@code {

    private string? errorMessage;

    public const string PageUrl = "/Account/login";

    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    [CascadingParameter] 
    private HttpContext HttpContext { get; set; } = default!;

    private const string _title = "Sign In";

    [SupplyParameterFromForm]
    private LoginModel _loginModel { get; set; } = new()
    {
        Email = "",
        Password = "",
        RememberMe = true
    };

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var loginStaffRequestDTO = new LoginStaffRequestDTO()
        {
            Email = _loginModel.Email,
            Password = _loginModel.Password,
            RememberMe = _loginModel.RememberMe,
        };
        var loginStaffCommand = new LoginStaffCommand(loginStaffRequestDTO);
        var response = await Mediator.Send(loginStaffCommand);

        if (response.Success)
        {
            HttpContext.Response.Redirect("/");
            //RedirectManager.RedirectTo("/");
            //NavigationManager.NavigateTo($"/", true);
        }
        else
        {
            errorMessage = $"Error: {response.Message}";
        }
    }

    public sealed class LoginModel
    {
        [Required]
        [EmailAddress(ErrorMessage = "The email address is invalid")]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = true;
    }

}