@page "/Carousel"

<MudGrid Spacing="5" Justify="Justify.Center">
    <MudItem xs="8">
        <MudCarousel @ref="_allCarousels[index]"
        ItemsSource="@ProductPhotos"
        Style="height:200px;"
        ShowArrows="true"
        ShowBullets="true"
        EnableSwipeGesture="true"
        AutoCycle="false">
            <ItemTemplate>
                <div class="d-flex flex-column flex-column justify-center">
                    <MudImage ObjectFit="ObjectFit.ScaleDown"
                    Elevation="25"
                    Height="200"
                    Class="rounded-lg"
                    Src=@context />
                </div>
            </ItemTemplate>
        </MudCarousel>
    </MudItem>

    <MudItem xs="4">
        <MudFileUpload T="IBrowserFile" OnFilesChanged="AddPhotoAsync" Accept="image/png, image/jpeg">
            <ActivatorContent>
                <MudButton Class="ma-2"
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.CloudUpload"
                FullWidth="true">
                    Upload Product Photo
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
        <br />
        <MudButton Class="ma-2"
        Variant="Variant.Filled"
        Color="Color.Error"
        OnClick="@(async () => await DeleteAsync(_allCarousels[index].SelectedIndex))"
        FullWidth="true">
            Delete Photo
        </MudButton>
    </MudItem>
</MudGrid>

@code {

    private int index = 0;
    private readonly Dictionary<int, MudCarousel<string>> _allCarousels = new();
    //private MudCarousel<string> _carousel;
    private IList<string> ProductPhotos = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _allCarousels[index] = new MudCarousel<string>();
    }

    private async Task AddPhotoAsync(InputFileChangeEventArgs args)
    {
        var imageFile = args.File;
        var imageString = await ConvertToBase64String(imageFile);
        ProductPhotos.Add(imageString);
        _allCarousels[index].MoveTo(ProductPhotos.Count - 1);
    }

    private async Task DeleteAsync(int index)
    {
        if (ProductPhotos.Any())
        {
            ProductPhotos.RemoveAt(index);
            await Task.Delay(1);
            _allCarousels[index].MoveTo(Math.Max(Math.Min(index, ProductPhotos.Count - 1), 0));
        }
    }

    public static async Task<string> ConvertToBase64String(IBrowserFile file)
    {
        var memoryStream = new MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(memoryStream);

        return await ConvertToBase64String(memoryStream);
    }

    public static async Task<string> ConvertToBase64String(Stream stream)
    {
        var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        return await ConvertToBase64String(memoryStream);
    }

    private static async Task<string> ConvertToBase64String(MemoryStream memoryStream)
    {
        var bytes = new byte[memoryStream.Length];
        memoryStream.Position = 0;
        await memoryStream.ReadAsync(bytes);
        memoryStream.Close();
        return $"data:image/jpeg;base64,{Convert.ToBase64String(bytes)}";
    }
}