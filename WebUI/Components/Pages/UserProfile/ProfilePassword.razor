@using WebUI.Components.Models
@using Application.Service.Queries
@using Application.DTO.Request
@using Application.Service.Commands
@using WebUI.Components.Pages.Identity.Authentication
@using System.Text.RegularExpressions
@using Application.Constants
@using Application.DTO.Request.Identity
<MudForm @bind-IsValid="@_isFormValid">
    <MudTextField @bind-value="_passwordModel.CurrentPassword"
                  Variant="@_defaultVariant"
                  T="string" Label="Current Password"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Password is required!" />

    <MudTextField @bind-value="_passwordModel.NewPassword"
                  Variant="@_defaultVariant"
                  T="string" Label="New Password" @ref="passwordField"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Password is required!"/>

    <MudTextField
        @bind-value="_passwordModel.ConfirmNewPassword"
                  Variant="@_defaultVariant"
                  T="string"
                  Label="Confirm New Password" InputType="InputType.Password"
                  Validation="@(new Func<string, string>(PasswordMatch))"/>

    <MudButton Class="mt-3"
        OnClick="@UpdatePassword"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        Disabled="!_isFormValid"
        FullWidth="true">
        Update Details
    </MudButton>
</MudForm>

@code {
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;

    private PasswordModel? _passwordModel { get; set; } = new PasswordModel();
    private MudTextField<string> passwordField;

    private IEnumerable<string> PasswordStrength(string passwordString)
    {
        if (string.IsNullOrWhiteSpace(passwordString))
        {
            yield return "Password is required!";
            yield break;
        }

        if (passwordString.Length < 6)
            yield return "Password must be at least of length 6";
        if (!Regex.IsMatch(passwordString, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(passwordString, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(passwordString, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string passwordString)
    {
        if (passwordField.Value != passwordString)
            return "Passwords don't match";
        return null;
    }

    private async Task UpdatePassword()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdentity = authenticationState.User.Identity;
        var changePasswordStaffRequestDTO = new ChangePasswordStaffRequestDTO()
        {
            CurrentPassword = _passwordModel.CurrentPassword,
            Email = userIdentity.Name,
            NewPassword = _passwordModel.NewPassword,
        };

        var changePasswordStaffCommand = new ChangePasswordStaffCommand(changePasswordStaffRequestDTO);
        var response = await Mediator.Send(changePasswordStaffCommand);

        SnackBar.Add(response.Message);
    }

    public class PasswordModel
    {
        public string CurrentPassword { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmNewPassword { get; set; }
    }
}
