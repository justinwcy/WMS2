@page "/products"
@inject IDialogService Dialog
@using Application.Service.Queries
@using WebUI.Components.Models
<MudGrid>
    <MudItem xs="8">
        <MudButton 
            Color="Color.Error"
            Variant="Variant.Filled"
            Size="Size.Large"
            FullWidth="false">
            Delete Product
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateProductDialogAsync)"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Size="Size.Large"
                   FullWidth="false">
            Create Product
        </MudButton>
    </MudItem>
    <MudItem xs="1">
        <MudTooltip Arrow="true" Text=@_expandCollapseTooltip>
            <MudToggleIconButton Style="text-align: right;"
                                 Color="@Color.Default"
                                 Icon="@Icons.Material.Filled.ExpandCircleDown"
                                 Size="Size.Medium"
                                 Toggled="_isExpandCollapse"
                                 ToggledChanged="ToggleExpandCollapse"
                                 ToggledColor="@Color.Default"
                                 ToggledIcon="@Icons.Material.Filled.ExpandLess"/>
        </MudTooltip>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
          Filter="new Func<ProductModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@_products"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedProducts" 
          SelectOnRowClick="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.End" 
          EditButtonPosition="TableEditButtonPosition.End" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col/>
        <col style="min-width: 400px"/>
        <col/>
        <col/>
        <col/>
        <col/>
        <col/>
        <col/>
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Counter)">No.</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Sku)">SKU</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Price)">Price (RM)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Tag)">Tag</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Weight)">Weight (g)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Height)">Height (cm)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Length)">Length (cm)</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ProductModel, object>(x=>x.Width)">Width (cm)</MudTableSortLabel></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh colspan="@_numberOfColumns"><b>@($"{((ProductGroupModel)context.Key!)?.Name} - {((ProductGroupModel)context.Key!)?.Description}")</b></MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Counter</MudTd>
        <MudTd DataLabel="SKU">@context.Sku</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Price (RM)">@context.Price</MudTd>
        <MudTd DataLabel="Tag">@context.Tag</MudTd>
        <MudTd DataLabel="Weight (g)">@context.Weight</MudTd>
        <MudTd DataLabel="Height (cm)">@context.Height</MudTd>
        <MudTd DataLabel="Length (cm)">@context.Length</MudTd>
        <MudTd DataLabel="Width (cm)">@context.Width</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Style="text-align: right;" colspan="@_numberOfColumns"><b>Total Items: @context.Items.Count()</b></MudTh>
    </GroupFooterTemplate>
    
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right"
                       />
    </PagerContent>
</MudTable>

@code {

    private string _numberOfColumns = "10";
    private List<ProductModel> _products { get; set; } = new List<ProductModel>();
    private HashSet<ProductModel> _selectedProducts = new HashSet<ProductModel>();

    private bool _isExpandCollapse { get; set; }
    private string _expandCollapseTooltip { get; set; } = "Expand all rows";
    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<ProductModel> _tableRef;
    private readonly TableGroupDefinition<ProductModel> _groupDefinition = new()
    {
        GroupName = "",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false, 
        Selector = (productModel) => productModel.ProductGroup,
    };

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await base.OnInitializedAsync();
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdentity = authenticationState.User.Identity;

        if (userIdentity != null && userIdentity.Name != null)
        {
            var getStaffIdByEmailQuery = new GetStaffIdByEmailQuery(userIdentity.Name);
            var staffId = await Mediator.Send(getStaffIdByEmailQuery);
            var getStaffByIdQuery = new GetStaffByIdQuery(staffId);
            var getStaffResponseDTO = await Mediator.Send(getStaffByIdQuery);
            
            var getAllProductGroupByCompanyId = new GetAllProductGroupByCompanyIdQuery(getStaffResponseDTO.CompanyId);
            var allProductGroupsDTO = await Mediator.Send(getAllProductGroupByCompanyId);

            
            foreach (var productGroupDTO in allProductGroupsDTO)
            {
                var productGroupId = productGroupDTO.Id;
                var productGroupName = productGroupDTO.Name;
                var productGroupDescription = productGroupDTO.Description;
                var productIds = productGroupDTO.ProductIds;
                var productGroupModel = new ProductGroupModel()
                {
                    Id = productGroupId,
                    Name = productGroupName,
                    Description = productGroupDescription
                };

                var counter = 1;
                foreach (var productId in productIds)
                {
                    var getProductByIdQuery = new GetProductByIdQuery(productId);
                    var productDTO = await Mediator.Send(getProductByIdQuery);

                    var productModel = new ProductModel()
                    {
                        Counter = counter,
                        ProductGroup = productGroupModel,
                        Description = productDTO.Description,
                        Name = productDTO.Name,
                        Height = productDTO.Height,
                        Length = productDTO.Length,
                        Width = productDTO.Width,
                        Price = decimal.Round(productDTO.Price, 2, MidpointRounding.AwayFromZero),
                        Sku = productDTO.Sku,
                        Tag = productDTO.Tag,
                        Weight = productDTO.Weight,
                    };

                    _products.Add(productModel);
                    counter++;
                }
            }
        }

        _loading = false;
    }

    private bool FilterFunc(ProductModel productModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (productModel.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (productModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (productModel.Sku.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (productModel.Tag.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void ToggleExpandCollapse()
    {
        if (_isExpandCollapse)
        {
            _tableRef.CollapseAllGroups();
            _expandCollapseTooltip = "Collapse all rows";
        }
        else
        {
            
            _tableRef.ExpandAllGroups();
            _expandCollapseTooltip = "Expand all rows";


        }
        _isExpandCollapse = !_isExpandCollapse;
    }

    private void BackupItem(object element)
    {
        // elementBeforeEdit = new()
        // {
        //     Sign = ((Element)element).Sign,
        //     Name = ((Element)element).Name,
        //     Molar = ((Element)element).Molar,
        //     Position = ((Element)element).Position
        // };
        // AddEditionEvent($"RowEditPreview event: made a backup of Element {((Element)element).Name}");
    }

    private void ResetItemToOriginalValues(object element)
    {
        // ((Element)element).Sign = elementBeforeEdit.Sign;
        // ((Element)element).Name = elementBeforeEdit.Name;
        // ((Element)element).Molar = elementBeforeEdit.Molar;
        // ((Element)element).Position = elementBeforeEdit.Position;
        // AddEditionEvent($"RowEditCancel event: Editing of Element {((Element)element).Name} canceled");
    }

    private void ItemHasBeenCommitted(object element)
    {
        // AddEditionEvent($"RowEditCommit event: Changes to Element {((Element)element).Name} committed");
    }

    private async Task OpenCreateProductDialogAsync()
    {
        var maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await Dialog.ShowAsync<CreateProductDialog>("Create Product", maxWidth);
        var dialogResult = await dialog.Result;
        
        if (dialogResult != null && !dialogResult.Canceled)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    private void AddEditionEvent(string message)
    {
        StateHasChanged();
    }
}
