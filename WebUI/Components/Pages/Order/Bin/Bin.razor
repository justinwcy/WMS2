@inject IDialogService Dialog
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="9">
        @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteBins"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="false"
                       Disabled="_disableDelete">
                Delete Bin
            </MudButton>
        }
    </MudItem>
    <MudItem xs="3">
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateBinDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="false">
                Create Bin
            </MudButton>
        }
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
          Filter="new Func<BinModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@BinModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedBins"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Bins</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<BinModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh>Customer Orders</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Customer Orders">
            <MudButton OnClick="@(() => OpenCustomerOrderDialogAsync(@context.CustomerOrderIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.CustomerOrderIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>

        <MudTd DataLabel="Customer Orders"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "Bin";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> BinIds { get; set; } = new List<Guid>();
    public List<BinModel> BinModels { get; set; } = new List<BinModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<BinModel> _selectedBins = new HashSet<BinModel>();
    private bool _disableDelete => !_selectedBins.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<BinModel> _tableRef;
    private BinModel _binModelBeforeEdit { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !BinIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(BinModel binModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (binModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteBins()
    {
        var success = true;
        foreach (var binModel in _selectedBins)
        {
            var deleteBinCommand = new DeleteBinCommand(binModel.Id);
            var result = await Mediator.Send(deleteBinCommand);

            if (result.Success)
            {
                BinIds.Remove(binModel.Id);
                BinModels.Remove(binModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Bins Deleted" : "Failed to delete bins");
    }

    private void BackupItem(object binModel)
    {

        _binModelBeforeEdit = new BinModel()
            {
                Id = ((BinModel)binModel).Id,
                Name = ((BinModel)binModel).Name,
                CustomerOrderIds = ((BinModel)binModel).CustomerOrderIds,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object binModel)
    {
        ((BinModel)binModel).Id = _binModelBeforeEdit.Id;
        ((BinModel)binModel).Name = _binModelBeforeEdit.Name;
        ((BinModel)binModel).CustomerOrderIds = _binModelBeforeEdit.CustomerOrderIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object binModel)
    {
        var binModelConverted = (BinModel)binModel;
        var updateBinDTO = new UpdateBinRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = binModelConverted.Id,
                Name = binModelConverted.Name,
                CustomerOrderIds = binModelConverted.CustomerOrderIds,
            };
        var updateBinCommand = new UpdateBinCommand(updateBinDTO);
        var response = await Mediator.Send(updateBinCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateBinDialogAsync()
    {
        var parameters = new DialogParameters<CreateBinDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateBinDialog>("Create Bin", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var binModelCreated = (BinModel)dialogResult.Data;
            if (binModelCreated == null)
            {
                throw new Exception("Bin created is not recognized");
            }
            BinIds.Add(binModelCreated.Id);
            BinModels.Add(binModelCreated);
            StateHasChanged();
            SnackBar.Add($"{binModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        BinModels.Clear();
        foreach (var binId in BinIds)
        {
            var getBinByIdQuery = new GetBinByIdQuery(binId);
            var binDTO = await Mediator.Send(getBinByIdQuery);

            var binModel = new BinModel()
                {
                    Id = binDTO.Id,
                    Name = binDTO.Name,
                    CustomerOrderIds = binDTO.CustomerOrderIds
                };

            BinModels.Add(binModel);
        }
        return true;
    }

    private async Task OpenCustomerOrderDialogAsync(List<Guid> customerOrderIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenCustomerOrderDialogAsync(customerOrderIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }
}