@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.Customer)>
            @if (ShowDeleteButton)
            {
                <MudButton OnClick="@DeleteCustomers"
                           Color="Color.Error"
                           Variant="Variant.Filled"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="_disableDelete">
                    Delete Customer
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.Customer)>
            @if (ShowCreateButton)
            {
                <MudButton OnClick="@(OpenCreateCustomerDialogAsync)"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true">
                    Create Customer
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly" 
          Hover="true" FixedHeader="true"
          Filter="new Func<CustomerModel, bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@CustomerModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedCustomers"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        @for (var i = 0; i < 2; i++)
        {
            <col style="min-width:200px;"/>
        }

        @for (var i = 0; i < 3; i++)
        {
            <col style="min-width:250px;"/>
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.LastName)">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerModel, object>(x => x.Address)">Address</MudTableSortLabel></MudTh>
        <MudTh>Customer Orders</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Customer Orders">
            <MudButton OnClick="@(() => OpenCustomerOrderDialogAsync(@context.CustomerOrderIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.CustomerOrderIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="First Name">
            <MudTextField @bind-Value="context.FirstName" Required/>
        </MudTd>

        <MudTd DataLabel="Last Name">
            <MudTextField @bind-Value="context.LastName" Required/>
        </MudTd>

        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="context.Email" Required/>
        </MudTd>

        <MudTd DataLabel="Address">
            <MudTextField @bind-Value="context.Address" Required/>
        </MudTd>

        <MudTd DataLabel="Customer Orders">
            <MudButton OnClick="@(() => OpenCustomerOrderDialogAsync(@context.CustomerOrderIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.CustomerOrderIds.Count)
            </MudButton>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right"/>
    </PagerContent>
</MudTable>

@code {

    public string Name => "Customer";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> CustomerIds { get; set; } = new List<Guid>();
    public List<CustomerModel> CustomerModels { get; set; } = new List<CustomerModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<CustomerModel> _selectedCustomers = new HashSet<CustomerModel>();
    private bool _disableDelete => !_selectedCustomers.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<CustomerModel> _tableRef;
    private CustomerModel _customerModelBeforeEdit { get; set; }

    private bool _isReadOnly = false;
    
    protected override async Task OnInitializedAsync()
    {
        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(CustomerModel customerModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customerModel.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customerModel.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customerModel.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customerModel.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteCustomers()
    {
        var success = true;
        foreach (var customerModel in _selectedCustomers)
        {
            var deleteCustomerCommand = new DeleteCustomerCommand(customerModel.Id);
            var result = await Mediator.Send(deleteCustomerCommand);

            if (result.Success)
            {
                CustomerIds.Remove(customerModel.Id);
                CustomerModels.Remove(customerModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Customers Deleted" : "Failed to delete customers");
    }

    private void BackupItem(object customerModel)
    {

        _customerModelBeforeEdit = new CustomerModel()
            {
                Id = ((CustomerModel)customerModel).Id,
                FirstName = ((CustomerModel)customerModel).FirstName,
                LastName = ((CustomerModel)customerModel).LastName,
                Email = ((CustomerModel)customerModel).Email,
                Address = ((CustomerModel)customerModel).Address,
                CustomerOrderIds = ((CustomerModel)customerModel).CustomerOrderIds,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object customerModel)
    {
        ((CustomerModel)customerModel).Id = _customerModelBeforeEdit.Id;
        ((CustomerModel)customerModel).FirstName = _customerModelBeforeEdit.FirstName;
        ((CustomerModel)customerModel).LastName = _customerModelBeforeEdit.LastName;
        ((CustomerModel)customerModel).Email = _customerModelBeforeEdit.Email;
        ((CustomerModel)customerModel).Address = _customerModelBeforeEdit.Address;
        ((CustomerModel)customerModel).CustomerOrderIds = _customerModelBeforeEdit.CustomerOrderIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object customerModel)
    {
        var updateCustomerDTO = new UpdateCustomerRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((CustomerModel)customerModel).Id,
                FirstName = ((CustomerModel)customerModel).FirstName,
                LastName = ((CustomerModel)customerModel).LastName,
                Email = ((CustomerModel)customerModel).Email,
                Address = ((CustomerModel)customerModel).Address,
                CustomerOrderIds = ((CustomerModel)customerModel).CustomerOrderIds,
            };
        var updateCustomerCommand = new UpdateCustomerCommand(updateCustomerDTO);
        var response = await Mediator.Send(updateCustomerCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateCustomerDialogAsync()
    {
        var parameters = new DialogParameters<CreateCustomerDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateCustomerDialog>("Create Customer", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var customerModelCreated = (CustomerModel)dialogResult.Data;
            if (customerModelCreated == null)
            {
                throw new Exception("Customer created is not recognized");

            }

            CustomerIds.Add(customerModelCreated.Id);
            CustomerModels.Add(customerModelCreated);
            StateHasChanged();
            SnackBar.Add($"{customerModelCreated.FirstName} {customerModelCreated.LastName} created");
        }
    }

    public async Task<bool> FetchData()
    {
        CustomerModels.Clear();
        foreach (var customerId in CustomerIds)
        {
            var getCustomerByIdQuery = new GetCustomerByIdQuery(customerId);
            var customerDTO = await Mediator.Send(getCustomerByIdQuery);

            var customerModel = new CustomerModel()
                {
                    Id = customerDTO.Id,
                    Address = customerDTO.Address,
                    Email = customerDTO.Email,
                    FirstName = customerDTO.FirstName,
                    LastName = customerDTO.LastName,
                    CustomerOrderIds = customerDTO.CustomerOrderIds,
                };

            CustomerModels.Add(customerModel);
        }
        return true;
    }

    private async Task OpenCustomerOrderDialogAsync(List<Guid> productIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenCustomerOrderDialogAsync(productIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}