@inject IDialogService Dialog
@implements IPageComponent
@using System.Reflection
@using Application.Constants
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteCustomerOrderDetails"
        Color="Color.Error"
        Variant="Variant.Filled"
        Size="Size.Large"
        FullWidth="false"
        Disabled="_disableDelete">
            Delete Customer Order Detail
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateCustomerOrderDetailDialogAsync)"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        FullWidth="false">
            Create Customer Order Detail
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
Filter="new Func<CustomerOrderDetailModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@CustomerOrderDetailModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedCustomerOrderDetails"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Customer Order Details</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 150px" />
        <col style="min-width: 200px" />
        <col style="min-width: 100px" />
        <col style="min-width: 150px" />
        <col style="min-width: 100px" />
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerOrderDetailModel, object>(x => _allProductModels.FirstOrDefault(productModel => productModel.Id == x.ProductId).Name)">
                Product
            </MudTableSortLabel>
        </MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerOrderDetailModel, object>(x=>x.Quantity)">Quantity</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerOrderDetailModel, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Product">@_allProductModels.FirstOrDefault(productModel => productModel.Id == context.ProductId).Name</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Product">
            <MudSelect @bind-Value="context.ProductId"
            Variant="@_defaultVariant"
            Label="Status"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Product")
            MultiSelection="false"
            HelperText=@("Please select a product")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="true"
            RequiredError="Please select a product">
                @foreach (var productModel in _allProductModels)
                {
                    <MudSelectItem Value="@productModel.Id" />
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Quantity">
            <MudTextField @bind-Value="context.Quantity" T="int" Required />
        </MudTd>

        <MudTd DataLabel="Status">
            <MudSelect @bind-Value="context.Status"
            Variant="@_defaultVariant"
            Label="Status"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Status")
            MultiSelection="false"
            HelperText=@("Please select a status")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="true"
            RequiredError="Please select a status">
                @foreach (var orderState in _orderStates)
                {
                    <MudSelectItem Value="@orderState"/>
                }
            </MudSelect>
        </MudTd>

    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    [Parameter]
    public IMainPage MainPage { get; set; }
    
    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> CustomerOrderDetailIds { get; set; } = new List<Guid>();
    public List<CustomerOrderDetailModel> CustomerOrderDetailModels { get; set; } = new List<CustomerOrderDetailModel>();

    [Parameter]
    public GetStaffResponseDTO? CurrentStaff { get; set; }

    private HashSet<CustomerOrderDetailModel> _selectedCustomerOrderDetails = new HashSet<CustomerOrderDetailModel>();
    private bool _disableDelete => !_selectedCustomerOrderDetails.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<CustomerOrderDetailModel> _tableRef;
    private CustomerOrderDetailModel _customerOrderDetailModelBeforeEdit { get; set; }

    private readonly Variant _defaultVariant = Theme.DefaultInputVariant();
    private List<ProductModel> _allProductModels { get; set; } = [];
    private List<string> _orderStates { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _orderStates = typeof(OrderState)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Select(field => field.GetValue(null).ToString())
            .ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !CustomerOrderDetailIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(CustomerOrderDetailModel customerOrderDetailModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var product = _allProductModels.FirstOrDefault(productModel => productModel.Id == customerOrderDetailModel.ProductId);
        if (product != null && product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteCustomerOrderDetails()
    {
        var success = true;
        foreach (var customerOrderDetailModel in _selectedCustomerOrderDetails)
        {
            var deleteCustomerOrderDetailCommand = new DeleteCustomerOrderDetailCommand(customerOrderDetailModel.Id);
            var result = await Mediator.Send(deleteCustomerOrderDetailCommand);

            if (result.Success)
            {
                CustomerOrderDetailIds.Remove(customerOrderDetailModel.Id);
                CustomerOrderDetailModels.Remove(customerOrderDetailModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "CustomerOrderDetails Deleted" : "Failed to delete customerOrderDetails");
    }

    private void BackupItem(object customerOrderDetailModel)
    {

        _customerOrderDetailModelBeforeEdit = new CustomerOrderDetailModel()
        {
            Id = ((CustomerOrderDetailModel)customerOrderDetailModel).Id,
            Status = ((CustomerOrderDetailModel)customerOrderDetailModel).Status,
            Quantity = ((CustomerOrderDetailModel)customerOrderDetailModel).Quantity,
            ProductId = ((CustomerOrderDetailModel)customerOrderDetailModel).ProductId,
            CustomerOrderId = ((CustomerOrderDetailModel)customerOrderDetailModel).CustomerOrderId,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object customerOrderDetailModel)
    {
        ((CustomerOrderDetailModel)customerOrderDetailModel).Id = _customerOrderDetailModelBeforeEdit.Id;
        ((CustomerOrderDetailModel)customerOrderDetailModel).Status = _customerOrderDetailModelBeforeEdit.Status;
        ((CustomerOrderDetailModel)customerOrderDetailModel).Quantity = _customerOrderDetailModelBeforeEdit.Quantity;
        ((CustomerOrderDetailModel)customerOrderDetailModel).ProductId = _customerOrderDetailModelBeforeEdit.ProductId;
        ((CustomerOrderDetailModel)customerOrderDetailModel).CustomerOrderId = _customerOrderDetailModelBeforeEdit.CustomerOrderId;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object customerOrderDetailModel)
    {
        var updateCustomerOrderDetailDTO = new UpdateCustomerOrderDetailRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = ((CustomerOrderDetailModel)customerOrderDetailModel).Id,
            Status = ((CustomerOrderDetailModel)customerOrderDetailModel).Status,
            Quantity = ((CustomerOrderDetailModel)customerOrderDetailModel).Quantity,
            ProductId = ((CustomerOrderDetailModel)customerOrderDetailModel).ProductId,
            CustomerOrderId = ((CustomerOrderDetailModel)customerOrderDetailModel).CustomerOrderId,
        };
        var updateCustomerOrderDetailCommand = new UpdateCustomerOrderDetailCommand(updateCustomerOrderDetailDTO);
        var response = await Mediator.Send(updateCustomerOrderDetailCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateCustomerOrderDetailDialogAsync()
    {
        var parameters = new DialogParameters<CreateCustomerOrderDetailDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateCustomerOrderDetailDialog>("Create CustomerOrderDetail", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var customerOrderDetailModelCreated = (CustomerOrderDetailModel)dialogResult.Data;
            if (customerOrderDetailModelCreated == null)
            {
                throw new Exception("CustomerOrderDetail created is not recognized");
            }
            CustomerOrderDetailIds.Add(customerOrderDetailModelCreated.Id);
            CustomerOrderDetailModels.Add(customerOrderDetailModelCreated);
            StateHasChanged();
            SnackBar.Add($"Customer Order Detail created");
        }
    }

    public async Task<bool> FetchData()
    {
        foreach (var customerOrderDetailId in CustomerOrderDetailIds)
        {
            var getCustomerOrderDetailByIdQuery = new GetCustomerOrderDetailByIdQuery(customerOrderDetailId);
            var customerOrderDetailDTO = await Mediator.Send(getCustomerOrderDetailByIdQuery);

            var customerOrderDetailModel = new CustomerOrderDetailModel()
            {
                Id = customerOrderDetailDTO.Id,
                Status = customerOrderDetailDTO.Status,
                CustomerOrderId = customerOrderDetailDTO.CustomerOrderId,
                ProductId = customerOrderDetailDTO.ProductId,
                Quantity = customerOrderDetailDTO.Quantity
            };

            CustomerOrderDetailModels.Add(customerOrderDetailModel);
        }


        var getAllProductIdsByCompanyIdQuery = new GetAllProductIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var productIds = await Mediator.Send(getAllProductIdsByCompanyIdQuery);

        foreach (var productId in productIds)
        {
            var getProductByIdQuery = new GetProductByIdQuery(productId);
            var productDTO = await Mediator.Send(getProductByIdQuery);

            var productModel = new ProductModel()
            {
                Id = productDTO.Id,
                Name = productDTO.Name,
                Description = productDTO.Description,
                Height = productDTO.Height,
                Length = productDTO.Length,
                Price = productDTO.Price,
                ProductGroupIds = productDTO.ProductGroupIds,
                ShopIds = productDTO.ShopIds,
                Sku = productDTO.Sku,
                Tag = productDTO.Tag,
                Weight = productDTO.Weight,
                Width = productDTO.Width,
            };
            _allProductModels.Add(productModel);
        }
        return true;
    }
}

    