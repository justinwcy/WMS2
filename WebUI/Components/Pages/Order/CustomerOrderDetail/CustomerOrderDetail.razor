
@inject IDialogService Dialog
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteCustomerOrderDetails"
        Color="Color.Error"
        Variant="Variant.Filled"
        Size="Size.Large"
        FullWidth="false"
        Disabled="_disableDelete">
            Delete CustomerOrderDetail
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateCustomerOrderDetailDialogAsync)"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        FullWidth="false">
            Create CustomerOrderDetail
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
Filter="new Func<CustomerOrderDetailModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@CustomerOrderDetailModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedCustomerOrderDetails"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">CustomerOrderDetails</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 150px" />
        <col style="min-width: 200px" />
        <col style="min-width: 100px" />
        <col style="min-width: 150px" />
        <col style="min-width: 100px" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerOrderDetailModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerOrderDetailModel, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerOrderDetailModel, object>(x=>x.Platform)">Platform</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CustomerOrderDetailModel, object>(x=>x.Website)">Website</MudTableSortLabel></MudTh>
        <MudTh>Products</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Website">@context.Website</MudTd>
        <MudTd DataLabel="Platform">@context.Platform</MudTd>
        <MudTd DataLabel="Products">
            <MudButton OnClick="@(() => ViewDialogUtilities.OpenProductDialogAsync(@context.ProductIds, CurrentStaff, Dialog))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.ProductIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>

        <MudTd DataLabel="Address">
            <MudTextField @bind-Value="context.Address" Required />
        </MudTd>

        <MudTd DataLabel="Website">
            <MudTextField @bind-Value="context.Website" Required />
        </MudTd>

        <MudTd DataLabel="Platform">
            <MudTextField @bind-Value="context.Platform" Required />
        </MudTd>

        <MudTd DataLabel="Products"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public List<Guid> CustomerOrderDetailIds { get; set; } = new List<Guid>();
    public List<CustomerOrderDetailModel> CustomerOrderDetailModels { get; set; } = new List<CustomerOrderDetailModel>();

    [Parameter]
    public GetStaffResponseDTO CurrentStaff { get; set; }

    private HashSet<CustomerOrderDetailModel> _selectedCustomerOrderDetails = new HashSet<CustomerOrderDetailModel>();
    private bool _disableDelete => !_selectedCustomerOrderDetails.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<CustomerOrderDetailModel> _tableRef;
    private CustomerOrderDetailModel _customerOrderDetailModelBeforeEdit { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        await base.OnParametersSetAsync();

        foreach (var customerOrderDetailId in CustomerOrderDetailIds)
        {
            var getCustomerOrderDetailByIdQuery = new GetCustomerOrderDetailByIdQuery(customerOrderDetailId);
            var customerOrderDetailDTO = await Mediator.Send(getCustomerOrderDetailByIdQuery);

            var customerOrderDetailModel = new CustomerOrderDetailModel()
            {
                ProductIds = customerOrderDetailDTO.ProductIds,
                Platform = customerOrderDetailDTO.Platform,
                Address = customerOrderDetailDTO.Address,
                Id = customerOrderDetailDTO.Id,
                Name = customerOrderDetailDTO.Name,
                Website = customerOrderDetailDTO.Website
            };

            CustomerOrderDetailModels.Add(customerOrderDetailModel);
        }
        _loading = false;
    }

    private bool FilterFunc(CustomerOrderDetailModel customerOrderDetailModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customerOrderDetailModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customerOrderDetailModel.Address.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customerOrderDetailModel.Platform.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customerOrderDetailModel.Website.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteCustomerOrderDetails()
    {
        var success = true;
        foreach (var customerOrderDetailModel in _selectedCustomerOrderDetails)
        {
            var deleteCustomerOrderDetailCommand = new DeleteCustomerOrderDetailCommand(customerOrderDetailModel.Id);
            var result = await Mediator.Send(deleteCustomerOrderDetailCommand);

            if (result.Success)
            {
                CustomerOrderDetailModels.Remove(customerOrderDetailModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "CustomerOrderDetails Deleted" : "Failed to delete customerOrderDetails");
    }

    private void BackupItem(object customerOrderDetailModel)
    {

        _customerOrderDetailModelBeforeEdit = new CustomerOrderDetailModel()
        {
            Id = ((CustomerOrderDetailModel)customerOrderDetailModel).Id,
            Name = ((CustomerOrderDetailModel)customerOrderDetailModel).Name,
            Address = ((CustomerOrderDetailModel)customerOrderDetailModel).Address,
            Platform = ((CustomerOrderDetailModel)customerOrderDetailModel).Platform,
            Website = ((CustomerOrderDetailModel)customerOrderDetailModel).Website,
            ProductIds = ((CustomerOrderDetailModel)customerOrderDetailModel).ProductIds,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object customerOrderDetailModel)
    {
        ((CustomerOrderDetailModel)customerOrderDetailModel).Id = _customerOrderDetailModelBeforeEdit.Id;
        ((CustomerOrderDetailModel)customerOrderDetailModel).Name = _customerOrderDetailModelBeforeEdit.Name;
        ((CustomerOrderDetailModel)customerOrderDetailModel).Address = _customerOrderDetailModelBeforeEdit.Address;
        ((CustomerOrderDetailModel)customerOrderDetailModel).Platform = _customerOrderDetailModelBeforeEdit.Platform;
        ((CustomerOrderDetailModel)customerOrderDetailModel).Website = _customerOrderDetailModelBeforeEdit.Website;
        ((CustomerOrderDetailModel)customerOrderDetailModel).ProductIds = _customerOrderDetailModelBeforeEdit.ProductIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object customerOrderDetailModel)
    {
        var customerOrderDetailModelConverted = (CustomerOrderDetailModel)customerOrderDetailModel;
        var updateCustomerOrderDetailDTO = new UpdateCustomerOrderDetailRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = customerOrderDetailModelConverted.Id,
            Name = customerOrderDetailModelConverted.Name,
            Address = customerOrderDetailModelConverted.Address,
            Platform = customerOrderDetailModelConverted.Platform,
            Website = customerOrderDetailModelConverted.Website,
            ProductIds = customerOrderDetailModelConverted.ProductIds,
        };
        var updateCustomerOrderDetailCommand = new UpdateCustomerOrderDetailCommand(updateCustomerOrderDetailDTO);
        var response = await Mediator.Send(updateCustomerOrderDetailCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateCustomerOrderDetailDialogAsync()
    {
        var parameters = new DialogParameters<CreateCustomerOrderDetailDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateCustomerOrderDetailDialog>("Create CustomerOrderDetail", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var customerOrderDetailModelCreated = (CustomerOrderDetailModel)dialogResult.Data;
            if (customerOrderDetailModelCreated == null)
            {
                throw new Exception("CustomerOrderDetail created is not recognized");

            }
            CustomerOrderDetailModels.Add(customerOrderDetailModelCreated);
            StateHasChanged();
            SnackBar.Add($"{customerOrderDetailModelCreated.Name} created");
        }
    }
}

    