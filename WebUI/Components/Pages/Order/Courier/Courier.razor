@inject IDialogService Dialog
@implements IPageComponent
@using Application.Service.Queries
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudGrid Class="mb-3">
    <MudItem xs="9">
        <MudButton OnClick="@DeleteCouriers"
        Color="Color.Error"
        Variant="Variant.Filled"
        Size="Size.Large"
        FullWidth="false"
        Disabled="_disableDelete">
            Delete Courier
        </MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudButton OnClick="@(OpenCreateCourierDialogAsync)"
        Variant="Variant.Filled"
        Color="Color.Primary"
        Size="Size.Large"
        FullWidth="false">
            Create Courier
        </MudButton>
    </MudItem>
</MudGrid>

<MudTable Hover="true" Breakpoint="Breakpoint.Sm" FixedHeader="true"
Filter="new Func<CourierModel,bool>(FilterFunc)"
CanCancelEdit="true"
Items="@CourierModels"
GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
GroupFooterClass="mb-4"
Dense="true"
Loading="@_loading" LoadingProgressColor="Color.Info"
MultiSelection="true"
@bind-SelectedItems="_selectedCouriers"
SelectOnRowClick="false"
CommitEditTooltip="Commit Edit"
CancelEditTooltip="Cancel Edit"
IsEditRowSwitchingBlocked="false"
RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
@ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Couriers</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="max-width: 50px" />
        <col style="max-width: 50px" />
        <col style="min-width: 150px" />
        <col style="min-width: 100px" />
        <col style="min-width: 200px" />
        <col style="min-width: 150px" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CourierModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CourierModel, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CourierModel, object>(x=>x.Remark)">Remark</MudTableSortLabel></MudTh>
        <MudTh>Customer Orders</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="Remark">@context.Remark</MudTd>
        <MudTd DataLabel="Customer Orders">
            <MudButton OnClick="@(() => ViewDialogUtilities.OpenCustomerOrderDialogAsync(@context.CustomerOrderIds, CurrentStaff, Dialog))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.CustomerOrderIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required />
        </MudTd>

        <MudTd DataLabel="Price">
            <MudTextField @bind-Value="context.Price" T="decimal" Required />
        </MudTd>

        <MudTd DataLabel="Remark">
            <MudTextField @bind-Value="context.Remark" Required />
        </MudTd>

        <MudTd DataLabel="Customer Orders"></MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    [CascadingParameter(Name = "MainPage")]
    public IMainPage MainPage { get; set; }
    
    [CascadingParameter(Name = "PageComponents")]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> CourierIds { get; set; } = new List<Guid>();
    public List<CourierModel> CourierModels { get; set; } = new List<CourierModel>();

    [Parameter]
    public GetStaffResponseDTO? CurrentStaff { get; set; }

    private HashSet<CourierModel> _selectedCouriers = new HashSet<CourierModel>();
    private bool _disableDelete => !_selectedCouriers.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<CourierModel> _tableRef;
    private CourierModel _courierModelBeforeEdit { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null || !CourierIds.Any())
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(CourierModel courierModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (courierModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (courierModel.Remark.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteCouriers()
    {
        var success = true;
        foreach (var courierModel in _selectedCouriers)
        {
            var deleteCourierCommand = new DeleteCourierCommand(courierModel.Id);
            var result = await Mediator.Send(deleteCourierCommand);

            if (result.Success)
            {
                CourierIds.Remove(courierModel.Id);
                CourierModels.Remove(courierModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Couriers Deleted" : "Failed to delete couriers");
    }

    private void BackupItem(object courierModel)
    {

        _courierModelBeforeEdit = new CourierModel()
        {
            Id = ((CourierModel)courierModel).Id,
            Name = ((CourierModel)courierModel).Name,
            Price = ((CourierModel)courierModel).Price,
            CustomerOrderIds = ((CourierModel)courierModel).CustomerOrderIds,
            Remark = ((CourierModel)courierModel).Remark,
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object courierModel)
    {
        ((CourierModel)courierModel).Id = _courierModelBeforeEdit.Id;
        ((CourierModel)courierModel).Name = _courierModelBeforeEdit.Name;
        ((CourierModel)courierModel).Price = _courierModelBeforeEdit.Price;
        ((CourierModel)courierModel).CustomerOrderIds = _courierModelBeforeEdit.CustomerOrderIds;
        ((CourierModel)courierModel).Remark = _courierModelBeforeEdit.Remark;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object courierModel)
    {
        var updateCourierDTO = new UpdateCourierRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            Id = ((CourierModel)courierModel).Id,
            Name = ((CourierModel)courierModel).Name,
            Price = ((CourierModel)courierModel).Price,
            CustomerOrderIds = ((CourierModel)courierModel).CustomerOrderIds,
            Remark = ((CourierModel)courierModel).Remark,
        };
        var updateCourierCommand = new UpdateCourierCommand(updateCourierDTO);
        var response = await Mediator.Send(updateCourierCommand);
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateCourierDialogAsync()
    {
        var parameters = new DialogParameters<CreateCourierDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateCourierDialog>("Create Courier", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var courierModelCreated = (CourierModel)dialogResult.Data;
            if (courierModelCreated == null)
            {
                throw new Exception("Courier created is not recognized");
            }
            CourierIds.Add(courierModelCreated.Id);
            CourierModels.Add(courierModelCreated);
            StateHasChanged();
            SnackBar.Add($"{courierModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        foreach (var courierId in CourierIds)
        {
            var getCourierByIdQuery = new GetCourierByIdQuery(courierId);
            var courierDTO = await Mediator.Send(getCourierByIdQuery);

            var courierModel = new CourierModel()
                {
                    Id = courierDTO.Id,
                    Name = courierDTO.Name,
                    Price = courierDTO.Price,
                    CustomerOrderIds = courierDTO.CustomerOrderIds,
                    Remark = courierDTO.Remark,
                };

            CourierModels.Add(courierModel);
        }
        return true;
    }
}

    