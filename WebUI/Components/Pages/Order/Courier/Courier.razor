@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent

@if (_isReadPolicyExpired)
{
    <ForbiddenError/>
    return;
}

<MudGrid Class="mb-3">
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.Courier)>
            @if (ShowDeleteButton)
            {
                <MudButton OnClick="@DeleteCouriers"
                           Color="Color.Error"
                           Variant="Variant.Filled"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="_disableDelete">
                    Delete Courier
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.Courier)>
            @if (ShowCreateButton)
            {
                <MudButton OnClick="@(OpenCreateCourierDialogAsync)"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true">
                    Create Courier
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly" 
          Hover="true" FixedHeader="true"
          Filter="new Func<CourierModel, bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@CourierModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedCouriers"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Couriers</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col/>
        <col/>
        <col/>
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CourierModel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CourierModel, object>(x => x.Price)">Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CourierModel, object>(x => x.Remark)">Remark</MudTableSortLabel></MudTh>
        <MudTh>Customer Orders</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="Remark">@context.Remark</MudTd>
        <MudTd DataLabel="Customer Orders">
            <MudButton OnClick="@(() => OpenCustomerOrderDialogAsync(@context.CustomerOrderIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.CustomerOrderIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required/>
        </MudTd>

        <MudTd DataLabel="Price">
            <MudTextField @bind-Value="context.Price" T="decimal" Required/>
        </MudTd>

        <MudTd DataLabel="Remark">
            <MudTextField @bind-Value="context.Remark" Required/>
        </MudTd>

        <MudTd DataLabel="Customer Orders">
            <MudSelect T="Guid?"
                       ToStringFunc="@(id => _allCustomerOrderModels.FirstOrDefault(customerOrderModel => customerOrderModel.Id == id)?.OrderAddress)"
                       Variant="@_defaultVariant"
                       Label="Product"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Customer Order")
                       MultiSelection="true"
                       HelperText=@("Please select a Customer Order")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="false"
                       RequiredError="Please select a customer order"
                       SelectedValues="@(context.CustomerOrderIds.Select(x => (Guid?)x))"
                       SelectedValuesChanged="@(x => context.CustomerOrderIds = x.Select(x => x.Value).ToList())">
                @foreach (var customerOrderModel in _allCustomerOrderModels)
                {
                    <MudSelectItem T="Guid?" Value="@customerOrderModel.Id"/>
                }
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right"/>
    </PagerContent>
</MudTable>

@code {

    public string Name => "Courier";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> CourierIds { get; set; } = new List<Guid>();
    public List<CourierModel> CourierModels { get; set; } = new List<CourierModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<CourierModel> _selectedCouriers = new HashSet<CourierModel>();
    private bool _disableDelete => !_selectedCouriers.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<CourierModel> _tableRef;
    private CourierModel _courierModelBeforeEdit { get; set; }
    private List<CustomerOrderModel> _allCustomerOrderModels { get; set; } = [];
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isReadOnly = false;
    private bool _isReadPolicyExpired = false;
    
    protected override async Task OnInitializedAsync()
    {
        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        // check if user has read authorization
        var readPolicyString = DataAccessUtilities.GetPolicyString(AccessName.Read, DataTableName.Courier);
        _isReadPolicyExpired = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, readPolicyString);
        if (_isReadPolicyExpired)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(CourierModel courierModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (courierModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (courierModel.Remark.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteCouriers()
    {
        var success = true;
        foreach (var courierModel in _selectedCouriers)
        {
            var deleteCourierCommand = new DeleteCourierCommand(courierModel.Id);
            var result = await Mediator.Send(deleteCourierCommand);

            if (result.Success)
            {
                CourierIds.Remove(courierModel.Id);
                CourierModels.Remove(courierModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Couriers Deleted" : "Failed to delete couriers");
    }

    private void BackupItem(object courierModel)
    {

        _courierModelBeforeEdit = new CourierModel()
            {
                Id = ((CourierModel)courierModel).Id,
                Name = ((CourierModel)courierModel).Name,
                Price = ((CourierModel)courierModel).Price,
                CustomerOrderIds = ((CourierModel)courierModel).CustomerOrderIds,
                Remark = ((CourierModel)courierModel).Remark,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object courierModel)
    {
        ((CourierModel)courierModel).Id = _courierModelBeforeEdit.Id;
        ((CourierModel)courierModel).Name = _courierModelBeforeEdit.Name;
        ((CourierModel)courierModel).Price = _courierModelBeforeEdit.Price;
        ((CourierModel)courierModel).CustomerOrderIds = _courierModelBeforeEdit.CustomerOrderIds;
        ((CourierModel)courierModel).Remark = _courierModelBeforeEdit.Remark;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object courierModel)
    {
        var updateCourierDTO = new UpdateCourierRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((CourierModel)courierModel).Id,
                Name = ((CourierModel)courierModel).Name,
                Price = ((CourierModel)courierModel).Price,
                CustomerOrderIds = ((CourierModel)courierModel).CustomerOrderIds,
                Remark = ((CourierModel)courierModel).Remark,
            };
        var updateCourierCommand = new UpdateCourierCommand(updateCourierDTO);
        var response = await Mediator.Send(updateCourierCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateCourierDialogAsync()
    {
        var parameters = new DialogParameters<CreateCourierDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateCourierDialog>("Create Courier", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var courierModelCreated = (CourierModel)dialogResult.Data;
            if (courierModelCreated == null)
            {
                throw new Exception("Courier created is not recognized");
            }
            CourierIds.Add(courierModelCreated.Id);
            CourierModels.Add(courierModelCreated);
            StateHasChanged();
            SnackBar.Add($"{courierModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        var databaseHelper = new DatabaseHelper(Mediator, CurrentStaff.CompanyId);
        CourierModels = await databaseHelper.GetCouriers(CourierIds);
        _allCustomerOrderModels = await databaseHelper.GetAllCustomerOrders();
        return true;
    }

    private async Task OpenCustomerOrderDialogAsync(List<Guid> customerOrderIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenCustomerOrderDialogAsync(customerOrderIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}