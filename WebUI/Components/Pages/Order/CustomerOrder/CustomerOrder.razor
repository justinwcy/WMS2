@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="5">
            <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.CustomerOrder)>
            @if (ShowDeleteButton)
        {
            <MudButton OnClick="@DeleteCustomerOrders"
                       Color="Color.Error"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       FullWidth="true"
                       Disabled="_disableDelete">
                Delete Customer Order
            </MudButton>
        }
             </AuthorizeView>
            </MudItem>
    <MudItem xs="2" />
    <MudItem xs="5">
            <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.CustomerOrder)>
        @if (ShowCreateButton)
        {
            <MudButton OnClick="@(OpenCreateCustomerOrderDialogAsync)"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true">
                Create Customer Order
            </MudButton>
        }
             </AuthorizeView>
        </MudItem>
</MudGrid>

<MudTable Hover="true" FixedHeader="true"
          Filter="new Func<CustomerOrderModel,bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@CustomerOrderModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedCustomerOrders"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Customer Orders</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        @for (var i = 0; i < 7; i++)
        {
            <col style="min-width:250px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerOrderModel, object>(x => _allCustomerModels.FirstOrDefault(customerModel => customerModel.Id == x.CustomerId).FirstName)">
                Customer
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerOrderModel, object>(x => x.ExpectedArrivalDate!)">
                Expected Arrival Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerOrderModel, object>(x => _allCourierModels.FirstOrDefault(courierModel => courierModel.Id == x.CourierId).Name)">
                Courier
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerOrderModel, object>(x => x.OrderCreationDate)">
                Order Creation Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerOrderModel, object>(x => x.OrderAddress)">
                Order Address
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CustomerOrderModel, object>(x => _allBinModels.FirstOrDefault(binModel => binModel.Id == x.BinId).Name)">
                Bin
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Details</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Customer">@_allCustomerModels.FirstOrDefault(customerModel => customerModel.Id == context.CustomerId)?.FirstName @_allCustomerModels.FirstOrDefault(customerModel => customerModel.Id == context.CustomerId)?.LastName</MudTd>
        <MudTd DataLabel="Expected Arrival Date">@context.ExpectedArrivalDate.Value.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</MudTd>
        <MudTd DataLabel="Courier">@_allCourierModels.FirstOrDefault(courierModel => courierModel.Id == context.CourierId)?.Name</MudTd>
        <MudTd DataLabel="Order Creation Date">@context.OrderCreationDate.Value.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</MudTd>
        <MudTd DataLabel="Order Address">@context.OrderAddress</MudTd>
        <MudTd DataLabel="Bin">@_allBinModels.FirstOrDefault(binModel => binModel.Id == context.BinId)?.Name</MudTd>
        <MudTd DataLabel="Details">
            <MudButton OnClick="@(() => OpenCustomerOrderDetailDialogAsync(@context.CustomerOrderDetailIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.CustomerOrderDetailIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Customer">
            <MudSelect @bind-Value="context.CustomerId"
                       T="Guid?"
                       ToStringFunc="@(id => $"{_allCustomerModels.FirstOrDefault(customerModel => customerModel.Id == id)?.FirstName} {_allCustomerModels.FirstOrDefault(customerModel => customerModel.Id == id)?.LastName}")"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Customer")
                       MultiSelection="false"
                       HelperText=@("Please select a customer")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a courier">
                @foreach (var customerModel in _allCustomerModels)
                {
                    <MudSelectItem T="Guid?" Value="@customerModel.Id" />
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Expected Arrival Date">
            <MudDatePicker Label="Expected Arrival Date"
                           Editable="true"
                           @bind-Date="context.ExpectedArrivalDate"
                           Placeholder="Expected Arrival Date" />
        </MudTd>

        <MudTd DataLabel="Courier">
            <MudSelect @bind-Value="context.CourierId"
                       T="Guid?"
                       ToStringFunc="@(id => _allCourierModels.FirstOrDefault(courierModel => courierModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Status"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Courier")
                       MultiSelection="false"
                       HelperText=@("Please select a courier")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a courier">
                @foreach (var courierModel in _allCourierModels)
                {
                    <MudSelectItem T="Guid?" Value="@courierModel.Id" />
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Order Creation Date">
            <MudDatePicker Label="Order Creation Date"
                           Editable="true"
                           @bind-Date="context.OrderCreationDate"
                           Placeholder="Order Creation Date" />
        </MudTd>

        <MudTd DataLabel="Order Address">
            <MudTextField @bind-Value="context.OrderAddress" Required />
        </MudTd>

        <MudTd DataLabel="Bin">
            <MudSelect @bind-Value="context.BinId"
                       T="Guid?"
                       ToStringFunc="@(id => _allBinModels.FirstOrDefault(binModel => binModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Bin"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Bin")
                       MultiSelection="false"
                       HelperText=@("Please select a bin")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="false"
                       RequiredError="Please select a bin">
                @foreach (var binModel in _allBinModels)
                {
                    <MudSelectItem T="Guid?" Value="@binModel.Id" />
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Details">
            <MudButton OnClick="@(() => OpenCustomerOrderDetailDialogAsync(@context.CustomerOrderDetailIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.CustomerOrderDetailIds.Count)
            </MudButton>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right" />
    </PagerContent>
</MudTable>

@code {

    public string Name => "CustomerOrder";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> CustomerOrderIds { get; set; } = new List<Guid>();
    public List<CustomerOrderModel> CustomerOrderModels { get; set; } = new List<CustomerOrderModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<CustomerOrderModel> _selectedCustomerOrders = new HashSet<CustomerOrderModel>();
    private bool _disableDelete => !_selectedCustomerOrders.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<CustomerOrderModel> _tableRef;
    private CustomerOrderModel _customerOrderModelBeforeEdit { get; set; }

    private List<CustomerModel> _allCustomerModels { get; set; } = [];
    private List<BinModel> _allBinModels { get; set; } = [];
    private List<CourierModel> _allCourierModels { get; set; } = [];
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(CustomerOrderModel customerOrderModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customerOrderModel.OrderAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteCustomerOrders()
    {
        var success = true;
        foreach (var customerOrderModel in _selectedCustomerOrders)
        {
            var deleteCustomerOrderCommand = new DeleteCustomerOrderCommand(customerOrderModel.Id);
            var result = await Mediator.Send(deleteCustomerOrderCommand);

            if (result.Success)
            {
                CustomerOrderIds.Remove(customerOrderModel.Id);
                CustomerOrderModels.Remove(customerOrderModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "CustomerOrders Deleted" : "Failed to delete customerOrders");
    }

    private void BackupItem(object customerOrderModel)
    {

        _customerOrderModelBeforeEdit = new CustomerOrderModel()
            {
                Id = ((CustomerOrderModel)customerOrderModel).Id,
                OrderAddress = ((CustomerOrderModel)customerOrderModel).OrderAddress,
                BinId = ((CustomerOrderModel)customerOrderModel).BinId,
                CourierId = ((CustomerOrderModel)customerOrderModel).CourierId,
                CustomerId = ((CustomerOrderModel)customerOrderModel).CustomerId,
                CustomerOrderDetailIds = ((CustomerOrderModel)customerOrderModel).CustomerOrderDetailIds,
                ExpectedArrivalDate = ((CustomerOrderModel)customerOrderModel).ExpectedArrivalDate,
                OrderCreationDate = ((CustomerOrderModel)customerOrderModel).OrderCreationDate
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object customerOrderModel)
    {
        ((CustomerOrderModel)customerOrderModel).Id = _customerOrderModelBeforeEdit.Id;
        ((CustomerOrderModel)customerOrderModel).OrderAddress = _customerOrderModelBeforeEdit.OrderAddress;
        ((CustomerOrderModel)customerOrderModel).BinId = _customerOrderModelBeforeEdit.BinId;
        ((CustomerOrderModel)customerOrderModel).CourierId = _customerOrderModelBeforeEdit.CourierId;
        ((CustomerOrderModel)customerOrderModel).CustomerId = _customerOrderModelBeforeEdit.CustomerId;
        ((CustomerOrderModel)customerOrderModel).CustomerOrderDetailIds = _customerOrderModelBeforeEdit.CustomerOrderDetailIds;
        ((CustomerOrderModel)customerOrderModel).ExpectedArrivalDate = _customerOrderModelBeforeEdit.ExpectedArrivalDate;
        ((CustomerOrderModel)customerOrderModel).OrderCreationDate = _customerOrderModelBeforeEdit.OrderCreationDate;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object customerOrderModel)
    {
        var updateCustomerOrderDTO = new UpdateCustomerOrderRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = ((CustomerOrderModel)customerOrderModel).Id,
                OrderAddress = ((CustomerOrderModel)customerOrderModel).OrderAddress,
                BinId = ((CustomerOrderModel)customerOrderModel).BinId,
                CourierId = ((CustomerOrderModel)customerOrderModel).CourierId,
                CustomerId = ((CustomerOrderModel)customerOrderModel).CustomerId,
                CustomerOrderDetailIds = ((CustomerOrderModel)customerOrderModel).CustomerOrderDetailIds,
                ExpectedArrivalDate = ((CustomerOrderModel)customerOrderModel).ExpectedArrivalDate.Value,
                OrderCreationDate = ((CustomerOrderModel)customerOrderModel).OrderCreationDate.Value
            };
        var updateCustomerOrderCommand = new UpdateCustomerOrderCommand(updateCustomerOrderDTO);
        var response = await Mediator.Send(updateCustomerOrderCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateCustomerOrderDialogAsync()
    {
        var parameters = new DialogParameters<CreateCustomerOrderDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateCustomerOrderDialog>("Create CustomerOrder", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var customerOrderModelCreated = (CustomerOrderModel)dialogResult.Data;
            if (customerOrderModelCreated == null)
            {
                throw new Exception("CustomerOrder created is not recognized");

            }
            CustomerOrderIds.Add(customerOrderModelCreated.Id);
            CustomerOrderModels.Add(customerOrderModelCreated);
            StateHasChanged();
            SnackBar.Add($"Customer Order created");
        }
    }

    public async Task<bool> FetchData()
    {
        CustomerOrderModels.Clear();
        foreach (var customerOrderId in CustomerOrderIds)
        {
            var getCustomerOrderByIdQuery = new GetCustomerOrderByIdQuery(customerOrderId);
            var customerOrderDTO = await Mediator.Send(getCustomerOrderByIdQuery);

            var customerOrderModel = new CustomerOrderModel()
                {
                    Id = customerOrderDTO.Id,
                    OrderAddress = customerOrderDTO.OrderAddress,
                    BinId = customerOrderDTO.BinId,
                    CourierId = customerOrderDTO.CourierId,
                    CustomerId = customerOrderDTO.CustomerId,
                    CustomerOrderDetailIds = customerOrderDTO.CustomerOrderDetailIds,
                    ExpectedArrivalDate = customerOrderDTO.ExpectedArrivalDate,
                    OrderCreationDate = customerOrderDTO.OrderCreationDate
                };

            CustomerOrderModels.Add(customerOrderModel);
        }

        var getAllCustomerIdsByCompanyIdQuery = new GetAllCustomerIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var customerIds = await Mediator.Send(getAllCustomerIdsByCompanyIdQuery);
        foreach (var customerId in customerIds)
        {
            var getCustomerByIdQuery = new GetCustomerByIdQuery(customerId);
            var customerDTO = await Mediator.Send(getCustomerByIdQuery);
            var customerModel = new CustomerModel()
                {
                    Id = customerDTO.Id,
                    Address = customerDTO.Address,
                    CustomerOrderIds = customerDTO.CustomerOrderIds,
                    Email = customerDTO.Email,
                    FirstName = customerDTO.FirstName,
                    LastName = customerDTO.LastName,
                };
            _allCustomerModels.Add(customerModel);
        }

        var getAllBinIdsByCompanyIdQuery = new GetAllBinIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var binIds = await Mediator.Send(getAllBinIdsByCompanyIdQuery);
        foreach (var binId in binIds)
        {
            var getBinByIdQuery = new GetBinByIdQuery(binId);
            var binDTO = await Mediator.Send(getBinByIdQuery);
            var binModel = new BinModel()
                {
                    Id = binDTO.Id,
                    CustomerOrderIds = binDTO.CustomerOrderIds,
                    Name = binDTO.Name,
                };
            _allBinModels.Add(binModel);
        }

        var getAllCourierIdsByCompanyIdQuery = new GetAllCourierIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var courierIds = await Mediator.Send(getAllCourierIdsByCompanyIdQuery);
        foreach (var courierId in courierIds)
        {
            var getCourierByIdQuery = new GetCourierByIdQuery(courierId);
            var courierDTO = await Mediator.Send(getCourierByIdQuery);
            var courierModel = new CourierModel()
                {
                    Id = courierDTO.Id,
                    CustomerOrderIds = courierDTO.CustomerOrderIds,
                    Name = courierDTO.Name,
                    Remark = courierDTO.Remark,
                    Price = courierDTO.Price,
                };
            _allCourierModels.Add(courierModel);
        }
        return true;
    }

    private async Task OpenCustomerOrderDetailDialogAsync(List<Guid> customerOrderDetailIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenCustomerOrderDetailDialogAsync(customerOrderDetailIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}