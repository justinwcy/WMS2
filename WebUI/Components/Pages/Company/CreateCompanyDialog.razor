@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using WebUI.Utilities
<MudDialog>
    <TitleContent>
        Create Company
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_isFormValid">
            <MudTextField @bind-value="_companyModel.Name"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Company Name"
                          Required="true" RequiredError="Name is required!"
                          Margin="Margin.Dense"/>
        </MudForm>
        </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;
    private MudForm _form;

    private CompanyModel _companyModel { get; set; } = new CompanyModel();
    private GetStaffResponseDTO _getStaffResponseDTO { get; set; }

    private async Task Submit()
    {
        var createCompanyDTO = new CreateCompanyRequestDTO()
        {
            CreatedBy = _getStaffResponseDTO.CreatedBy,
            Name = _companyModel.Name,
            StaffIds = new List<Guid>(),
            WarehouseIds = new List<Guid>(),
        };
        var createCompanyCommand = new CreateCompanyCommand(createCompanyDTO);
        var createdCompanyResponseDTO = await Mediator.Send(createCompanyCommand);

        var createdCompanyModel = new CompanyModel()
        {
            Id = createdCompanyResponseDTO.Id,
            Name = _companyModel.Name,
            StaffIds = new List<Guid>(),
            WarehouseIds = new List<Guid>()
        };
        MudDialog.Close(DialogResult.Ok(createdCompanyModel));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _getStaffResponseDTO = await UserUtilities.GetCurrentUser(Mediator, AuthenticationStateProvider);
    }
}