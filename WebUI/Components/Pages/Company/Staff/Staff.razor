@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent
<MudGrid Class="mb-3">
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.Staff)>
            @if (ShowDeleteButton)
            {
                <MudButton OnClick="@DeleteStaffs"
                           Color="Color.Error"
                           Variant="Variant.Filled"
                           Size="Size.Large"
                           FullWidth="true"
                           Disabled="_disableDelete">
                    Delete Staff
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.Staff)>
            @if (ShowCreateButton)
            {
                <MudButton OnClick="@(OpenCreateStaffDialogAsync)"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           FullWidth="true">
                    Create Staff
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly"
          Hover="true"
          FixedHeader="true"
          HorizontalScrollbar="true"
          Filter="new Func<StaffModel, bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@StaffModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedStaffs"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Staffs</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        @for (var i = 0; i < 6; i++)
        {
            <col style="min-width:200px;"/>
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<StaffModel, object>(x => x.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StaffModel, object>(x => x.LastName)">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StaffModel, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh>Roles</MudTh>
        <MudTh>Company</MudTh>
        <MudTh>Zone</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Roles">@string.Join(", ", context.Roles)</MudTd>
        <MudTd DataLabel="Company">
            @_allCompanyModels.FirstOrDefault(companyModel => companyModel.Id == @context.CompanyId)?.Name
        </MudTd>

        <MudTd DataLabel="Zone">
            <MudButton OnClick="@(() => OpenZoneDialogAsync(@context.ZoneIds))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       FullWidth="false">
                View (@context.ZoneIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="First Name">
            <MudTextField @bind-Value="context.FirstName" Required/>
        </MudTd>

        <MudTd DataLabel="Last Name">
            <MudTextField @bind-Value="context.LastName" Required/>
        </MudTd>

        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="context.Email" Required/>
        </MudTd>

        <MudTd DataLabel="Roles">
            <MudSelect T="string" Variant="@_defaultVariant"
                       Label="Role"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Role")
                       MultiSelection="true"
                       HelperText=@("Please select a role")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a role"
                       SelectedValues="@(context.Roles)"
                       SelectedValuesChanged="@(x => context.Roles = x.ToList())">
                @foreach (var staffRole in _allStaffRoles)
                {
                    <MudSelectItem T="string" Value="@staffRole"/>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Company">
            <MudSelect @bind-Value="context.CompanyId"
                       T="Guid?"
                       ToStringFunc="@(id => _allCompanyModels.FirstOrDefault(companyModel => companyModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Company"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Company")
                       MultiSelection="false"
                       HelperText=@("Please select a company")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a company">
                @foreach (var companyModel in _allCompanyModels)
                {
                    <MudSelectItem T="Guid?" Value="companyModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="Zone">
            <MudSelect T="Guid?"
                       ToStringFunc="@(id => _allZoneModels.FirstOrDefault(zoneModel => zoneModel.Id == id)?.Name)"
                       Variant="@_defaultVariant"
                       Label="Zone"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Zone")
                       MultiSelection="true"
                       HelperText=@("Please select a zone")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="false"
                       RequiredError="Please select a staff"
                       SelectedValues="@(context.ZoneIds?.Select(x => (Guid?)x))"
                       SelectedValuesChanged="@(x => context.ZoneIds = x.Select(x => x.Value).ToList())">
                @foreach (var zoneModel in _allZoneModels)
                {
                    <MudSelectItem T="Guid?" Value="@zoneModel.Id"/>
                }
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new[] { 10, 25, 50, 100, int.MaxValue }"
                       RowsPerPageString="Rows per page:"
                       InfoFormat="{first_item}-{last_item} of {all_items}"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Right"/>
    </PagerContent>
</MudTable>

@code {

    public string Name => "Staff";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> StaffIds { get; set; } = new List<Guid>();
    public List<StaffModel> StaffModels { get; set; } = new List<StaffModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<StaffModel> _selectedStaffs = new HashSet<StaffModel>();
    private bool _disableDelete => !_selectedStaffs.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<StaffModel> _tableRef;
    private StaffModel _staffModelBeforeEdit { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private List<CompanyModel> _allCompanyModels { get; set; } = [];
    private List<ZoneModel> _allZoneModels { get; set; } = [];
    private List<string> _allStaffRoles = new();

    private bool _isReadOnly = false;
    
    protected override async Task OnInitializedAsync()
    {
        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(StaffModel staffModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (staffModel.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (staffModel.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (staffModel.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (string.Join(", ", staffModel.Roles).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteStaffs()
    {
        var success = true;
        foreach (var staffModel in _selectedStaffs)
        {
            var deleteStaffCommand = new DeleteStaffCommand(staffModel.Id);
            var result = await Mediator.Send(deleteStaffCommand);

            if (result.Success)
            {
                StaffIds.Remove(staffModel.Id);
                StaffModels.Remove(staffModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Staffs Deleted" : "Failed to delete staffs");
    }

    private void BackupItem(object staffModel)
    {

        _staffModelBeforeEdit = new StaffModel()
            {
                Id = ((StaffModel)staffModel).Id,
                CompanyId = ((StaffModel)staffModel).CompanyId,
                FirstName = ((StaffModel)staffModel).FirstName,
                LastName = ((StaffModel)staffModel).LastName,
                Email = ((StaffModel)staffModel).Email,
                ZoneIds = ((StaffModel)staffModel).ZoneIds,
                Roles = ((StaffModel)staffModel).Roles,
                CustomClaims = ((StaffModel)staffModel).CustomClaims,
                StaffNotificationIds = ((StaffModel)staffModel).StaffNotificationIds,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object staffModel)
    {
        ((StaffModel)staffModel).Id = _staffModelBeforeEdit.Id;
        ((StaffModel)staffModel).CompanyId = _staffModelBeforeEdit.CompanyId;
        ((StaffModel)staffModel).FirstName = _staffModelBeforeEdit.FirstName;
        ((StaffModel)staffModel).LastName = _staffModelBeforeEdit.LastName;
        ((StaffModel)staffModel).Email = _staffModelBeforeEdit.Email;
        ((StaffModel)staffModel).Roles = _staffModelBeforeEdit.Roles;
        ((StaffModel)staffModel).ZoneIds = _staffModelBeforeEdit.ZoneIds;
        ((StaffModel)staffModel).CustomClaims = _staffModelBeforeEdit.CustomClaims;
        ((StaffModel)staffModel).StaffNotificationIds = _staffModelBeforeEdit.StaffNotificationIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object staffModel)
    {
        var staffModelConverted = (StaffModel)staffModel;
        var updateStaffDTO = new UpdateStaffRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = staffModelConverted.Id,
                CompanyId = staffModelConverted.CompanyId,
                FirstName = staffModelConverted.FirstName,
                LastName = staffModelConverted.LastName,
                Email = staffModelConverted.Email,
                ZoneIds = staffModelConverted.ZoneIds,
                Roles = staffModelConverted.Roles,
                StaffNotificationIds = staffModelConverted.StaffNotificationIds,
                Claims = staffModelConverted.CustomClaims,
            };
        var updateStaffCommand = new UpdateStaffCommand(updateStaffDTO);
        var response = await Mediator.Send(updateStaffCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateStaffDialogAsync()
    {
        var parameters = new DialogParameters<CreateStaffDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };

        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateStaffDialog>("Create Staff", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var staffModelCreated = (StaffModel)dialogResult.Data;
            if (staffModelCreated == null)
            {
                throw new Exception("Staff created is not recognized");

            }
            StaffIds.Add(staffModelCreated.Id);
            StaffModels.Add(staffModelCreated);
            StateHasChanged();
            SnackBar.Add($"{staffModelCreated.FirstName} {staffModelCreated.LastName} created");
        }
    }

    public async Task<bool> FetchData()
    {
        StaffModels.Clear();
        foreach (var staffId in StaffIds)
        {
            var getStaffByIdQuery = new GetStaffByIdQuery(staffId);
            var staffDTO = await Mediator.Send(getStaffByIdQuery);

            var staffModel = new StaffModel()
                {
                    Id = staffDTO.Id,
                    CompanyId = staffDTO.CompanyId.GetValueOrDefault(),
                    FirstName = staffDTO.FirstName,
                    LastName = staffDTO.LastName,
                    Email = staffDTO.Email,
                    Roles = staffDTO.Roles,
                    ZoneIds = staffDTO.ZoneIds
                };

            StaffModels.Add(staffModel);
        }

        _allCompanyModels.Clear();
        var getAllCompanyIdsQuery = new GetAllCompanyIdsQuery();
        var allCompanyIds = await Mediator.Send(getAllCompanyIdsQuery);
        foreach (var companyId in allCompanyIds)
        {
            var getCompanyByIdQuery = new GetCompanyByIdQuery(companyId);
            var getCompanyResponseDTO = await Mediator.Send(getCompanyByIdQuery);
            var companyModel = new CompanyModel()
                {
                    Id = companyId,
                    StaffIds = getCompanyResponseDTO.StaffIds,
                    WarehouseIds = getCompanyResponseDTO.WarehouseIds,
                    Name = getCompanyResponseDTO.Name,
                };

            _allCompanyModels.Add(companyModel);
        }

        _allStaffRoles.Clear();
        var getAllStaffRolesQuery = new GetAllStaffRolesQuery();
        var allStaffRoles = await Mediator.Send(getAllStaffRolesQuery);
        _allStaffRoles = allStaffRoles.ToList();

        _allZoneModels.Clear();
        var getAllZoneIdsByCompanyIdQuery = new GetAllZoneIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var allZoneIds = await Mediator.Send(getAllZoneIdsByCompanyIdQuery);
        foreach (var zoneId in allZoneIds)
        {
            var getZoneByIdQuery = new GetZoneByIdQuery(zoneId);
            var getZoneResponseDTO = await Mediator.Send(getZoneByIdQuery);
            var zoneModel = new ZoneModel()
                {
                    Id = zoneId,
                    StaffIds = getZoneResponseDTO.StaffIds,
                    Name = getZoneResponseDTO.Name,
                    RackIds = getZoneResponseDTO.RackIds,
                    WarehouseId = getZoneResponseDTO.WarehouseId,
                };

            _allZoneModels.Add(zoneModel);
        }

        return true;
    }

    private async Task OpenCompanyDialogAsync(List<Guid> companyIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenCompanyDialogAsync(companyIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    private async Task OpenZoneDialogAsync(List<Guid> zoneIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenZoneDialogAsync(zoneIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}
