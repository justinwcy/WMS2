@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using WebUI.Components.Models
@using Application.Service.Commands
@using Application.DTO.Request
@using Application.DTO.Response
@using Application.Service.Queries
<MudDialog>
    <TitleContent>
        Create Staff
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@_isFormValid">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-value="_staffModel.FirstName"
                    Variant="@_defaultVariant"
                    T="string"
                    Label="First Name"
                    Required="true" RequiredError="First name is required!"/>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-value="_staffModel.LastName"
                    Variant="@_defaultVariant"
                    T="string"
                    Label="Last Name"
                    Required="true" RequiredError="Last name is required!"/>
                </MudItem>
            </MudGrid>

            <MudTextField @bind-value="_staffModel.Email"
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Email"
                          Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>

            <MudTextField @bind-value="_staffModel.Password" 
                          Variant="@_defaultVariant"
                          T="string" Label="Password" @ref="passwordField"
                          InputType="InputType.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" 
                          Required="true"
                          RequiredError="Password is required!"/>

            <MudTextField @bind-value="_staffModel.ConfirmPassword" 
                          Variant="@_defaultVariant"
                          T="string"
                          Label="Confirm Password" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(PasswordMatch))"/>

            <MudSelect @bind-Value="_staffModel.RolesString"
                       Variant="@_defaultVariant"
                       Label="Role"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("User Role")
                       MultiSelection="true"
                       HelperText=@("Please select a role for the user")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a role for the user">
                @foreach (var staffRoles in _allStaffRoles)
                {
                    <MudSelectItem Value="staffRoles"></MudSelectItem>
                }
            </MudSelect>
            
            <MudSelect @bind-Value="_staffModel.CompanyId"
                       T="Guid"
                       ToStringFunc="@(id=> _allCompanyModels.First(companyModel=>companyModel.Id == id).Name)"
                       Variant="@_defaultVariant"
                       Label="Company"
                       Margin="Margin.Normal"
                       Dense="false"
                       Disabled="false"
                       ReadOnly="false"
                       Placeholder=@("Company")
                       MultiSelection="false"
                       HelperText=@("Please select a company for the user")
                       HelperTextOnFocus="true"
                       Clearable="false"
                       Required="true"
                       RequiredError="Please select a company for the user">
                @foreach (var companyModel in _allCompanyModels)
                {
                    <MudSelectItem Value="companyModel.Id"></MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!_isFormValid)">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isFormValid { get; set; } = false;

    private StaffModel _staffModel { get; set; } = new StaffModel();

    private MudTextField<string> passwordField;

    private List<string> _allStaffRoles = new();
    private readonly List<CompanyModel> _allCompanyModels = new();

    [Parameter]
    public required GetStaffResponseDTO CurrentStaff { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var getAllStaffRolesQuery = new GetAllStaffRolesQuery();
        var allStaffRoles = await Mediator.Send(getAllStaffRolesQuery);
        _allStaffRoles = allStaffRoles.ToList();

        var getAllCompanyIdsQuery = new GetAllCompanyIdsQuery();
        var companyIds = await Mediator.Send(getAllCompanyIdsQuery);
        foreach (var companyId in companyIds)
        {
            var getCompanyByIdQuery = new GetCompanyByIdQuery(companyId);
            var companyDTO = await Mediator.Send(getCompanyByIdQuery);

            var companyModel = new CompanyModel()
            {
                Id = companyDTO.Id,
                Name = companyDTO.Name,
                StaffIds = companyDTO.StaffIds,
                WarehouseIds = companyDTO.WarehouseIds,
            };

            _allCompanyModels.Add(companyModel);
        }
    }

    private async Task Submit()
    {
        var createStaffDTO = new CreateStaffRequestDTO()
        {
            CreatedBy = CurrentStaff.Id,
            CompanyId = _staffModel.CompanyId,
            FirstName = _staffModel.FirstName,
            LastName = _staffModel.LastName,
            Email = _staffModel.Email,
            Roles = _staffModel.GetRoleList(),
            Password = _staffModel.Password,
            ConfirmPassword = _staffModel.ConfirmPassword,
            ZoneIds = _staffModel.ZoneIds,
        };
        var createStaffCommand = new CreateStaffCommand(createStaffDTO);
        var createdStaffResponseDTO = await Mediator.Send(createStaffCommand);

        var createdStaffModel = new StaffModel()
        {
            Id = createdStaffResponseDTO.Id,
            FirstName = _staffModel.FirstName,
            LastName = _staffModel.LastName,
            Email = _staffModel.Email,
            Password = _staffModel.Password,
            ConfirmPassword = _staffModel.ConfirmPassword,
            ZoneIds = _staffModel.ZoneIds,
            RolesString = _staffModel.RolesString
        };
        MudDialog.Close(DialogResult.Ok(createdStaffModel));
    }

    private IEnumerable<string> PasswordStrength(string passwordString)
    {
        if (string.IsNullOrWhiteSpace(passwordString))
        {
            yield return "Password is required!";
            yield break;
        }

        if (passwordString.Length < 6)
            yield return "Password must be at least of length 6";
        if (!Regex.IsMatch(passwordString, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(passwordString, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(passwordString, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string passwordString)
    {
        if (passwordField.Value != passwordString)
            return "Passwords don't match";
        return null;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
    