@inject IDialogService Dialog
@implements IAsyncDisposable
@implements IPageComponent

@if (_isReadPolicyExpired)
{
    <ForbiddenError/>
    return;
}


@if (_isReadPolicyExpired)
{
    <ForbiddenError/>
    return;
}

<MudGrid Class="mb-3">
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Delete, DataTableName.Company)>
            @if (ShowDeleteButton)
            {
                <MudButton OnClick="@DeleteCompanies"
                Color="Color.Error"
                Variant="Variant.Filled"
                Size="Size.Large"
                FullWidth="true"
                Disabled="_disableDelete">
                    Delete Company
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
    <MudItem xs="2"/>
    <MudItem xs="5">
        <AuthorizeView Policy=@DataAccessUtilities.GetPolicyString(AccessName.Create, DataTableName.Company)>
            @if (ShowCreateButton)
            {
                <MudButton OnClick="@(OpenCreateCompanyDialogAsync)"
                Variant="Variant.Filled"
                Color="Color.Primary"
                Size="Size.Large"
                FullWidth="true">
                    Create Company
                </MudButton>
            }
        </AuthorizeView>
    </MudItem>
</MudGrid>

<MudTable ReadOnly="_isReadOnly"
          Hover="true" FixedHeader="true"
          Filter="new Func<CompanyModel, bool>(FilterFunc)"
          CanCancelEdit="true"
          Items="@CompanyModels"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Dense="true"
          Loading="@_loading" LoadingProgressColor="Color.Info"
          MultiSelection="true"
          @bind-SelectedItems="_selectedCompanies"
          SelectOnRowClick="false"
          CommitEditTooltip="Commit Edit"
          CancelEditTooltip="Cancel Edit"
          IsEditRowSwitchingBlocked="false"
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted"
          ApplyButtonPosition="TableApplyButtonPosition.StartAndEnd"
          EditButtonPosition="TableEditButtonPosition.StartAndEnd" EditTrigger="TableEditTrigger.RowClick"
          @ref="_tableRef">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Companies</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        @for (var i = 0; i < 3; i++)
        {
            <col style="min-width:200px;"/>
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CompanyModel, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh>Warehouse</MudTh>
        <MudTh>Staff</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Warehouse">
            <MudButton OnClick="@(() => OpenWarehouseDialogAsync(@context.WarehouseIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.WarehouseIds.Count)
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Staff">
            <MudButton OnClick="@(() => OpenStaffDialogAsync(@context.StaffIds))"
            Variant="Variant.Filled"
            Color="Color.Primary"
            Size="Size.Small"
            FullWidth="false">
                View (@context.StaffIds.Count)
            </MudButton>
        </MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            <MudTextField @bind-Value="context.Name" Required/>
        </MudTd>

        <MudTd DataLabel="Warehouse">
            <MudSelect T="Guid?"
            ToStringFunc="@(id => _allWarehouseModels.FirstOrDefault(warehouseModel => warehouseModel.Id == id)?.Name)"
            Variant="@_defaultVariant"
            Label="Rack"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Warehouse")
            MultiSelection="true"
            HelperText=@("Please select a warehouse")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="false"
            RequiredError="Please select a warehouse"
            SelectedValues="@(context.WarehouseIds.Select(x => (Guid?)x))"
            SelectedValuesChanged="@(x => context.WarehouseIds = x.Select(x => x.Value).ToList())">
                @foreach (var warehouseModel in _allWarehouseModels)
                {
                    <MudSelectItem T="Guid?" Value="@warehouseModel.Id"/>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Staff">
            <MudSelect T="Guid?"
            ToStringFunc="@(id => _allStaffModels.FirstOrDefault(staffModel => staffModel.Id == id)?.FullName)"
            Variant="@_defaultVariant"
            Label="Staff"
            Margin="Margin.Normal"
            Dense="false"
            Disabled="false"
            ReadOnly="false"
            Placeholder=@("Staff")
            MultiSelection="true"
            HelperText=@("Please select a staff")
            HelperTextOnFocus="true"
            Clearable="false"
            Required="false"
            RequiredError="Please select a staff"
            SelectedValues="@(context.StaffIds.Select(x => (Guid?)x))"
            SelectedValuesChanged="@(x => context.StaffIds = x.Select(x => x.Value).ToList())">
                @foreach (var staffModel in _allStaffModels)
                {
                    <MudSelectItem T="Guid?" Value="@staffModel.Id"/>
                }
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new[] { 10, 25, 50, 100, int.MaxValue }"
        RowsPerPageString="Rows per page:"
        InfoFormat="{first_item}-{last_item} of {all_items}"
        AllItemsText="All"
        HorizontalAlignment="HorizontalAlignment.Right"/>
    </PagerContent>
</MudTable>

@code {

    public string Name => "Company";

    [Parameter]
    public bool ShowCreateButton { get; set; }

    [Parameter]
    public bool ShowDeleteButton { get; set; }

    [Parameter]
    public IMainPage MainPage { get; set; }

    [Parameter]
    public List<IPageComponent> PageComponents { get; set; }

    [Parameter]
    public List<Guid> CompanyIds { get; set; } = new List<Guid>();
    public List<CompanyModel> CompanyModels { get; set; } = new List<CompanyModel>();

    [Parameter]
    public CurrentUserModel? CurrentStaff { get; set; }

    private HashSet<CompanyModel> _selectedCompanies = new HashSet<CompanyModel>();
    private bool _disableDelete => !_selectedCompanies.Any();

    private bool _loading { get; set; }
    private string searchString = "";
    private MudTable<CompanyModel> _tableRef;
    private CompanyModel _companyModelBeforeEdit { get; set; }

    private List<WarehouseModel> _allWarehouseModels { get; set; } = [];
    private List<StaffModel> _allStaffModels { get; set; } = [];
    private static readonly Variant _defaultVariant = Theme.DefaultInputVariant();

    private bool _isReadOnly = false;
    private bool _isReadPolicyExpired = false;

    protected override async Task OnInitializedAsync()
    {
        var updatePolicyString = DataAccessUtilities.GetPolicyString(AccessName.Update, DataTableName.Company);
        _isReadOnly = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, updatePolicyString);
    }

    protected override async Task OnParametersSetAsync()
    {
        // check to make sure all parameters are set before running
        if (CurrentStaff == null)
        {
            return;
        }

        // check if user has read authorization
        var readPolicyString = DataAccessUtilities.GetPolicyString(AccessName.Read, DataTableName.Company);
        _isReadPolicyExpired = await DataAccessUtilities.CheckIfClaimExpired(AuthenticationStateProvider, readPolicyString);
        _isReadPolicyExpired = true;
        if (_isReadPolicyExpired)
        {
            return;
        }

        _loading = true;
        await base.OnParametersSetAsync();
        var success = await FetchData();
        if (!PageComponents.Contains(this))
        {
            PageComponents.Add(this);
        }

        _loading = false;
    }

    private bool FilterFunc(CompanyModel companyModel)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (companyModel.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task DeleteCompanies()
    {
        var success = true;
        foreach (var companyModel in _selectedCompanies)
        {
            var deleteCompanyCommand = new DeleteCompanyCommand(companyModel.Id);
            var result = await Mediator.Send(deleteCompanyCommand);

            if (result.Success)
            {
                CompanyIds.Remove(companyModel.Id);
                CompanyModels.Remove(companyModel);
            }

            success &= result.Success;
        }

        SnackBar.Add(success ? "Companies Deleted" : "Failed to delete companies");
    }

    private void BackupItem(object companyModel)
    {

        _companyModelBeforeEdit = new CompanyModel()
            {
                Id = ((CompanyModel)companyModel).Id,
                Name = ((CompanyModel)companyModel).Name,
                StaffIds = ((CompanyModel)companyModel).StaffIds,
                WarehouseIds = ((CompanyModel)companyModel).WarehouseIds,
            };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object companyModel)
    {
        ((CompanyModel)companyModel).Id = _companyModelBeforeEdit.Id;
        ((CompanyModel)companyModel).Name = _companyModelBeforeEdit.Name;
        ((CompanyModel)companyModel).StaffIds = _companyModelBeforeEdit.StaffIds;
        ((CompanyModel)companyModel).WarehouseIds = _companyModelBeforeEdit.WarehouseIds;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object companyModel)
    {
        var companyModelConverted = (CompanyModel)companyModel;
        var updateCompanyDTO = new UpdateCompanyRequestDTO()
            {
                CreatedBy = CurrentStaff.Id,
                Id = companyModelConverted.Id,
                Name = companyModelConverted.Name,
                StaffIds = companyModelConverted.StaffIds,
                WarehouseIds = companyModelConverted.WarehouseIds,
            };
        var updateCompanyCommand = new UpdateCompanyCommand(updateCompanyDTO);
        var response = await Mediator.Send(updateCompanyCommand);
        await FetchData();
        SnackBar.Add(response.Message);
        StateHasChanged();
    }

    private async Task OpenCreateCompanyDialogAsync()
    {
        var parameters = new DialogParameters<CreateCompanyDialog>()
        {
            { x => x.CurrentStaff,  CurrentStaff},
        };
        var options = Theme.DefaultCreateDialogOptions();
        var dialog = await Dialog.ShowAsync<CreateCompanyDialog>("Create Company", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data != null)
        {
            var companyModelCreated = (CompanyModel)dialogResult.Data;
            if (companyModelCreated == null)
            {
                throw new Exception("Company created is not recognized");

            }

            CompanyIds.Add(companyModelCreated.Id);
            CompanyModels.Add(companyModelCreated);
            StateHasChanged();
            SnackBar.Add($"{companyModelCreated.Name} created");
        }
    }

    public async Task<bool> FetchData()
    {
        CompanyModels.Clear();
        foreach (var companyId in CompanyIds)
        {
            var getCompanyByIdQuery = new GetCompanyByIdQuery(companyId);
            var companyDTO = await Mediator.Send(getCompanyByIdQuery);

            var companyModel = new CompanyModel()
                {
                    Id = companyDTO.Id,
                    Name = companyDTO.Name,
                    WarehouseIds = companyDTO.WarehouseIds,
                    StaffIds = companyDTO.StaffIds,
                };

            CompanyModels.Add(companyModel);
        }

        // set warehouse models
        _allWarehouseModels.Clear();
        var getAllWarehouseIdsByCompanyIdQuery = new GetAllWarehouseIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var warehouseIds = await Mediator.Send(getAllWarehouseIdsByCompanyIdQuery);
        foreach (var warehouseId in warehouseIds)
        {
            var getWarehouseByIdQuery = new GetWarehouseByIdQuery(warehouseId);
            var getWarehouseResponseDTO = await Mediator.Send(getWarehouseByIdQuery);

            var warehouseModel = new WarehouseModel()
                {
                    Id = getWarehouseResponseDTO.Id,
                    Name = getWarehouseResponseDTO.Name,
                    Address = getWarehouseResponseDTO.Address,
                    ZoneIds = getWarehouseResponseDTO.ZoneIds,
                    CompanyId = getWarehouseResponseDTO.CompanyId,
                };
            _allWarehouseModels.Add(warehouseModel);
        }

        // set staff models
        _allStaffModels.Clear();
        var getAllStaffIdsByCompanyIdQuery = new GetAllStaffIdsByCompanyIdQuery(CurrentStaff.CompanyId);
        var staffIds = await Mediator.Send(getAllStaffIdsByCompanyIdQuery);
        foreach (var staffId in staffIds)
        {
            var getStaffByIdQuery = new GetStaffByIdQuery(staffId);
            var getStaffResponseDTO = await Mediator.Send(getStaffByIdQuery);

            var staffModel = new StaffModel()
                {
                    Id = getStaffResponseDTO.Id,
                    Roles = getStaffResponseDTO.Roles,
                    Email = getStaffResponseDTO.Email,
                    FirstName = getStaffResponseDTO.FirstName,
                    LastName = getStaffResponseDTO.LastName,
                    ZoneIds = getStaffResponseDTO.ZoneIds,
                    CompanyId = getStaffResponseDTO.CompanyId.Value,
                };
            _allStaffModels.Add(staffModel);
        }


        return true;
    }

    private async Task OpenWarehouseDialogAsync(List<Guid> warehouseIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenWarehouseDialogAsync(warehouseIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    private async Task OpenStaffDialogAsync(List<Guid> staffIds)
    {
        var dialogResult = await ViewDialogUtilities.OpenStaffDialogAsync(staffIds, CurrentStaff, Dialog, MainPage, PageComponents);
        await MainPage.InitializeData();
        foreach (var pageComponent in PageComponents)
        {
            if (pageComponent != this)
            {
                var success = await pageComponent.FetchData();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        PageComponents.Remove(this);
    }
}
